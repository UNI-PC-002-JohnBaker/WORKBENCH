
NUCLEO_F746ZG_Uart_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003b4  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800057c  08000584  00010584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800057c  0800057c  00010584  2**0
                  CONTENTS
  4 .ARM          00000000  0800057c  0800057c  00010584  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800057c  08000584  00010584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800057c  0800057c  0001057c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000580  08000580  00010580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000584  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000584  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010584  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000105b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000698  00000000  00000000  000105f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000021d  00000000  00000000  00010c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b0  00000000  00000000  00010eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000007b  00000000  00000000  00010f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b852  00000000  00000000  00010fdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000788  00000000  00000000  0002c82d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b463  00000000  00000000  0002cfb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000250  00000000  00000000  000c8418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000c8668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08000564 	.word	0x08000564

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000004 	.word	0x20000004
 8000204:	08000564 	.word	0x08000564

08000208 <main>:
void set_uart_transfer_direction(USART_TypeDef *USARTx, uint32_t TransferDirection);

void delayMs (int n);

int main(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
	//int x;
	uart3_tx_init();
 800020c:	f000 f888 	bl	8000320 <uart3_tx_init>
	set_uart_transfer_direction(USART3, USART_CR1_TE);
 8000210:	2108      	movs	r1, #8
 8000212:	4824      	ldr	r0, [pc, #144]	; (80002a4 <main+0x9c>)
 8000214:	f000 f8ce 	bl	80003b4 <set_uart_transfer_direction>


	//*Enable clock access for Port B*/
	//RCC_AHB1EN_R  |= GPIO_CLK_EN_B;
	RCC->AHB1ENR |= GPIO_CLK_EN_B;  //
 8000218:	4b23      	ldr	r3, [pc, #140]	; (80002a8 <main+0xa0>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a22      	ldr	r2, [pc, #136]	; (80002a8 <main+0xa0>)
 800021e:	f043 0302 	orr.w	r3, r3, #2
 8000222:	6313      	str	r3, [r2, #48]	; 0x30

	//*Enable clock access for Port c*/
	RCC->AHB1ENR |= GPIO_CLK_EN_C;
 8000224:	4b20      	ldr	r3, [pc, #128]	; (80002a8 <main+0xa0>)
 8000226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000228:	4a1f      	ldr	r2, [pc, #124]	; (80002a8 <main+0xa0>)
 800022a:	f043 0304 	orr.w	r3, r3, #4
 800022e:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOC->MODER &= ~USER_USER_B1_MODER;
 8000230:	4b1e      	ldr	r3, [pc, #120]	; (80002ac <main+0xa4>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a1d      	ldr	r2, [pc, #116]	; (80002ac <main+0xa4>)
 8000236:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800023a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~USER_USER_B1_MODER2;
 800023c:	4b1b      	ldr	r3, [pc, #108]	; (80002ac <main+0xa4>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a1a      	ldr	r2, [pc, #104]	; (80002ac <main+0xa4>)
 8000242:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000246:	6013      	str	r3, [r2, #0]
	//*Configure Button1 PC13 as input pin*/


	//*Configure LED pins as output pins*/
	//GPIOB_MODE_R |= USER_LED1_MODER | USER_LED2_MODER | USER_LED3_MODER;
	GPIOB->MODER |= USER_LED1_MODER | USER_LED2_MODER | USER_LED3_MODER;
 8000248:	4b19      	ldr	r3, [pc, #100]	; (80002b0 <main+0xa8>)
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	4918      	ldr	r1, [pc, #96]	; (80002b0 <main+0xa8>)
 800024e:	4b19      	ldr	r3, [pc, #100]	; (80002b4 <main+0xac>)
 8000250:	4313      	orrs	r3, r2
 8000252:	600b      	str	r3, [r1, #0]

		//Toggle on all LEDS/
		//GPIOB_ODR_R |= USER_LED1 | USER_LED2 | USER_LED3;

		//Check input (GPIOC_IDR:13)
		if(GPIOC->IDR & BTN_PIN)
 8000254:	4b15      	ldr	r3, [pc, #84]	; (80002ac <main+0xa4>)
 8000256:	691b      	ldr	r3, [r3, #16]
 8000258:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800025c:	2b00      	cmp	r3, #0
 800025e:	d01c      	beq.n	800029a <main+0x92>

		{
			//Turn on/off all LEDS//
			//GPIOB_ODR_R ^= USER_LED1 | USER_LED2 | USER_LED3;
			//GPIOB->ODR ^= USER_LED1 | USER_LED2 | USER_LED3;
			GPIOB->BSRR = (1U<<0) | (1U<<7) | (1U<<14);
 8000260:	4b13      	ldr	r3, [pc, #76]	; (80002b0 <main+0xa8>)
 8000262:	f244 0281 	movw	r2, #16513	; 0x4081
 8000266:	619a      	str	r2, [r3, #24]
			//for(int i = 0;i<1000000;i++){}


			uart_write(USART3, 'Y');
 8000268:	2159      	movs	r1, #89	; 0x59
 800026a:	480e      	ldr	r0, [pc, #56]	; (80002a4 <main+0x9c>)
 800026c:	f000 f842 	bl	80002f4 <uart_write>
					//delayMs (30);  //leave a gap between messages
					uart_write(USART3, 'E');
 8000270:	2145      	movs	r1, #69	; 0x45
 8000272:	480c      	ldr	r0, [pc, #48]	; (80002a4 <main+0x9c>)
 8000274:	f000 f83e 	bl	80002f4 <uart_write>
					//delayMs (30);  //leave a gap between messages
					uart_write(USART3, 'S');
 8000278:	2153      	movs	r1, #83	; 0x53
 800027a:	480a      	ldr	r0, [pc, #40]	; (80002a4 <main+0x9c>)
 800027c:	f000 f83a 	bl	80002f4 <uart_write>
					//delayMs (200);  /*leave a gap between messages
					uart_write(USART3, ' ');
 8000280:	2120      	movs	r1, #32
 8000282:	4808      	ldr	r0, [pc, #32]	; (80002a4 <main+0x9c>)
 8000284:	f000 f836 	bl	80002f4 <uart_write>
					uart_write(USART3, ' ');
 8000288:	2120      	movs	r1, #32
 800028a:	4806      	ldr	r0, [pc, #24]	; (80002a4 <main+0x9c>)
 800028c:	f000 f832 	bl	80002f4 <uart_write>

					delayMs (300);  /*leave a gap between messages
 8000290:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000294:	f000 f812 	bl	80002bc <delayMs>
 8000298:	e7dc      	b.n	8000254 <main+0x4c>

		}

		else
		{
			GPIOB->BSRR = (1U<<16) | (1U<<23) | (1U<<30);
 800029a:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <main+0xa8>)
 800029c:	4a06      	ldr	r2, [pc, #24]	; (80002b8 <main+0xb0>)
 800029e:	619a      	str	r2, [r3, #24]
		if(GPIOC->IDR & BTN_PIN)
 80002a0:	e7d8      	b.n	8000254 <main+0x4c>
 80002a2:	bf00      	nop
 80002a4:	40004800 	.word	0x40004800
 80002a8:	40023800 	.word	0x40023800
 80002ac:	40020800 	.word	0x40020800
 80002b0:	40020400 	.word	0x40020400
 80002b4:	10004001 	.word	0x10004001
 80002b8:	40810000 	.word	0x40810000

080002bc <delayMs>:

	}
}

void delayMs (int n)
{
 80002bc:	b480      	push	{r7}
 80002be:	b085      	sub	sp, #20
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
	int i;
	for (; n > 0; n--)
 80002c4:	e00c      	b.n	80002e0 <delayMs+0x24>
		for (i = 0; i < 8000; i++);
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
 80002ca:	e002      	b.n	80002d2 <delayMs+0x16>
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	3301      	adds	r3, #1
 80002d0:	60fb      	str	r3, [r7, #12]
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80002d8:	dbf8      	blt.n	80002cc <delayMs+0x10>
	for (; n > 0; n--)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	3b01      	subs	r3, #1
 80002de:	607b      	str	r3, [r7, #4]
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	dcef      	bgt.n	80002c6 <delayMs+0xa>
}
 80002e6:	bf00      	nop
 80002e8:	bf00      	nop
 80002ea:	3714      	adds	r7, #20
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr

080002f4 <uart_write>:


void uart_write(USART_TypeDef *USARTx, uint32_t value)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	6039      	str	r1, [r7, #0]
	/*Make sure transmit data register is empty*/
	 //USARTx->ISR & (1U<<7);
	//while(!((USARTx->ISR & USART_ISR_TXE) == USART_ISR_TXE)){}
	while(!(USARTx->ISR & USART_ISR_TXE)){}
 80002fe:	bf00      	nop
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	69db      	ldr	r3, [r3, #28]
 8000304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0f9      	beq.n	8000300 <uart_write+0xc>

	/*Write value into transmit data register*/
	USARTx->TDR = value;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	683a      	ldr	r2, [r7, #0]
 8000310:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
	...

08000320 <uart3_tx_init>:


void uart3_tx_init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	/*1. Enable clock access to GPIOD*/
	set_ahb1_periphclock(GPIODEN); //RCC->AHB1ENR |= GPIODEN
 8000324:	2008      	movs	r0, #8
 8000326:	f000 f87b 	bl	8000420 <set_ahb1_periphclock>

	/*2. Set PD8 mode to alternate function*/
	set_pin_mode(GPIOD, UART3_TX, GPIO_ALTERNATE_MODE);
 800032a:	2202      	movs	r2, #2
 800032c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000330:	4816      	ldr	r0, [pc, #88]	; (800038c <uart3_tx_init+0x6c>)
 8000332:	f000 f899 	bl	8000468 <set_pin_mode>
					USART3 RX:PD9 ==> 0111 to AFR[1]:AFR9[3:0]
	*/

	//AFR[1] = GPIOx_AFRH,  AFR[0] = GPIOx_AFRL
	//alternative is use compact function but im not ready
	GPIOD->AFR[1] |=  (1U<<0);
 8000336:	4b15      	ldr	r3, [pc, #84]	; (800038c <uart3_tx_init+0x6c>)
 8000338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800033a:	4a14      	ldr	r2, [pc, #80]	; (800038c <uart3_tx_init+0x6c>)
 800033c:	f043 0301 	orr.w	r3, r3, #1
 8000340:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |=  (1U<<1);
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <uart3_tx_init+0x6c>)
 8000344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000346:	4a11      	ldr	r2, [pc, #68]	; (800038c <uart3_tx_init+0x6c>)
 8000348:	f043 0302 	orr.w	r3, r3, #2
 800034c:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |=  (1U<<2);
 800034e:	4b0f      	ldr	r3, [pc, #60]	; (800038c <uart3_tx_init+0x6c>)
 8000350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000352:	4a0e      	ldr	r2, [pc, #56]	; (800038c <uart3_tx_init+0x6c>)
 8000354:	f043 0304 	orr.w	r3, r3, #4
 8000358:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] &= ~(1U<<3);
 800035a:	4b0c      	ldr	r3, [pc, #48]	; (800038c <uart3_tx_init+0x6c>)
 800035c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800035e:	4a0b      	ldr	r2, [pc, #44]	; (800038c <uart3_tx_init+0x6c>)
 8000360:	f023 0308 	bic.w	r3, r3, #8
 8000364:	6253      	str	r3, [r2, #36]	; 0x24

	/*Enable clock to USART module*/
	set_apb1_periphclock(UART3EN);
 8000366:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800036a:	f000 f86b 	bl	8000444 <set_apb1_periphclock>

	/*Configure USART parameters*/
	config_uart_parameters(USART3, UART_DATAWIDTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
 800036e:	2300      	movs	r3, #0
 8000370:	2200      	movs	r2, #0
 8000372:	2100      	movs	r1, #0
 8000374:	4806      	ldr	r0, [pc, #24]	; (8000390 <uart3_tx_init+0x70>)
 8000376:	f000 f831 	bl	80003dc <config_uart_parameters>

	/*Set baudrate*/
	//uart_set_baudrate(USART3, 15000000, 57600);
	USART3->BRR = baud_9600;    /* 9600 baud@ 16MHz */
 800037a:	4b05      	ldr	r3, [pc, #20]	; (8000390 <uart3_tx_init+0x70>)
 800037c:	f240 6283 	movw	r2, #1667	; 0x683
 8000380:	60da      	str	r2, [r3, #12]
	/*Enable USART*/
	//USART3->CR1 |= USART_CR1_UE;
	//or
	//SET_BIT(USART3->CR1,USART_CR1_UE);
	//or use a wrapper function
	uart_enable(USART3);
 8000382:	4803      	ldr	r0, [pc, #12]	; (8000390 <uart3_tx_init+0x70>)
 8000384:	f000 f806 	bl	8000394 <uart_enable>


}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}
 800038c:	40020c00 	.word	0x40020c00
 8000390:	40004800 	.word	0x40004800

08000394 <uart_enable>:

void uart_enable(USART_TypeDef *USARTx)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	SET_BIT(USARTx->CR1,USART_CR1_UE);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	f043 0201 	orr.w	r2, r3, #1
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	601a      	str	r2, [r3, #0]
}
 80003a8:	bf00      	nop
 80003aa:	370c      	adds	r7, #12
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr

080003b4 <set_uart_transfer_direction>:

void set_uart_transfer_direction(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
 80003bc:	6039      	str	r1, [r7, #0]
	MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f023 020c 	bic.w	r2, r3, #12
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	431a      	orrs	r2, r3
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	601a      	str	r2, [r3, #0]
}
 80003ce:	bf00      	nop
 80003d0:	370c      	adds	r7, #12
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
	...

080003dc <config_uart_parameters>:
		{
	USARTx->BRR = comput_uart_div(PeriphClk, BaudRate);
		}

void config_uart_parameters(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity, uint32_t StopBits)
{
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	60f8      	str	r0, [r7, #12]
 80003e4:	60b9      	str	r1, [r7, #8]
 80003e6:	607a      	str	r2, [r7, #4]
 80003e8:	603b      	str	r3, [r7, #0]
	MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	681a      	ldr	r2, [r3, #0]
 80003ee:	4b0b      	ldr	r3, [pc, #44]	; (800041c <config_uart_parameters+0x40>)
 80003f0:	4013      	ands	r3, r2
 80003f2:	6879      	ldr	r1, [r7, #4]
 80003f4:	68ba      	ldr	r2, [r7, #8]
 80003f6:	430a      	orrs	r2, r1
 80003f8:	431a      	orrs	r2, r3
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	601a      	str	r2, [r3, #0]
	MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	431a      	orrs	r2, r3
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	605a      	str	r2, [r3, #4]

}
 800040e:	bf00      	nop
 8000410:	3714      	adds	r7, #20
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	efffe9ff 	.word	0xefffe9ff

08000420 <set_ahb1_periphclock>:


void set_ahb1_periphclock(uint32_t perihs)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
		//RCC->AHP1ENR |= perihs;
		SET_BIT(RCC->AHB1ENR,perihs);
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <set_ahb1_periphclock+0x20>)
 800042a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800042c:	4904      	ldr	r1, [pc, #16]	; (8000440 <set_ahb1_periphclock+0x20>)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4313      	orrs	r3, r2
 8000432:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	40023800 	.word	0x40023800

08000444 <set_apb1_periphclock>:
		//RCC->AHP1ENR |= perihs;
		SET_BIT(RCC->AHB2ENR, perihs);
}

void set_apb1_periphclock(uint32_t perihs)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
		//RCC->AHP1ENR |= perihs;
		SET_BIT(RCC->APB1ENR, perihs);
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <set_apb1_periphclock+0x20>)
 800044e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000450:	4904      	ldr	r1, [pc, #16]	; (8000464 <set_apb1_periphclock+0x20>)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4313      	orrs	r3, r2
 8000456:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000458:	bf00      	nop
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr
 8000464:	40023800 	.word	0x40023800

08000468 <set_pin_mode>:
}


void set_pin_mode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)

{
 8000468:	b480      	push	{r7}
 800046a:	b089      	sub	sp, #36	; 0x24
 800046c:	af00      	add	r7, sp, #0
 800046e:	60f8      	str	r0, [r7, #12]
 8000470:	60b9      	str	r1, [r7, #8]
 8000472:	607a      	str	r2, [r7, #4]
	 *
	 * Mode = 0b 10 = 0x2
	 * 2 << 16 ==> bit16 = 0, bit 17 = 1
	 */

	MODIFY_REG(GPIOx->MODER, (0x3 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	68ba      	ldr	r2, [r7, #8]
 800047a:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800047c:	697a      	ldr	r2, [r7, #20]
 800047e:	fa92 f2a2 	rbit	r2, r2
 8000482:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000484:	693a      	ldr	r2, [r7, #16]
 8000486:	fab2 f282 	clz	r2, r2
 800048a:	b2d2      	uxtb	r2, r2
 800048c:	0052      	lsls	r2, r2, #1
 800048e:	2103      	movs	r1, #3
 8000490:	fa01 f202 	lsl.w	r2, r1, r2
 8000494:	43d2      	mvns	r2, r2
 8000496:	401a      	ands	r2, r3
 8000498:	68bb      	ldr	r3, [r7, #8]
 800049a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800049c:	69fb      	ldr	r3, [r7, #28]
 800049e:	fa93 f3a3 	rbit	r3, r3
 80004a2:	61bb      	str	r3, [r7, #24]
  return result;
 80004a4:	69bb      	ldr	r3, [r7, #24]
 80004a6:	fab3 f383 	clz	r3, r3
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	6879      	ldr	r1, [r7, #4]
 80004b0:	fa01 f303 	lsl.w	r3, r1, r3
 80004b4:	431a      	orrs	r2, r3
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	601a      	str	r2, [r3, #0]

}
 80004ba:	bf00      	nop
 80004bc:	3724      	adds	r7, #36	; 0x24
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
	...

080004c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004c8:	480d      	ldr	r0, [pc, #52]	; (8000500 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004d0:	480c      	ldr	r0, [pc, #48]	; (8000504 <LoopForever+0x6>)
  ldr r1, =_edata
 80004d2:	490d      	ldr	r1, [pc, #52]	; (8000508 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004d4:	4a0d      	ldr	r2, [pc, #52]	; (800050c <LoopForever+0xe>)
  movs r3, #0
 80004d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004d8:	e002      	b.n	80004e0 <LoopCopyDataInit>

080004da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004de:	3304      	adds	r3, #4

080004e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004e4:	d3f9      	bcc.n	80004da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004e6:	4a0a      	ldr	r2, [pc, #40]	; (8000510 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004e8:	4c0a      	ldr	r4, [pc, #40]	; (8000514 <LoopForever+0x16>)
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004ec:	e001      	b.n	80004f2 <LoopFillZerobss>

080004ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004f0:	3204      	adds	r2, #4

080004f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004f4:	d3fb      	bcc.n	80004ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004f6:	f000 f811 	bl	800051c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004fa:	f7ff fe85 	bl	8000208 <main>

080004fe <LoopForever>:

LoopForever:
  b LoopForever
 80004fe:	e7fe      	b.n	80004fe <LoopForever>
  ldr   r0, =_estack
 8000500:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000508:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800050c:	08000584 	.word	0x08000584
  ldr r2, =_sbss
 8000510:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000514:	2000001c 	.word	0x2000001c

08000518 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000518:	e7fe      	b.n	8000518 <ADC_IRQHandler>
	...

0800051c <__libc_init_array>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	4d0d      	ldr	r5, [pc, #52]	; (8000554 <__libc_init_array+0x38>)
 8000520:	4c0d      	ldr	r4, [pc, #52]	; (8000558 <__libc_init_array+0x3c>)
 8000522:	1b64      	subs	r4, r4, r5
 8000524:	10a4      	asrs	r4, r4, #2
 8000526:	2600      	movs	r6, #0
 8000528:	42a6      	cmp	r6, r4
 800052a:	d109      	bne.n	8000540 <__libc_init_array+0x24>
 800052c:	4d0b      	ldr	r5, [pc, #44]	; (800055c <__libc_init_array+0x40>)
 800052e:	4c0c      	ldr	r4, [pc, #48]	; (8000560 <__libc_init_array+0x44>)
 8000530:	f000 f818 	bl	8000564 <_init>
 8000534:	1b64      	subs	r4, r4, r5
 8000536:	10a4      	asrs	r4, r4, #2
 8000538:	2600      	movs	r6, #0
 800053a:	42a6      	cmp	r6, r4
 800053c:	d105      	bne.n	800054a <__libc_init_array+0x2e>
 800053e:	bd70      	pop	{r4, r5, r6, pc}
 8000540:	f855 3b04 	ldr.w	r3, [r5], #4
 8000544:	4798      	blx	r3
 8000546:	3601      	adds	r6, #1
 8000548:	e7ee      	b.n	8000528 <__libc_init_array+0xc>
 800054a:	f855 3b04 	ldr.w	r3, [r5], #4
 800054e:	4798      	blx	r3
 8000550:	3601      	adds	r6, #1
 8000552:	e7f2      	b.n	800053a <__libc_init_array+0x1e>
 8000554:	0800057c 	.word	0x0800057c
 8000558:	0800057c 	.word	0x0800057c
 800055c:	0800057c 	.word	0x0800057c
 8000560:	08000580 	.word	0x08000580

08000564 <_init>:
 8000564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000566:	bf00      	nop
 8000568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800056a:	bc08      	pop	{r3}
 800056c:	469e      	mov	lr, r3
 800056e:	4770      	bx	lr

08000570 <_fini>:
 8000570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000572:	bf00      	nop
 8000574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000576:	bc08      	pop	{r3}
 8000578:	469e      	mov	lr, r3
 800057a:	4770      	bx	lr
