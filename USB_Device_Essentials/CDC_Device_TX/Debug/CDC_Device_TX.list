
CDC_Device_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007928  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08007af0  08007af0  00017af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b40  08007b40  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  08007b40  08007b40  00017b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b48  08007b48  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b48  08007b48  00017b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b4c  08007b4c  00017b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  08007b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b54  2000015c  08007cac  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20001cb0  08007cac  00021cb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ef3a  00000000  00000000  000201cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d80  00000000  00000000  0002f109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c58  00000000  00000000  00031e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000918  00000000  00000000  00032ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000274b8  00000000  00000000  00033400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011219  00000000  00000000  0005a8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4ad8  00000000  00000000  0006bad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000033b0  00000000  00000000  001505ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0015395c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000015c 	.word	0x2000015c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007ad8 	.word	0x08007ad8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000160 	.word	0x20000160
 8000204:	08007ad8 	.word	0x08007ad8

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f000 f969 	bl	80007de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f806 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 f872 	bl	80005f8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000514:	f006 fc34 	bl	8006d80 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000518:	e7fe      	b.n	8000518 <main+0x14>
	...

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f007 fa44 	bl	80079b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	4b2b      	ldr	r3, [pc, #172]	; (80005f0 <SystemClock_Config+0xd4>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	4a2a      	ldr	r2, [pc, #168]	; (80005f0 <SystemClock_Config+0xd4>)
 8000546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054a:	6413      	str	r3, [r2, #64]	; 0x40
 800054c:	4b28      	ldr	r3, [pc, #160]	; (80005f0 <SystemClock_Config+0xd4>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000558:	4b26      	ldr	r3, [pc, #152]	; (80005f4 <SystemClock_Config+0xd8>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000560:	4a24      	ldr	r2, [pc, #144]	; (80005f4 <SystemClock_Config+0xd8>)
 8000562:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <SystemClock_Config+0xd8>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000574:	2301      	movs	r3, #1
 8000576:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000578:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800057c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	2302      	movs	r3, #2
 8000580:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000582:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000586:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000588:	2304      	movs	r3, #4
 800058a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800058c:	2360      	movs	r3, #96	; 0x60
 800058e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000590:	2302      	movs	r3, #2
 8000592:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000594:	2304      	movs	r3, #4
 8000596:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 0320 	add.w	r3, r7, #32
 800059c:	4618      	mov	r0, r3
 800059e:	f001 ff65 	bl	800246c <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005a8:	f000 f84a 	bl	8000640 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005ac:	f001 ff0e 	bl	80023cc <HAL_PWREx_EnableOverDrive>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005b6:	f000 f843 	bl	8000640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ba:	230f      	movs	r3, #15
 80005bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005be:	2302      	movs	r3, #2
 80005c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2103      	movs	r1, #3
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 f9ec 	bl	80029b4 <HAL_RCC_ClockConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80005e2:	f000 f82d 	bl	8000640 <Error_Handler>
  }
}
 80005e6:	bf00      	nop
 80005e8:	3750      	adds	r7, #80	; 0x50
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_GPIO_Init+0x44>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a0e      	ldr	r2, [pc, #56]	; (800063c <MX_GPIO_Init+0x44>)
 8000604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_GPIO_Init+0x44>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_GPIO_Init+0x44>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a08      	ldr	r2, [pc, #32]	; (800063c <MX_GPIO_Init+0x44>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_GPIO_Init+0x44>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800

08000640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000644:	b672      	cpsid	i
}
 8000646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000648:	e7fe      	b.n	8000648 <Error_Handler+0x8>
	...

0800064c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000652:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <HAL_MspInit+0x44>)
 8000654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000656:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <HAL_MspInit+0x44>)
 8000658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065c:	6413      	str	r3, [r2, #64]	; 0x40
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <HAL_MspInit+0x44>)
 8000660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <HAL_MspInit+0x44>)
 800066c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066e:	4a08      	ldr	r2, [pc, #32]	; (8000690 <HAL_MspInit+0x44>)
 8000670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000674:	6453      	str	r3, [r2, #68]	; 0x44
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <HAL_MspInit+0x44>)
 8000678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800

08000694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000698:	e7fe      	b.n	8000698 <NMI_Handler+0x4>

0800069a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800069e:	e7fe      	b.n	800069e <HardFault_Handler+0x4>

080006a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <MemManage_Handler+0x4>

080006a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006aa:	e7fe      	b.n	80006aa <BusFault_Handler+0x4>

080006ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <UsageFault_Handler+0x4>

080006b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e0:	f000 f8ba 	bl	8000858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80006ec:	4802      	ldr	r0, [pc, #8]	; (80006f8 <OTG_FS_IRQHandler+0x10>)
 80006ee:	f000 fcfb 	bl	80010e8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20001660 	.word	0x20001660

080006fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000704:	4a14      	ldr	r2, [pc, #80]	; (8000758 <_sbrk+0x5c>)
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <_sbrk+0x60>)
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000710:	4b13      	ldr	r3, [pc, #76]	; (8000760 <_sbrk+0x64>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d102      	bne.n	800071e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <_sbrk+0x64>)
 800071a:	4a12      	ldr	r2, [pc, #72]	; (8000764 <_sbrk+0x68>)
 800071c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <_sbrk+0x64>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4413      	add	r3, r2
 8000726:	693a      	ldr	r2, [r7, #16]
 8000728:	429a      	cmp	r2, r3
 800072a:	d207      	bcs.n	800073c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800072c:	f007 f95c 	bl	80079e8 <__errno>
 8000730:	4603      	mov	r3, r0
 8000732:	220c      	movs	r2, #12
 8000734:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000736:	f04f 33ff 	mov.w	r3, #4294967295
 800073a:	e009      	b.n	8000750 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800073c:	4b08      	ldr	r3, [pc, #32]	; (8000760 <_sbrk+0x64>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000742:	4b07      	ldr	r3, [pc, #28]	; (8000760 <_sbrk+0x64>)
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4413      	add	r3, r2
 800074a:	4a05      	ldr	r2, [pc, #20]	; (8000760 <_sbrk+0x64>)
 800074c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800074e:	68fb      	ldr	r3, [r7, #12]
}
 8000750:	4618      	mov	r0, r3
 8000752:	3718      	adds	r7, #24
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20050000 	.word	0x20050000
 800075c:	00000400 	.word	0x00000400
 8000760:	20000178 	.word	0x20000178
 8000764:	20001cb0 	.word	0x20001cb0

08000768 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <SystemInit+0x20>)
 800076e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000772:	4a05      	ldr	r2, [pc, #20]	; (8000788 <SystemInit+0x20>)
 8000774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800078c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000790:	480d      	ldr	r0, [pc, #52]	; (80007c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000792:	490e      	ldr	r1, [pc, #56]	; (80007cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000794:	4a0e      	ldr	r2, [pc, #56]	; (80007d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000798:	e002      	b.n	80007a0 <LoopCopyDataInit>

0800079a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800079a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800079c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800079e:	3304      	adds	r3, #4

080007a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a4:	d3f9      	bcc.n	800079a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007a6:	4a0b      	ldr	r2, [pc, #44]	; (80007d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80007a8:	4c0b      	ldr	r4, [pc, #44]	; (80007d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007ac:	e001      	b.n	80007b2 <LoopFillZerobss>

080007ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b0:	3204      	adds	r2, #4

080007b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b4:	d3fb      	bcc.n	80007ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007b6:	f7ff ffd7 	bl	8000768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ba:	f007 f91b 	bl	80079f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007be:	f7ff fea1 	bl	8000504 <main>
  bx  lr    
 80007c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007c4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80007c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007cc:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 80007d0:	08007b50 	.word	0x08007b50
  ldr r2, =_sbss
 80007d4:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 80007d8:	20001cb0 	.word	0x20001cb0

080007dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007dc:	e7fe      	b.n	80007dc <ADC_IRQHandler>

080007de <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e2:	2003      	movs	r0, #3
 80007e4:	f000 f94c 	bl	8000a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007e8:	2000      	movs	r0, #0
 80007ea:	f000 f805 	bl	80007f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007ee:	f7ff ff2d 	bl	800064c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007f2:	2300      	movs	r3, #0
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <HAL_InitTick+0x54>)
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <HAL_InitTick+0x58>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4619      	mov	r1, r3
 800080a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000812:	fbb2 f3f3 	udiv	r3, r2, r3
 8000816:	4618      	mov	r0, r3
 8000818:	f000 f967 	bl	8000aea <HAL_SYSTICK_Config>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000822:	2301      	movs	r3, #1
 8000824:	e00e      	b.n	8000844 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2b0f      	cmp	r3, #15
 800082a:	d80a      	bhi.n	8000842 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800082c:	2200      	movs	r2, #0
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	f04f 30ff 	mov.w	r0, #4294967295
 8000834:	f000 f92f 	bl	8000a96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000838:	4a06      	ldr	r2, [pc, #24]	; (8000854 <HAL_InitTick+0x5c>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800083e:	2300      	movs	r3, #0
 8000840:	e000      	b.n	8000844 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
}
 8000844:	4618      	mov	r0, r3
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000000 	.word	0x20000000
 8000850:	20000008 	.word	0x20000008
 8000854:	20000004 	.word	0x20000004

08000858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_IncTick+0x20>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	461a      	mov	r2, r3
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <HAL_IncTick+0x24>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4413      	add	r3, r2
 8000868:	4a04      	ldr	r2, [pc, #16]	; (800087c <HAL_IncTick+0x24>)
 800086a:	6013      	str	r3, [r2, #0]
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	20000008 	.word	0x20000008
 800087c:	2000017c 	.word	0x2000017c

08000880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  return uwTick;
 8000884:	4b03      	ldr	r3, [pc, #12]	; (8000894 <HAL_GetTick+0x14>)
 8000886:	681b      	ldr	r3, [r3, #0]
}
 8000888:	4618      	mov	r0, r3
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	2000017c 	.word	0x2000017c

08000898 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008a0:	f7ff ffee 	bl	8000880 <HAL_GetTick>
 80008a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008b0:	d005      	beq.n	80008be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008b2:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <HAL_Delay+0x44>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	461a      	mov	r2, r3
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	4413      	add	r3, r2
 80008bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008be:	bf00      	nop
 80008c0:	f7ff ffde 	bl	8000880 <HAL_GetTick>
 80008c4:	4602      	mov	r2, r0
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	68fa      	ldr	r2, [r7, #12]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d8f7      	bhi.n	80008c0 <HAL_Delay+0x28>
  {
  }
}
 80008d0:	bf00      	nop
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000008 	.word	0x20000008

080008e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f003 0307 	and.w	r3, r3, #7
 80008ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008f0:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <__NVIC_SetPriorityGrouping+0x40>)
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008f6:	68ba      	ldr	r2, [r7, #8]
 80008f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008fc:	4013      	ands	r3, r2
 80008fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <__NVIC_SetPriorityGrouping+0x44>)
 800090a:	4313      	orrs	r3, r2
 800090c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800090e:	4a04      	ldr	r2, [pc, #16]	; (8000920 <__NVIC_SetPriorityGrouping+0x40>)
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	60d3      	str	r3, [r2, #12]
}
 8000914:	bf00      	nop
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000ed00 	.word	0xe000ed00
 8000924:	05fa0000 	.word	0x05fa0000

08000928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800092c:	4b04      	ldr	r3, [pc, #16]	; (8000940 <__NVIC_GetPriorityGrouping+0x18>)
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	0a1b      	lsrs	r3, r3, #8
 8000932:	f003 0307 	and.w	r3, r3, #7
}
 8000936:	4618      	mov	r0, r3
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	2b00      	cmp	r3, #0
 8000954:	db0b      	blt.n	800096e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	f003 021f 	and.w	r2, r3, #31
 800095c:	4907      	ldr	r1, [pc, #28]	; (800097c <__NVIC_EnableIRQ+0x38>)
 800095e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000962:	095b      	lsrs	r3, r3, #5
 8000964:	2001      	movs	r0, #1
 8000966:	fa00 f202 	lsl.w	r2, r0, r2
 800096a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e000e100 	.word	0xe000e100

08000980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	6039      	str	r1, [r7, #0]
 800098a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800098c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000990:	2b00      	cmp	r3, #0
 8000992:	db0a      	blt.n	80009aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	b2da      	uxtb	r2, r3
 8000998:	490c      	ldr	r1, [pc, #48]	; (80009cc <__NVIC_SetPriority+0x4c>)
 800099a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099e:	0112      	lsls	r2, r2, #4
 80009a0:	b2d2      	uxtb	r2, r2
 80009a2:	440b      	add	r3, r1
 80009a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009a8:	e00a      	b.n	80009c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4908      	ldr	r1, [pc, #32]	; (80009d0 <__NVIC_SetPriority+0x50>)
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	f003 030f 	and.w	r3, r3, #15
 80009b6:	3b04      	subs	r3, #4
 80009b8:	0112      	lsls	r2, r2, #4
 80009ba:	b2d2      	uxtb	r2, r2
 80009bc:	440b      	add	r3, r1
 80009be:	761a      	strb	r2, [r3, #24]
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	e000e100 	.word	0xe000e100
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b089      	sub	sp, #36	; 0x24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	f1c3 0307 	rsb	r3, r3, #7
 80009ee:	2b04      	cmp	r3, #4
 80009f0:	bf28      	it	cs
 80009f2:	2304      	movcs	r3, #4
 80009f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	3304      	adds	r3, #4
 80009fa:	2b06      	cmp	r3, #6
 80009fc:	d902      	bls.n	8000a04 <NVIC_EncodePriority+0x30>
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	3b03      	subs	r3, #3
 8000a02:	e000      	b.n	8000a06 <NVIC_EncodePriority+0x32>
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a08:	f04f 32ff 	mov.w	r2, #4294967295
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	43da      	mvns	r2, r3
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	401a      	ands	r2, r3
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	fa01 f303 	lsl.w	r3, r1, r3
 8000a26:	43d9      	mvns	r1, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a2c:	4313      	orrs	r3, r2
         );
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3724      	adds	r7, #36	; 0x24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
	...

08000a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a4c:	d301      	bcc.n	8000a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e00f      	b.n	8000a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a52:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <SysTick_Config+0x40>)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a5a:	210f      	movs	r1, #15
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	f7ff ff8e 	bl	8000980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <SysTick_Config+0x40>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a6a:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <SysTick_Config+0x40>)
 8000a6c:	2207      	movs	r2, #7
 8000a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	e000e010 	.word	0xe000e010

08000a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff ff29 	bl	80008e0 <__NVIC_SetPriorityGrouping>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b086      	sub	sp, #24
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
 8000aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aa8:	f7ff ff3e 	bl	8000928 <__NVIC_GetPriorityGrouping>
 8000aac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	68b9      	ldr	r1, [r7, #8]
 8000ab2:	6978      	ldr	r0, [r7, #20]
 8000ab4:	f7ff ff8e 	bl	80009d4 <NVIC_EncodePriority>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000abe:	4611      	mov	r1, r2
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ff5d 	bl	8000980 <__NVIC_SetPriority>
}
 8000ac6:	bf00      	nop
 8000ac8:	3718      	adds	r7, #24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ff31 	bl	8000944 <__NVIC_EnableIRQ>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f7ff ffa2 	bl	8000a3c <SysTick_Config>
 8000af8:	4603      	mov	r3, r0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b089      	sub	sp, #36	; 0x24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
 8000b22:	e175      	b.n	8000e10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000b24:	2201      	movs	r2, #1
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	697a      	ldr	r2, [r7, #20]
 8000b34:	4013      	ands	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	f040 8164 	bne.w	8000e0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f003 0303 	and.w	r3, r3, #3
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d005      	beq.n	8000b5a <HAL_GPIO_Init+0x56>
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f003 0303 	and.w	r3, r3, #3
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d130      	bne.n	8000bbc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	2203      	movs	r2, #3
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	69ba      	ldr	r2, [r7, #24]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	68da      	ldr	r2, [r3, #12]
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	69ba      	ldr	r2, [r7, #24]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	69ba      	ldr	r2, [r7, #24]
 8000b88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b90:	2201      	movs	r2, #1
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	69ba      	ldr	r2, [r7, #24]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	091b      	lsrs	r3, r3, #4
 8000ba6:	f003 0201 	and.w	r2, r3, #1
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f003 0303 	and.w	r3, r3, #3
 8000bc4:	2b03      	cmp	r3, #3
 8000bc6:	d017      	beq.n	8000bf8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	2203      	movs	r2, #3
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	69ba      	ldr	r2, [r7, #24]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	689a      	ldr	r2, [r3, #8]
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f003 0303 	and.w	r3, r3, #3
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d123      	bne.n	8000c4c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	08da      	lsrs	r2, r3, #3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3208      	adds	r2, #8
 8000c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	f003 0307 	and.w	r3, r3, #7
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	220f      	movs	r2, #15
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	4013      	ands	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	691a      	ldr	r2, [r3, #16]
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	08da      	lsrs	r2, r3, #3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	3208      	adds	r2, #8
 8000c46:	69b9      	ldr	r1, [r7, #24]
 8000c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	2203      	movs	r2, #3
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	4013      	ands	r3, r2
 8000c62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f003 0203 	and.w	r2, r3, #3
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	f000 80be 	beq.w	8000e0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8e:	4b66      	ldr	r3, [pc, #408]	; (8000e28 <HAL_GPIO_Init+0x324>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	4a65      	ldr	r2, [pc, #404]	; (8000e28 <HAL_GPIO_Init+0x324>)
 8000c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c98:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9a:	4b63      	ldr	r3, [pc, #396]	; (8000e28 <HAL_GPIO_Init+0x324>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ca6:	4a61      	ldr	r2, [pc, #388]	; (8000e2c <HAL_GPIO_Init+0x328>)
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	089b      	lsrs	r3, r3, #2
 8000cac:	3302      	adds	r3, #2
 8000cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	f003 0303 	and.w	r3, r3, #3
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	220f      	movs	r2, #15
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a58      	ldr	r2, [pc, #352]	; (8000e30 <HAL_GPIO_Init+0x32c>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d037      	beq.n	8000d42 <HAL_GPIO_Init+0x23e>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a57      	ldr	r2, [pc, #348]	; (8000e34 <HAL_GPIO_Init+0x330>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d031      	beq.n	8000d3e <HAL_GPIO_Init+0x23a>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a56      	ldr	r2, [pc, #344]	; (8000e38 <HAL_GPIO_Init+0x334>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d02b      	beq.n	8000d3a <HAL_GPIO_Init+0x236>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a55      	ldr	r2, [pc, #340]	; (8000e3c <HAL_GPIO_Init+0x338>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d025      	beq.n	8000d36 <HAL_GPIO_Init+0x232>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a54      	ldr	r2, [pc, #336]	; (8000e40 <HAL_GPIO_Init+0x33c>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d01f      	beq.n	8000d32 <HAL_GPIO_Init+0x22e>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a53      	ldr	r2, [pc, #332]	; (8000e44 <HAL_GPIO_Init+0x340>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d019      	beq.n	8000d2e <HAL_GPIO_Init+0x22a>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a52      	ldr	r2, [pc, #328]	; (8000e48 <HAL_GPIO_Init+0x344>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d013      	beq.n	8000d2a <HAL_GPIO_Init+0x226>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a51      	ldr	r2, [pc, #324]	; (8000e4c <HAL_GPIO_Init+0x348>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d00d      	beq.n	8000d26 <HAL_GPIO_Init+0x222>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a50      	ldr	r2, [pc, #320]	; (8000e50 <HAL_GPIO_Init+0x34c>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d007      	beq.n	8000d22 <HAL_GPIO_Init+0x21e>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a4f      	ldr	r2, [pc, #316]	; (8000e54 <HAL_GPIO_Init+0x350>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d101      	bne.n	8000d1e <HAL_GPIO_Init+0x21a>
 8000d1a:	2309      	movs	r3, #9
 8000d1c:	e012      	b.n	8000d44 <HAL_GPIO_Init+0x240>
 8000d1e:	230a      	movs	r3, #10
 8000d20:	e010      	b.n	8000d44 <HAL_GPIO_Init+0x240>
 8000d22:	2308      	movs	r3, #8
 8000d24:	e00e      	b.n	8000d44 <HAL_GPIO_Init+0x240>
 8000d26:	2307      	movs	r3, #7
 8000d28:	e00c      	b.n	8000d44 <HAL_GPIO_Init+0x240>
 8000d2a:	2306      	movs	r3, #6
 8000d2c:	e00a      	b.n	8000d44 <HAL_GPIO_Init+0x240>
 8000d2e:	2305      	movs	r3, #5
 8000d30:	e008      	b.n	8000d44 <HAL_GPIO_Init+0x240>
 8000d32:	2304      	movs	r3, #4
 8000d34:	e006      	b.n	8000d44 <HAL_GPIO_Init+0x240>
 8000d36:	2303      	movs	r3, #3
 8000d38:	e004      	b.n	8000d44 <HAL_GPIO_Init+0x240>
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	e002      	b.n	8000d44 <HAL_GPIO_Init+0x240>
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e000      	b.n	8000d44 <HAL_GPIO_Init+0x240>
 8000d42:	2300      	movs	r3, #0
 8000d44:	69fa      	ldr	r2, [r7, #28]
 8000d46:	f002 0203 	and.w	r2, r2, #3
 8000d4a:	0092      	lsls	r2, r2, #2
 8000d4c:	4093      	lsls	r3, r2
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d54:	4935      	ldr	r1, [pc, #212]	; (8000e2c <HAL_GPIO_Init+0x328>)
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	089b      	lsrs	r3, r3, #2
 8000d5a:	3302      	adds	r3, #2
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d62:	4b3d      	ldr	r3, [pc, #244]	; (8000e58 <HAL_GPIO_Init+0x354>)
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d003      	beq.n	8000d86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d86:	4a34      	ldr	r2, [pc, #208]	; (8000e58 <HAL_GPIO_Init+0x354>)
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d8c:	4b32      	ldr	r3, [pc, #200]	; (8000e58 <HAL_GPIO_Init+0x354>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	43db      	mvns	r3, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d003      	beq.n	8000db0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000db0:	4a29      	ldr	r2, [pc, #164]	; (8000e58 <HAL_GPIO_Init+0x354>)
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000db6:	4b28      	ldr	r3, [pc, #160]	; (8000e58 <HAL_GPIO_Init+0x354>)
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d003      	beq.n	8000dda <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dda:	4a1f      	ldr	r2, [pc, #124]	; (8000e58 <HAL_GPIO_Init+0x354>)
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000de0:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <HAL_GPIO_Init+0x354>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	43db      	mvns	r3, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d003      	beq.n	8000e04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e04:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <HAL_GPIO_Init+0x354>)
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	61fb      	str	r3, [r7, #28]
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	2b0f      	cmp	r3, #15
 8000e14:	f67f ae86 	bls.w	8000b24 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	3724      	adds	r7, #36	; 0x24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40013800 	.word	0x40013800
 8000e30:	40020000 	.word	0x40020000
 8000e34:	40020400 	.word	0x40020400
 8000e38:	40020800 	.word	0x40020800
 8000e3c:	40020c00 	.word	0x40020c00
 8000e40:	40021000 	.word	0x40021000
 8000e44:	40021400 	.word	0x40021400
 8000e48:	40021800 	.word	0x40021800
 8000e4c:	40021c00 	.word	0x40021c00
 8000e50:	40022000 	.word	0x40022000
 8000e54:	40022400 	.word	0x40022400
 8000e58:	40013c00 	.word	0x40013c00

08000e5c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e5e:	b08f      	sub	sp, #60	; 0x3c
 8000e60:	af0a      	add	r7, sp, #40	; 0x28
 8000e62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d101      	bne.n	8000e6e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e116      	b.n	800109c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d106      	bne.n	8000e8e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f006 f96b 	bl	8007164 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2203      	movs	r2, #3
 8000e92:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d102      	bne.n	8000ea8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f002 fc7a 	bl	80037a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	687e      	ldr	r6, [r7, #4]
 8000eba:	466d      	mov	r5, sp
 8000ebc:	f106 0410 	add.w	r4, r6, #16
 8000ec0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ec2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ec4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ec6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ec8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ecc:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ed0:	1d33      	adds	r3, r6, #4
 8000ed2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ed4:	6838      	ldr	r0, [r7, #0]
 8000ed6:	f002 fb5b 	bl	8003590 <USB_CoreInit>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d005      	beq.n	8000eec <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e0d7      	b.n	800109c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f002 fc68 	bl	80037c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ef8:	2300      	movs	r3, #0
 8000efa:	73fb      	strb	r3, [r7, #15]
 8000efc:	e04a      	b.n	8000f94 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000efe:	7bfa      	ldrb	r2, [r7, #15]
 8000f00:	6879      	ldr	r1, [r7, #4]
 8000f02:	4613      	mov	r3, r2
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	4413      	add	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	333d      	adds	r3, #61	; 0x3d
 8000f0e:	2201      	movs	r2, #1
 8000f10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f12:	7bfa      	ldrb	r2, [r7, #15]
 8000f14:	6879      	ldr	r1, [r7, #4]
 8000f16:	4613      	mov	r3, r2
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	4413      	add	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	440b      	add	r3, r1
 8000f20:	333c      	adds	r3, #60	; 0x3c
 8000f22:	7bfa      	ldrb	r2, [r7, #15]
 8000f24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f26:	7bfa      	ldrb	r2, [r7, #15]
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	b298      	uxth	r0, r3
 8000f2c:	6879      	ldr	r1, [r7, #4]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	4413      	add	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	440b      	add	r3, r1
 8000f38:	3344      	adds	r3, #68	; 0x44
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f3e:	7bfa      	ldrb	r2, [r7, #15]
 8000f40:	6879      	ldr	r1, [r7, #4]
 8000f42:	4613      	mov	r3, r2
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	4413      	add	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	3340      	adds	r3, #64	; 0x40
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f52:	7bfa      	ldrb	r2, [r7, #15]
 8000f54:	6879      	ldr	r1, [r7, #4]
 8000f56:	4613      	mov	r3, r2
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	4413      	add	r3, r2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	440b      	add	r3, r1
 8000f60:	3348      	adds	r3, #72	; 0x48
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f66:	7bfa      	ldrb	r2, [r7, #15]
 8000f68:	6879      	ldr	r1, [r7, #4]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	4413      	add	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	440b      	add	r3, r1
 8000f74:	334c      	adds	r3, #76	; 0x4c
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f7a:	7bfa      	ldrb	r2, [r7, #15]
 8000f7c:	6879      	ldr	r1, [r7, #4]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	4413      	add	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	440b      	add	r3, r1
 8000f88:	3354      	adds	r3, #84	; 0x54
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	3301      	adds	r3, #1
 8000f92:	73fb      	strb	r3, [r7, #15]
 8000f94:	7bfa      	ldrb	r2, [r7, #15]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d3af      	bcc.n	8000efe <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	73fb      	strb	r3, [r7, #15]
 8000fa2:	e044      	b.n	800102e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fa4:	7bfa      	ldrb	r2, [r7, #15]
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	4413      	add	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000fba:	7bfa      	ldrb	r2, [r7, #15]
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	4413      	add	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000fcc:	7bfa      	ldrb	r2, [r7, #15]
 8000fce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fd0:	7bfa      	ldrb	r2, [r7, #15]
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	4413      	add	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	440b      	add	r3, r1
 8000fde:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000fe6:	7bfa      	ldrb	r2, [r7, #15]
 8000fe8:	6879      	ldr	r1, [r7, #4]
 8000fea:	4613      	mov	r3, r2
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	4413      	add	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ffc:	7bfa      	ldrb	r2, [r7, #15]
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	4613      	mov	r3, r2
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	4413      	add	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	440b      	add	r3, r1
 800100a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001012:	7bfa      	ldrb	r2, [r7, #15]
 8001014:	6879      	ldr	r1, [r7, #4]
 8001016:	4613      	mov	r3, r2
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	4413      	add	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	440b      	add	r3, r1
 8001020:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	3301      	adds	r3, #1
 800102c:	73fb      	strb	r3, [r7, #15]
 800102e:	7bfa      	ldrb	r2, [r7, #15]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	429a      	cmp	r2, r3
 8001036:	d3b5      	bcc.n	8000fa4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	687e      	ldr	r6, [r7, #4]
 8001040:	466d      	mov	r5, sp
 8001042:	f106 0410 	add.w	r4, r6, #16
 8001046:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001048:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800104a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800104c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800104e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001052:	e885 0003 	stmia.w	r5, {r0, r1}
 8001056:	1d33      	adds	r3, r6, #4
 8001058:	cb0e      	ldmia	r3, {r1, r2, r3}
 800105a:	6838      	ldr	r0, [r7, #0]
 800105c:	f002 fc00 	bl	8003860 <USB_DevInit>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d005      	beq.n	8001072 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2202      	movs	r2, #2
 800106a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e014      	b.n	800109c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2201      	movs	r2, #1
 800107e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001086:	2b01      	cmp	r3, #1
 8001088:	d102      	bne.n	8001090 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f001 f97a 	bl	8002384 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f003 fd4e 	bl	8004b36 <USB_DevDisconnect>

  return HAL_OK;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010a4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d101      	bne.n	80010ba <HAL_PCD_Start+0x16>
 80010b6:	2302      	movs	r3, #2
 80010b8:	e012      	b.n	80010e0 <HAL_PCD_Start+0x3c>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2201      	movs	r2, #1
 80010be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f002 fb5c 	bl	8003784 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f003 fd0f 	bl	8004af4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b08d      	sub	sp, #52	; 0x34
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80010f6:	6a3b      	ldr	r3, [r7, #32]
 80010f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f003 fdcd 	bl	8004c9e <USB_GetMode>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	f040 84b7 	bne.w	8001a7a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f003 fd31 	bl	8004b78 <USB_ReadInterrupts>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 84ad 	beq.w	8001a78 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	0a1b      	lsrs	r3, r3, #8
 8001128:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f003 fd1e 	bl	8004b78 <USB_ReadInterrupts>
 800113c:	4603      	mov	r3, r0
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b02      	cmp	r3, #2
 8001144:	d107      	bne.n	8001156 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	695a      	ldr	r2, [r3, #20]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f002 0202 	and.w	r2, r2, #2
 8001154:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f003 fd0c 	bl	8004b78 <USB_ReadInterrupts>
 8001160:	4603      	mov	r3, r0
 8001162:	f003 0310 	and.w	r3, r3, #16
 8001166:	2b10      	cmp	r3, #16
 8001168:	d161      	bne.n	800122e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	699a      	ldr	r2, [r3, #24]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f022 0210 	bic.w	r2, r2, #16
 8001178:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800117a:	6a3b      	ldr	r3, [r7, #32]
 800117c:	6a1b      	ldr	r3, [r3, #32]
 800117e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	f003 020f 	and.w	r2, r3, #15
 8001186:	4613      	mov	r3, r2
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	4413      	add	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	3304      	adds	r3, #4
 8001198:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	0c5b      	lsrs	r3, r3, #17
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d124      	bne.n	80011f0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80011ac:	4013      	ands	r3, r2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d035      	beq.n	800121e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	091b      	lsrs	r3, r3, #4
 80011ba:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	461a      	mov	r2, r3
 80011c4:	6a38      	ldr	r0, [r7, #32]
 80011c6:	f003 fb43 	bl	8004850 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	691a      	ldr	r2, [r3, #16]
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	091b      	lsrs	r3, r3, #4
 80011d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011d6:	441a      	add	r2, r3
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	6a1a      	ldr	r2, [r3, #32]
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	091b      	lsrs	r3, r3, #4
 80011e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011e8:	441a      	add	r2, r3
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	621a      	str	r2, [r3, #32]
 80011ee:	e016      	b.n	800121e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	0c5b      	lsrs	r3, r3, #17
 80011f4:	f003 030f 	and.w	r3, r3, #15
 80011f8:	2b06      	cmp	r3, #6
 80011fa:	d110      	bne.n	800121e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001202:	2208      	movs	r2, #8
 8001204:	4619      	mov	r1, r3
 8001206:	6a38      	ldr	r0, [r7, #32]
 8001208:	f003 fb22 	bl	8004850 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	6a1a      	ldr	r2, [r3, #32]
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	091b      	lsrs	r3, r3, #4
 8001214:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001218:	441a      	add	r2, r3
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	699a      	ldr	r2, [r3, #24]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f042 0210 	orr.w	r2, r2, #16
 800122c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f003 fca0 	bl	8004b78 <USB_ReadInterrupts>
 8001238:	4603      	mov	r3, r0
 800123a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800123e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001242:	f040 80a7 	bne.w	8001394 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f003 fca5 	bl	8004b9e <USB_ReadDevAllOutEpInterrupt>
 8001254:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001256:	e099      	b.n	800138c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 808e 	beq.w	8001380 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	4611      	mov	r1, r2
 800126e:	4618      	mov	r0, r3
 8001270:	f003 fcc9 	bl	8004c06 <USB_ReadDevOutEPInterrupt>
 8001274:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00c      	beq.n	800129a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	015a      	lsls	r2, r3, #5
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	4413      	add	r3, r2
 8001288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800128c:	461a      	mov	r2, r3
 800128e:	2301      	movs	r3, #1
 8001290:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001292:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f000 feef 	bl	8002078 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	f003 0308 	and.w	r3, r3, #8
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d00c      	beq.n	80012be <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	015a      	lsls	r2, r3, #5
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	4413      	add	r3, r2
 80012ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012b0:	461a      	mov	r2, r3
 80012b2:	2308      	movs	r3, #8
 80012b4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80012b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 ffc5 	bl	8002248 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	f003 0310 	and.w	r3, r3, #16
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d008      	beq.n	80012da <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80012c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ca:	015a      	lsls	r2, r3, #5
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	4413      	add	r3, r2
 80012d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012d4:	461a      	mov	r2, r3
 80012d6:	2310      	movs	r3, #16
 80012d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d030      	beq.n	8001346 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80012e4:	6a3b      	ldr	r3, [r7, #32]
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ec:	2b80      	cmp	r3, #128	; 0x80
 80012ee:	d109      	bne.n	8001304 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	69fa      	ldr	r2, [r7, #28]
 80012fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80012fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001302:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001306:	4613      	mov	r3, r2
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	4413      	add	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	3304      	adds	r3, #4
 8001318:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	78db      	ldrb	r3, [r3, #3]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d108      	bne.n	8001334 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	2200      	movs	r2, #0
 8001326:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132a:	b2db      	uxtb	r3, r3
 800132c:	4619      	mov	r1, r3
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f006 f83c 	bl	80073ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	015a      	lsls	r2, r3, #5
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	4413      	add	r3, r2
 800133c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001340:	461a      	mov	r2, r3
 8001342:	2302      	movs	r3, #2
 8001344:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	f003 0320 	and.w	r3, r3, #32
 800134c:	2b00      	cmp	r3, #0
 800134e:	d008      	beq.n	8001362 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001352:	015a      	lsls	r2, r3, #5
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	4413      	add	r3, r2
 8001358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800135c:	461a      	mov	r2, r3
 800135e:	2320      	movs	r3, #32
 8001360:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d009      	beq.n	8001380 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	015a      	lsls	r2, r3, #5
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	4413      	add	r3, r2
 8001374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001378:	461a      	mov	r2, r3
 800137a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800137e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001382:	3301      	adds	r3, #1
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001388:	085b      	lsrs	r3, r3, #1
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800138c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800138e:	2b00      	cmp	r3, #0
 8001390:	f47f af62 	bne.w	8001258 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f003 fbed 	bl	8004b78 <USB_ReadInterrupts>
 800139e:	4603      	mov	r3, r0
 80013a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80013a8:	f040 80db 	bne.w	8001562 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f003 fc0e 	bl	8004bd2 <USB_ReadDevAllInEpInterrupt>
 80013b6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80013bc:	e0cd      	b.n	800155a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80013be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 80c2 	beq.w	800154e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f003 fc34 	bl	8004c42 <USB_ReadDevInEPInterrupt>
 80013da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d057      	beq.n	8001496 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	f003 030f 	and.w	r3, r3, #15
 80013ec:	2201      	movs	r2, #1
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	43db      	mvns	r3, r3
 8001400:	69f9      	ldr	r1, [r7, #28]
 8001402:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001406:	4013      	ands	r3, r2
 8001408:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	015a      	lsls	r2, r3, #5
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	4413      	add	r3, r2
 8001412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001416:	461a      	mov	r2, r3
 8001418:	2301      	movs	r3, #1
 800141a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d132      	bne.n	800148a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001428:	4613      	mov	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	4413      	add	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	440b      	add	r3, r1
 8001432:	334c      	adds	r3, #76	; 0x4c
 8001434:	6819      	ldr	r1, [r3, #0]
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800143a:	4613      	mov	r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	4413      	add	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4403      	add	r3, r0
 8001444:	3348      	adds	r3, #72	; 0x48
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4419      	add	r1, r3
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800144e:	4613      	mov	r3, r2
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	4413      	add	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4403      	add	r3, r0
 8001458:	334c      	adds	r3, #76	; 0x4c
 800145a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145e:	2b00      	cmp	r3, #0
 8001460:	d113      	bne.n	800148a <HAL_PCD_IRQHandler+0x3a2>
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001466:	4613      	mov	r3, r2
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	4413      	add	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	440b      	add	r3, r1
 8001470:	3354      	adds	r3, #84	; 0x54
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d108      	bne.n	800148a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6818      	ldr	r0, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001482:	461a      	mov	r2, r3
 8001484:	2101      	movs	r1, #1
 8001486:	f003 fc3d 	bl	8004d04 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	b2db      	uxtb	r3, r3
 800148e:	4619      	mov	r1, r3
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f005 ff06 	bl	80072a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	2b00      	cmp	r3, #0
 800149e:	d008      	beq.n	80014b2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	015a      	lsls	r2, r3, #5
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	4413      	add	r3, r2
 80014a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014ac:	461a      	mov	r2, r3
 80014ae:	2308      	movs	r3, #8
 80014b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	f003 0310 	and.w	r3, r3, #16
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d008      	beq.n	80014ce <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	015a      	lsls	r2, r3, #5
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	4413      	add	r3, r2
 80014c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014c8:	461a      	mov	r2, r3
 80014ca:	2310      	movs	r3, #16
 80014cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d008      	beq.n	80014ea <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	015a      	lsls	r2, r3, #5
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	4413      	add	r3, r2
 80014e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014e4:	461a      	mov	r2, r3
 80014e6:	2340      	movs	r3, #64	; 0x40
 80014e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d023      	beq.n	800153c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80014f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014f6:	6a38      	ldr	r0, [r7, #32]
 80014f8:	f002 fb10 	bl	8003b1c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80014fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014fe:	4613      	mov	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	4413      	add	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	3338      	adds	r3, #56	; 0x38
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	4413      	add	r3, r2
 800150c:	3304      	adds	r3, #4
 800150e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	78db      	ldrb	r3, [r3, #3]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d108      	bne.n	800152a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	2200      	movs	r2, #0
 800151c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	b2db      	uxtb	r3, r3
 8001522:	4619      	mov	r1, r3
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f005 ff53 	bl	80073d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	015a      	lsls	r2, r3, #5
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	4413      	add	r3, r2
 8001532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001536:	461a      	mov	r2, r3
 8001538:	2302      	movs	r3, #2
 800153a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001546:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 fd08 	bl	8001f5e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	3301      	adds	r3, #1
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001556:	085b      	lsrs	r3, r3, #1
 8001558:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800155a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155c:	2b00      	cmp	r3, #0
 800155e:	f47f af2e 	bne.w	80013be <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f003 fb06 	bl	8004b78 <USB_ReadInterrupts>
 800156c:	4603      	mov	r3, r0
 800156e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001572:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001576:	d122      	bne.n	80015be <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	69fa      	ldr	r2, [r7, #28]
 8001582:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001586:	f023 0301 	bic.w	r3, r3, #1
 800158a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001592:	2b01      	cmp	r3, #1
 8001594:	d108      	bne.n	80015a8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800159e:	2100      	movs	r1, #0
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f006 f8cd 	bl	8007740 <HAL_PCDEx_LPM_Callback>
 80015a6:	e002      	b.n	80015ae <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f005 fef1 	bl	8007390 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	695a      	ldr	r2, [r3, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80015bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f003 fad8 	bl	8004b78 <USB_ReadInterrupts>
 80015c8:	4603      	mov	r3, r0
 80015ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015d2:	d112      	bne.n	80015fa <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d102      	bne.n	80015ea <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f005 fead 	bl	8007344 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	695a      	ldr	r2, [r3, #20]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80015f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f003 faba 	bl	8004b78 <USB_ReadInterrupts>
 8001604:	4603      	mov	r3, r0
 8001606:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800160a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800160e:	d121      	bne.n	8001654 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	695a      	ldr	r2, [r3, #20]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800161e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001626:	2b00      	cmp	r3, #0
 8001628:	d111      	bne.n	800164e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001638:	089b      	lsrs	r3, r3, #2
 800163a:	f003 020f 	and.w	r2, r3, #15
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001644:	2101      	movs	r1, #1
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f006 f87a 	bl	8007740 <HAL_PCDEx_LPM_Callback>
 800164c:	e002      	b.n	8001654 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f005 fe78 	bl	8007344 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f003 fa8d 	bl	8004b78 <USB_ReadInterrupts>
 800165e:	4603      	mov	r3, r0
 8001660:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001668:	f040 80b7 	bne.w	80017da <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	69fa      	ldr	r2, [r7, #28]
 8001676:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800167a:	f023 0301 	bic.w	r3, r3, #1
 800167e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2110      	movs	r1, #16
 8001686:	4618      	mov	r0, r3
 8001688:	f002 fa48 	bl	8003b1c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800168c:	2300      	movs	r3, #0
 800168e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001690:	e046      	b.n	8001720 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001694:	015a      	lsls	r2, r3, #5
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	4413      	add	r3, r2
 800169a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800169e:	461a      	mov	r2, r3
 80016a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016a4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80016a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a8:	015a      	lsls	r2, r3, #5
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	4413      	add	r3, r2
 80016ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016b6:	0151      	lsls	r1, r2, #5
 80016b8:	69fa      	ldr	r2, [r7, #28]
 80016ba:	440a      	add	r2, r1
 80016bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80016c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80016c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c8:	015a      	lsls	r2, r3, #5
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	4413      	add	r3, r2
 80016ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016d2:	461a      	mov	r2, r3
 80016d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016d8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80016da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016dc:	015a      	lsls	r2, r3, #5
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	4413      	add	r3, r2
 80016e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016ea:	0151      	lsls	r1, r2, #5
 80016ec:	69fa      	ldr	r2, [r7, #28]
 80016ee:	440a      	add	r2, r1
 80016f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80016f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80016fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fc:	015a      	lsls	r2, r3, #5
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	4413      	add	r3, r2
 8001702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800170a:	0151      	lsls	r1, r2, #5
 800170c:	69fa      	ldr	r2, [r7, #28]
 800170e:	440a      	add	r2, r1
 8001710:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001714:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001718:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800171a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171c:	3301      	adds	r3, #1
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001726:	429a      	cmp	r2, r3
 8001728:	d3b3      	bcc.n	8001692 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	69fa      	ldr	r2, [r7, #28]
 8001734:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001738:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800173c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	2b00      	cmp	r3, #0
 8001744:	d016      	beq.n	8001774 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800174c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001750:	69fa      	ldr	r2, [r7, #28]
 8001752:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001756:	f043 030b 	orr.w	r3, r3, #11
 800175a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	69fa      	ldr	r2, [r7, #28]
 8001768:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800176c:	f043 030b 	orr.w	r3, r3, #11
 8001770:	6453      	str	r3, [r2, #68]	; 0x44
 8001772:	e015      	b.n	80017a0 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800177a:	695a      	ldr	r2, [r3, #20]
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001782:	4619      	mov	r1, r3
 8001784:	f242 032b 	movw	r3, #8235	; 0x202b
 8001788:	4313      	orrs	r3, r2
 800178a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	69fa      	ldr	r2, [r7, #28]
 8001796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800179a:	f043 030b 	orr.w	r3, r3, #11
 800179e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	69fa      	ldr	r2, [r7, #28]
 80017aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80017b2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6818      	ldr	r0, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017c4:	461a      	mov	r2, r3
 80017c6:	f003 fa9d 	bl	8004d04 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	695a      	ldr	r2, [r3, #20]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80017d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f003 f9ca 	bl	8004b78 <USB_ReadInterrupts>
 80017e4:	4603      	mov	r3, r0
 80017e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017ee:	d124      	bne.n	800183a <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f003 fa61 	bl	8004cbc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f002 fa09 	bl	8003c16 <USB_GetDevSpeed>
 8001804:	4603      	mov	r3, r0
 8001806:	461a      	mov	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681c      	ldr	r4, [r3, #0]
 8001810:	f001 fac2 	bl	8002d98 <HAL_RCC_GetHCLKFreq>
 8001814:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800181a:	b2db      	uxtb	r3, r3
 800181c:	461a      	mov	r2, r3
 800181e:	4620      	mov	r0, r4
 8001820:	f001 ff0e 	bl	8003640 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f005 fd64 	bl	80072f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	695a      	ldr	r2, [r3, #20]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001838:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f003 f99a 	bl	8004b78 <USB_ReadInterrupts>
 8001844:	4603      	mov	r3, r0
 8001846:	f003 0308 	and.w	r3, r3, #8
 800184a:	2b08      	cmp	r3, #8
 800184c:	d10a      	bne.n	8001864 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f005 fd41 	bl	80072d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	695a      	ldr	r2, [r3, #20]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f002 0208 	and.w	r2, r2, #8
 8001862:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f003 f985 	bl	8004b78 <USB_ReadInterrupts>
 800186e:	4603      	mov	r3, r0
 8001870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001874:	2b80      	cmp	r3, #128	; 0x80
 8001876:	d122      	bne.n	80018be <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001878:	6a3b      	ldr	r3, [r7, #32]
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001884:	2301      	movs	r3, #1
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
 8001888:	e014      	b.n	80018b4 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800188e:	4613      	mov	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	4413      	add	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	440b      	add	r3, r1
 8001898:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d105      	bne.n	80018ae <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	4619      	mov	r1, r3
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 fb27 	bl	8001efc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	3301      	adds	r3, #1
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d3e5      	bcc.n	800188a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f003 f958 	bl	8004b78 <USB_ReadInterrupts>
 80018c8:	4603      	mov	r3, r0
 80018ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018d2:	d13b      	bne.n	800194c <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018d4:	2301      	movs	r3, #1
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
 80018d8:	e02b      	b.n	8001932 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	015a      	lsls	r2, r3, #5
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	4413      	add	r3, r2
 80018e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ee:	4613      	mov	r3, r2
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	4413      	add	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	440b      	add	r3, r1
 80018f8:	3340      	adds	r3, #64	; 0x40
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d115      	bne.n	800192c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001900:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001902:	2b00      	cmp	r3, #0
 8001904:	da12      	bge.n	800192c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800190a:	4613      	mov	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	4413      	add	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	440b      	add	r3, r1
 8001914:	333f      	adds	r3, #63	; 0x3f
 8001916:	2201      	movs	r2, #1
 8001918:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	b2db      	uxtb	r3, r3
 800191e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001922:	b2db      	uxtb	r3, r3
 8001924:	4619      	mov	r1, r3
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 fae8 	bl	8001efc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	3301      	adds	r3, #1
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001938:	429a      	cmp	r2, r3
 800193a:	d3ce      	bcc.n	80018da <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	695a      	ldr	r2, [r3, #20]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800194a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f003 f911 	bl	8004b78 <USB_ReadInterrupts>
 8001956:	4603      	mov	r3, r0
 8001958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800195c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001960:	d155      	bne.n	8001a0e <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001962:	2301      	movs	r3, #1
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
 8001966:	e045      	b.n	80019f4 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	015a      	lsls	r2, r3, #5
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	4413      	add	r3, r2
 8001970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800197c:	4613      	mov	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	4413      	add	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d12e      	bne.n	80019ee <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001990:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001992:	2b00      	cmp	r3, #0
 8001994:	da2b      	bge.n	80019ee <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80019a2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d121      	bne.n	80019ee <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ae:	4613      	mov	r3, r2
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	4413      	add	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	440b      	add	r3, r1
 80019b8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80019bc:	2201      	movs	r2, #1
 80019be:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80019c0:	6a3b      	ldr	r3, [r7, #32]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80019c8:	6a3b      	ldr	r3, [r7, #32]
 80019ca:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80019cc:	6a3b      	ldr	r3, [r7, #32]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d10a      	bne.n	80019ee <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	69fa      	ldr	r2, [r7, #28]
 80019e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019ea:	6053      	str	r3, [r2, #4]
            break;
 80019ec:	e007      	b.n	80019fe <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	3301      	adds	r3, #1
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d3b4      	bcc.n	8001968 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	695a      	ldr	r2, [r3, #20]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001a0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f003 f8b0 	bl	8004b78 <USB_ReadInterrupts>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a22:	d10a      	bne.n	8001a3a <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f005 fce5 	bl	80073f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	695a      	ldr	r2, [r3, #20]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001a38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f003 f89a 	bl	8004b78 <USB_ReadInterrupts>
 8001a44:	4603      	mov	r3, r0
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	d115      	bne.n	8001a7a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d002      	beq.n	8001a66 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f005 fcd5 	bl	8007410 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6859      	ldr	r1, [r3, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	e000      	b.n	8001a7a <HAL_PCD_IRQHandler+0x992>
      return;
 8001a78:	bf00      	nop
    }
  }
}
 8001a7a:	3734      	adds	r7, #52	; 0x34
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd90      	pop	{r4, r7, pc}

08001a80 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d101      	bne.n	8001a9a <HAL_PCD_SetAddress+0x1a>
 8001a96:	2302      	movs	r3, #2
 8001a98:	e013      	b.n	8001ac2 <HAL_PCD_SetAddress+0x42>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	78fa      	ldrb	r2, [r7, #3]
 8001aa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	78fa      	ldrb	r2, [r7, #3]
 8001ab0:	4611      	mov	r1, r2
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f002 fff8 	bl	8004aa8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b084      	sub	sp, #16
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
 8001ad2:	4608      	mov	r0, r1
 8001ad4:	4611      	mov	r1, r2
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4603      	mov	r3, r0
 8001ada:	70fb      	strb	r3, [r7, #3]
 8001adc:	460b      	mov	r3, r1
 8001ade:	803b      	strh	r3, [r7, #0]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ae8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	da0f      	bge.n	8001b10 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001af0:	78fb      	ldrb	r3, [r7, #3]
 8001af2:	f003 020f 	and.w	r2, r3, #15
 8001af6:	4613      	mov	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	4413      	add	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	3338      	adds	r3, #56	; 0x38
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	4413      	add	r3, r2
 8001b04:	3304      	adds	r3, #4
 8001b06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	705a      	strb	r2, [r3, #1]
 8001b0e:	e00f      	b.n	8001b30 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	f003 020f 	and.w	r2, r3, #15
 8001b16:	4613      	mov	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	3304      	adds	r3, #4
 8001b28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b30:	78fb      	ldrb	r3, [r7, #3]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b3c:	883a      	ldrh	r2, [r7, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	78ba      	ldrb	r2, [r7, #2]
 8001b46:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	785b      	ldrb	r3, [r3, #1]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d004      	beq.n	8001b5a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b5a:	78bb      	ldrb	r3, [r7, #2]
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d102      	bne.n	8001b66 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d101      	bne.n	8001b74 <HAL_PCD_EP_Open+0xaa>
 8001b70:	2302      	movs	r3, #2
 8001b72:	e00e      	b.n	8001b92 <HAL_PCD_EP_Open+0xc8>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68f9      	ldr	r1, [r7, #12]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f002 f86c 	bl	8003c60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001b90:	7afb      	ldrb	r3, [r7, #11]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b084      	sub	sp, #16
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ba6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	da0f      	bge.n	8001bce <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	f003 020f 	and.w	r2, r3, #15
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	4413      	add	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	3338      	adds	r3, #56	; 0x38
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	705a      	strb	r2, [r3, #1]
 8001bcc:	e00f      	b.n	8001bee <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bce:	78fb      	ldrb	r3, [r7, #3]
 8001bd0:	f003 020f 	and.w	r2, r3, #15
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	4413      	add	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	4413      	add	r3, r2
 8001be4:	3304      	adds	r3, #4
 8001be6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001bee:	78fb      	ldrb	r3, [r7, #3]
 8001bf0:	f003 030f 	and.w	r3, r3, #15
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <HAL_PCD_EP_Close+0x6e>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e00e      	b.n	8001c26 <HAL_PCD_EP_Close+0x8c>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68f9      	ldr	r1, [r7, #12]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f002 f8aa 	bl	8003d70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b086      	sub	sp, #24
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	60f8      	str	r0, [r7, #12]
 8001c36:	607a      	str	r2, [r7, #4]
 8001c38:	603b      	str	r3, [r7, #0]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c3e:	7afb      	ldrb	r3, [r7, #11]
 8001c40:	f003 020f 	and.w	r2, r3, #15
 8001c44:	4613      	mov	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	4413      	add	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	4413      	add	r3, r2
 8001c54:	3304      	adds	r3, #4
 8001c56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	2200      	movs	r2, #0
 8001c68:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c70:	7afb      	ldrb	r3, [r7, #11]
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d102      	bne.n	8001c8a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c8a:	7afb      	ldrb	r3, [r7, #11]
 8001c8c:	f003 030f 	and.w	r3, r3, #15
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d109      	bne.n	8001ca8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6818      	ldr	r0, [r3, #0]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	6979      	ldr	r1, [r7, #20]
 8001ca2:	f002 fb91 	bl	80043c8 <USB_EP0StartXfer>
 8001ca6:	e008      	b.n	8001cba <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6818      	ldr	r0, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	6979      	ldr	r1, [r7, #20]
 8001cb6:	f002 f937 	bl	8003f28 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001cd0:	78fb      	ldrb	r3, [r7, #3]
 8001cd2:	f003 020f 	and.w	r2, r3, #15
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4413      	add	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	607a      	str	r2, [r7, #4]
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	460b      	mov	r3, r1
 8001d02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d04:	7afb      	ldrb	r3, [r7, #11]
 8001d06:	f003 020f 	and.w	r2, r3, #15
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	4413      	add	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	3338      	adds	r3, #56	; 0x38
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	4413      	add	r3, r2
 8001d18:	3304      	adds	r3, #4
 8001d1a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	2201      	movs	r2, #1
 8001d32:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d34:	7afb      	ldrb	r3, [r7, #11]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d102      	bne.n	8001d4e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d4e:	7afb      	ldrb	r3, [r7, #11]
 8001d50:	f003 030f 	and.w	r3, r3, #15
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d109      	bne.n	8001d6c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6818      	ldr	r0, [r3, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	461a      	mov	r2, r3
 8001d64:	6979      	ldr	r1, [r7, #20]
 8001d66:	f002 fb2f 	bl	80043c8 <USB_EP0StartXfer>
 8001d6a:	e008      	b.n	8001d7e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6818      	ldr	r0, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	461a      	mov	r2, r3
 8001d78:	6979      	ldr	r1, [r7, #20]
 8001d7a:	f002 f8d5 	bl	8003f28 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	f003 020f 	and.w	r2, r3, #15
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d901      	bls.n	8001da6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e050      	b.n	8001e48 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001da6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	da0f      	bge.n	8001dce <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dae:	78fb      	ldrb	r3, [r7, #3]
 8001db0:	f003 020f 	and.w	r2, r3, #15
 8001db4:	4613      	mov	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	4413      	add	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	3338      	adds	r3, #56	; 0x38
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	705a      	strb	r2, [r3, #1]
 8001dcc:	e00d      	b.n	8001dea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001dce:	78fa      	ldrb	r2, [r7, #3]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	4413      	add	r3, r2
 8001de0:	3304      	adds	r3, #4
 8001de2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2201      	movs	r2, #1
 8001dee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001df0:	78fb      	ldrb	r3, [r7, #3]
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d101      	bne.n	8001e0a <HAL_PCD_EP_SetStall+0x82>
 8001e06:	2302      	movs	r3, #2
 8001e08:	e01e      	b.n	8001e48 <HAL_PCD_EP_SetStall+0xc0>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68f9      	ldr	r1, [r7, #12]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f002 fd71 	bl	8004900 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e1e:	78fb      	ldrb	r3, [r7, #3]
 8001e20:	f003 030f 	and.w	r3, r3, #15
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10a      	bne.n	8001e3e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	b2d9      	uxtb	r1, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e38:	461a      	mov	r2, r3
 8001e3a:	f002 ff63 	bl	8004d04 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e5c:	78fb      	ldrb	r3, [r7, #3]
 8001e5e:	f003 020f 	and.w	r2, r3, #15
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d901      	bls.n	8001e6e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e042      	b.n	8001ef4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	da0f      	bge.n	8001e96 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e76:	78fb      	ldrb	r3, [r7, #3]
 8001e78:	f003 020f 	and.w	r2, r3, #15
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4413      	add	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	3338      	adds	r3, #56	; 0x38
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2201      	movs	r2, #1
 8001e92:	705a      	strb	r2, [r3, #1]
 8001e94:	e00f      	b.n	8001eb6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e96:	78fb      	ldrb	r3, [r7, #3]
 8001e98:	f003 020f 	and.w	r2, r3, #15
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	4413      	add	r3, r2
 8001eac:	3304      	adds	r3, #4
 8001eae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d101      	bne.n	8001ed6 <HAL_PCD_EP_ClrStall+0x86>
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	e00e      	b.n	8001ef4 <HAL_PCD_EP_ClrStall+0xa4>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68f9      	ldr	r1, [r7, #12]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f002 fd79 	bl	80049dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001f08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	da0c      	bge.n	8001f2a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	f003 020f 	and.w	r2, r3, #15
 8001f16:	4613      	mov	r3, r2
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	3338      	adds	r3, #56	; 0x38
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	4413      	add	r3, r2
 8001f24:	3304      	adds	r3, #4
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	e00c      	b.n	8001f44 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f2a:	78fb      	ldrb	r3, [r7, #3]
 8001f2c:	f003 020f 	and.w	r2, r3, #15
 8001f30:	4613      	mov	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4413      	add	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	4413      	add	r3, r2
 8001f40:	3304      	adds	r3, #4
 8001f42:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68f9      	ldr	r1, [r7, #12]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f002 fb98 	bl	8004680 <USB_EPStopXfer>
 8001f50:	4603      	mov	r3, r0
 8001f52:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001f54:	7afb      	ldrb	r3, [r7, #11]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b08a      	sub	sp, #40	; 0x28
 8001f62:	af02      	add	r7, sp, #8
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	4613      	mov	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4413      	add	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	3338      	adds	r3, #56	; 0x38
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	3304      	adds	r3, #4
 8001f84:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6a1a      	ldr	r2, [r3, #32]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d901      	bls.n	8001f96 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e06c      	b.n	8002070 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	699a      	ldr	r2, [r3, #24]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	69fa      	ldr	r2, [r7, #28]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d902      	bls.n	8001fb2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3303      	adds	r3, #3
 8001fb6:	089b      	lsrs	r3, r3, #2
 8001fb8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fba:	e02b      	b.n	8002014 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	699a      	ldr	r2, [r3, #24]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	69fa      	ldr	r2, [r7, #28]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d902      	bls.n	8001fd8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	3303      	adds	r3, #3
 8001fdc:	089b      	lsrs	r3, r3, #2
 8001fde:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6919      	ldr	r1, [r3, #16]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	6978      	ldr	r0, [r7, #20]
 8001ff8:	f002 fbec 	bl	80047d4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	691a      	ldr	r2, [r3, #16]
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	441a      	add	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6a1a      	ldr	r2, [r3, #32]
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	441a      	add	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	015a      	lsls	r2, r3, #5
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4413      	add	r3, r2
 800201c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	429a      	cmp	r2, r3
 8002028:	d809      	bhi.n	800203e <PCD_WriteEmptyTxFifo+0xe0>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6a1a      	ldr	r2, [r3, #32]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002032:	429a      	cmp	r2, r3
 8002034:	d203      	bcs.n	800203e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1be      	bne.n	8001fbc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	699a      	ldr	r2, [r3, #24]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	429a      	cmp	r2, r3
 8002048:	d811      	bhi.n	800206e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	f003 030f 	and.w	r3, r3, #15
 8002050:	2201      	movs	r2, #1
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800205e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	43db      	mvns	r3, r3
 8002064:	6939      	ldr	r1, [r7, #16]
 8002066:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800206a:	4013      	ands	r3, r2
 800206c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3720      	adds	r7, #32
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b088      	sub	sp, #32
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	333c      	adds	r3, #60	; 0x3c
 8002090:	3304      	adds	r3, #4
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	015a      	lsls	r2, r3, #5
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	4413      	add	r3, r2
 800209e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d17b      	bne.n	80021a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d015      	beq.n	80020e4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	4a61      	ldr	r2, [pc, #388]	; (8002240 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	f240 80b9 	bls.w	8002234 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 80b3 	beq.w	8002234 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	015a      	lsls	r2, r3, #5
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	4413      	add	r3, r2
 80020d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020da:	461a      	mov	r2, r3
 80020dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020e0:	6093      	str	r3, [r2, #8]
 80020e2:	e0a7      	b.n	8002234 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	f003 0320 	and.w	r3, r3, #32
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d009      	beq.n	8002102 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	015a      	lsls	r2, r3, #5
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	4413      	add	r3, r2
 80020f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020fa:	461a      	mov	r2, r3
 80020fc:	2320      	movs	r3, #32
 80020fe:	6093      	str	r3, [r2, #8]
 8002100:	e098      	b.n	8002234 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002108:	2b00      	cmp	r3, #0
 800210a:	f040 8093 	bne.w	8002234 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	4a4b      	ldr	r2, [pc, #300]	; (8002240 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d90f      	bls.n	8002136 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00a      	beq.n	8002136 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	4413      	add	r3, r2
 8002128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800212c:	461a      	mov	r2, r3
 800212e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002132:	6093      	str	r3, [r2, #8]
 8002134:	e07e      	b.n	8002234 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	4613      	mov	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	4413      	add	r3, r2
 8002148:	3304      	adds	r3, #4
 800214a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	69da      	ldr	r2, [r3, #28]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	0159      	lsls	r1, r3, #5
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	440b      	add	r3, r1
 8002158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002162:	1ad2      	subs	r2, r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d114      	bne.n	8002198 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d109      	bne.n	800218a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002180:	461a      	mov	r2, r3
 8002182:	2101      	movs	r1, #1
 8002184:	f002 fdbe 	bl	8004d04 <USB_EP0_OutStart>
 8002188:	e006      	b.n	8002198 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	691a      	ldr	r2, [r3, #16]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	441a      	add	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	4619      	mov	r1, r3
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f005 f864 	bl	800726c <HAL_PCD_DataOutStageCallback>
 80021a4:	e046      	b.n	8002234 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	4a26      	ldr	r2, [pc, #152]	; (8002244 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d124      	bne.n	80021f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00a      	beq.n	80021ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	015a      	lsls	r2, r3, #5
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	4413      	add	r3, r2
 80021c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021c4:	461a      	mov	r2, r3
 80021c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021ca:	6093      	str	r3, [r2, #8]
 80021cc:	e032      	b.n	8002234 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	f003 0320 	and.w	r3, r3, #32
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d008      	beq.n	80021ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	015a      	lsls	r2, r3, #5
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	4413      	add	r3, r2
 80021e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e4:	461a      	mov	r2, r3
 80021e6:	2320      	movs	r3, #32
 80021e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	4619      	mov	r1, r3
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f005 f83b 	bl	800726c <HAL_PCD_DataOutStageCallback>
 80021f6:	e01d      	b.n	8002234 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d114      	bne.n	8002228 <PCD_EP_OutXfrComplete_int+0x1b0>
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	4613      	mov	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	4413      	add	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	440b      	add	r3, r1
 800220c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d108      	bne.n	8002228 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6818      	ldr	r0, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002220:	461a      	mov	r2, r3
 8002222:	2100      	movs	r1, #0
 8002224:	f002 fd6e 	bl	8004d04 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	4619      	mov	r1, r3
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f005 f81c 	bl	800726c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3720      	adds	r7, #32
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	4f54300a 	.word	0x4f54300a
 8002244:	4f54310a 	.word	0x4f54310a

08002248 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	333c      	adds	r3, #60	; 0x3c
 8002260:	3304      	adds	r3, #4
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	015a      	lsls	r2, r3, #5
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4413      	add	r3, r2
 800226e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4a15      	ldr	r2, [pc, #84]	; (80022d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d90e      	bls.n	800229c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002284:	2b00      	cmp	r3, #0
 8002286:	d009      	beq.n	800229c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	015a      	lsls	r2, r3, #5
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4413      	add	r3, r2
 8002290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002294:	461a      	mov	r2, r3
 8002296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800229a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f004 ffd3 	bl	8007248 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d90c      	bls.n	80022c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d108      	bne.n	80022c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022bc:	461a      	mov	r2, r3
 80022be:	2101      	movs	r1, #1
 80022c0:	f002 fd20 	bl	8004d04 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	4f54300a 	.word	0x4f54300a

080022d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	70fb      	strb	r3, [r7, #3]
 80022e0:	4613      	mov	r3, r2
 80022e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d107      	bne.n	8002302 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80022f2:	883b      	ldrh	r3, [r7, #0]
 80022f4:	0419      	lsls	r1, r3, #16
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	629a      	str	r2, [r3, #40]	; 0x28
 8002300:	e028      	b.n	8002354 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002308:	0c1b      	lsrs	r3, r3, #16
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	4413      	add	r3, r2
 800230e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002310:	2300      	movs	r3, #0
 8002312:	73fb      	strb	r3, [r7, #15]
 8002314:	e00d      	b.n	8002332 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	7bfb      	ldrb	r3, [r7, #15]
 800231c:	3340      	adds	r3, #64	; 0x40
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	0c1b      	lsrs	r3, r3, #16
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	4413      	add	r3, r2
 800232a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	3301      	adds	r3, #1
 8002330:	73fb      	strb	r3, [r7, #15]
 8002332:	7bfa      	ldrb	r2, [r7, #15]
 8002334:	78fb      	ldrb	r3, [r7, #3]
 8002336:	3b01      	subs	r3, #1
 8002338:	429a      	cmp	r2, r3
 800233a:	d3ec      	bcc.n	8002316 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800233c:	883b      	ldrh	r3, [r7, #0]
 800233e:	0418      	lsls	r0, r3, #16
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6819      	ldr	r1, [r3, #0]
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	3b01      	subs	r3, #1
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	4302      	orrs	r2, r0
 800234c:	3340      	adds	r3, #64	; 0x40
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
 800236a:	460b      	mov	r3, r1
 800236c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	887a      	ldrh	r2, [r7, #2]
 8002374:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023b2:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <HAL_PCDEx_ActivateLPM+0x44>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	10000003 	.word	0x10000003

080023cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80023d6:	4b23      	ldr	r3, [pc, #140]	; (8002464 <HAL_PWREx_EnableOverDrive+0x98>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	4a22      	ldr	r2, [pc, #136]	; (8002464 <HAL_PWREx_EnableOverDrive+0x98>)
 80023dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e0:	6413      	str	r3, [r2, #64]	; 0x40
 80023e2:	4b20      	ldr	r3, [pc, #128]	; (8002464 <HAL_PWREx_EnableOverDrive+0x98>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ea:	603b      	str	r3, [r7, #0]
 80023ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80023ee:	4b1e      	ldr	r3, [pc, #120]	; (8002468 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a1d      	ldr	r2, [pc, #116]	; (8002468 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023fa:	f7fe fa41 	bl	8000880 <HAL_GetTick>
 80023fe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002400:	e009      	b.n	8002416 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002402:	f7fe fa3d 	bl	8000880 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002410:	d901      	bls.n	8002416 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e022      	b.n	800245c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002416:	4b14      	ldr	r3, [pc, #80]	; (8002468 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800241e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002422:	d1ee      	bne.n	8002402 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002424:	4b10      	ldr	r3, [pc, #64]	; (8002468 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a0f      	ldr	r2, [pc, #60]	; (8002468 <HAL_PWREx_EnableOverDrive+0x9c>)
 800242a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800242e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002430:	f7fe fa26 	bl	8000880 <HAL_GetTick>
 8002434:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002436:	e009      	b.n	800244c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002438:	f7fe fa22 	bl	8000880 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002446:	d901      	bls.n	800244c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e007      	b.n	800245c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800244c:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_PWREx_EnableOverDrive+0x9c>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002454:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002458:	d1ee      	bne.n	8002438 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40023800 	.word	0x40023800
 8002468:	40007000 	.word	0x40007000

0800246c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002474:	2300      	movs	r3, #0
 8002476:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e291      	b.n	80029a6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 8087 	beq.w	800259e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002490:	4b96      	ldr	r3, [pc, #600]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 030c 	and.w	r3, r3, #12
 8002498:	2b04      	cmp	r3, #4
 800249a:	d00c      	beq.n	80024b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800249c:	4b93      	ldr	r3, [pc, #588]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 030c 	and.w	r3, r3, #12
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d112      	bne.n	80024ce <HAL_RCC_OscConfig+0x62>
 80024a8:	4b90      	ldr	r3, [pc, #576]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024b4:	d10b      	bne.n	80024ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b6:	4b8d      	ldr	r3, [pc, #564]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d06c      	beq.n	800259c <HAL_RCC_OscConfig+0x130>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d168      	bne.n	800259c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e26b      	b.n	80029a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d6:	d106      	bne.n	80024e6 <HAL_RCC_OscConfig+0x7a>
 80024d8:	4b84      	ldr	r3, [pc, #528]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a83      	ldr	r2, [pc, #524]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 80024de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	e02e      	b.n	8002544 <HAL_RCC_OscConfig+0xd8>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10c      	bne.n	8002508 <HAL_RCC_OscConfig+0x9c>
 80024ee:	4b7f      	ldr	r3, [pc, #508]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a7e      	ldr	r2, [pc, #504]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 80024f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	4b7c      	ldr	r3, [pc, #496]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a7b      	ldr	r2, [pc, #492]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 8002500:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	e01d      	b.n	8002544 <HAL_RCC_OscConfig+0xd8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002510:	d10c      	bne.n	800252c <HAL_RCC_OscConfig+0xc0>
 8002512:	4b76      	ldr	r3, [pc, #472]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a75      	ldr	r2, [pc, #468]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 8002518:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	4b73      	ldr	r3, [pc, #460]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a72      	ldr	r2, [pc, #456]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 8002524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	e00b      	b.n	8002544 <HAL_RCC_OscConfig+0xd8>
 800252c:	4b6f      	ldr	r3, [pc, #444]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a6e      	ldr	r2, [pc, #440]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 8002532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	4b6c      	ldr	r3, [pc, #432]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a6b      	ldr	r2, [pc, #428]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 800253e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002542:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d013      	beq.n	8002574 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254c:	f7fe f998 	bl	8000880 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002554:	f7fe f994 	bl	8000880 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b64      	cmp	r3, #100	; 0x64
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e21f      	b.n	80029a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	4b61      	ldr	r3, [pc, #388]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0xe8>
 8002572:	e014      	b.n	800259e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002574:	f7fe f984 	bl	8000880 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800257c:	f7fe f980 	bl	8000880 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b64      	cmp	r3, #100	; 0x64
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e20b      	b.n	80029a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258e:	4b57      	ldr	r3, [pc, #348]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x110>
 800259a:	e000      	b.n	800259e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d069      	beq.n	800267e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025aa:	4b50      	ldr	r3, [pc, #320]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 030c 	and.w	r3, r3, #12
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00b      	beq.n	80025ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025b6:	4b4d      	ldr	r3, [pc, #308]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	2b08      	cmp	r3, #8
 80025c0:	d11c      	bne.n	80025fc <HAL_RCC_OscConfig+0x190>
 80025c2:	4b4a      	ldr	r3, [pc, #296]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d116      	bne.n	80025fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ce:	4b47      	ldr	r3, [pc, #284]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_RCC_OscConfig+0x17a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d001      	beq.n	80025e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e1df      	b.n	80029a6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e6:	4b41      	ldr	r3, [pc, #260]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	493d      	ldr	r1, [pc, #244]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fa:	e040      	b.n	800267e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d023      	beq.n	800264c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002604:	4b39      	ldr	r3, [pc, #228]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a38      	ldr	r2, [pc, #224]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002610:	f7fe f936 	bl	8000880 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002618:	f7fe f932 	bl	8000880 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e1bd      	b.n	80029a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262a:	4b30      	ldr	r3, [pc, #192]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0f0      	beq.n	8002618 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002636:	4b2d      	ldr	r3, [pc, #180]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	4929      	ldr	r1, [pc, #164]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 8002646:	4313      	orrs	r3, r2
 8002648:	600b      	str	r3, [r1, #0]
 800264a:	e018      	b.n	800267e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800264c:	4b27      	ldr	r3, [pc, #156]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a26      	ldr	r2, [pc, #152]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 8002652:	f023 0301 	bic.w	r3, r3, #1
 8002656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002658:	f7fe f912 	bl	8000880 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002660:	f7fe f90e 	bl	8000880 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e199      	b.n	80029a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002672:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d038      	beq.n	80026fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d019      	beq.n	80026c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002692:	4b16      	ldr	r3, [pc, #88]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 8002694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002696:	4a15      	ldr	r2, [pc, #84]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269e:	f7fe f8ef 	bl	8000880 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a6:	f7fe f8eb 	bl	8000880 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e176      	b.n	80029a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b8:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 80026ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0f0      	beq.n	80026a6 <HAL_RCC_OscConfig+0x23a>
 80026c4:	e01a      	b.n	80026fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c6:	4b09      	ldr	r3, [pc, #36]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 80026c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ca:	4a08      	ldr	r2, [pc, #32]	; (80026ec <HAL_RCC_OscConfig+0x280>)
 80026cc:	f023 0301 	bic.w	r3, r3, #1
 80026d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d2:	f7fe f8d5 	bl	8000880 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d8:	e00a      	b.n	80026f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026da:	f7fe f8d1 	bl	8000880 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d903      	bls.n	80026f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e15c      	b.n	80029a6 <HAL_RCC_OscConfig+0x53a>
 80026ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f0:	4b91      	ldr	r3, [pc, #580]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 80026f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1ee      	bne.n	80026da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 80a4 	beq.w	8002852 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800270a:	4b8b      	ldr	r3, [pc, #556]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10d      	bne.n	8002732 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002716:	4b88      	ldr	r3, [pc, #544]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	4a87      	ldr	r2, [pc, #540]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 800271c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002720:	6413      	str	r3, [r2, #64]	; 0x40
 8002722:	4b85      	ldr	r3, [pc, #532]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800272e:	2301      	movs	r3, #1
 8002730:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002732:	4b82      	ldr	r3, [pc, #520]	; (800293c <HAL_RCC_OscConfig+0x4d0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273a:	2b00      	cmp	r3, #0
 800273c:	d118      	bne.n	8002770 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800273e:	4b7f      	ldr	r3, [pc, #508]	; (800293c <HAL_RCC_OscConfig+0x4d0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a7e      	ldr	r2, [pc, #504]	; (800293c <HAL_RCC_OscConfig+0x4d0>)
 8002744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800274a:	f7fe f899 	bl	8000880 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002752:	f7fe f895 	bl	8000880 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b64      	cmp	r3, #100	; 0x64
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e120      	b.n	80029a6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002764:	4b75      	ldr	r3, [pc, #468]	; (800293c <HAL_RCC_OscConfig+0x4d0>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d106      	bne.n	8002786 <HAL_RCC_OscConfig+0x31a>
 8002778:	4b6f      	ldr	r3, [pc, #444]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 800277a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277c:	4a6e      	ldr	r2, [pc, #440]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	6713      	str	r3, [r2, #112]	; 0x70
 8002784:	e02d      	b.n	80027e2 <HAL_RCC_OscConfig+0x376>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10c      	bne.n	80027a8 <HAL_RCC_OscConfig+0x33c>
 800278e:	4b6a      	ldr	r3, [pc, #424]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 8002790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002792:	4a69      	ldr	r2, [pc, #420]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 8002794:	f023 0301 	bic.w	r3, r3, #1
 8002798:	6713      	str	r3, [r2, #112]	; 0x70
 800279a:	4b67      	ldr	r3, [pc, #412]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 800279c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279e:	4a66      	ldr	r2, [pc, #408]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 80027a0:	f023 0304 	bic.w	r3, r3, #4
 80027a4:	6713      	str	r3, [r2, #112]	; 0x70
 80027a6:	e01c      	b.n	80027e2 <HAL_RCC_OscConfig+0x376>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2b05      	cmp	r3, #5
 80027ae:	d10c      	bne.n	80027ca <HAL_RCC_OscConfig+0x35e>
 80027b0:	4b61      	ldr	r3, [pc, #388]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 80027b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b4:	4a60      	ldr	r2, [pc, #384]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 80027b6:	f043 0304 	orr.w	r3, r3, #4
 80027ba:	6713      	str	r3, [r2, #112]	; 0x70
 80027bc:	4b5e      	ldr	r3, [pc, #376]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 80027be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c0:	4a5d      	ldr	r2, [pc, #372]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	6713      	str	r3, [r2, #112]	; 0x70
 80027c8:	e00b      	b.n	80027e2 <HAL_RCC_OscConfig+0x376>
 80027ca:	4b5b      	ldr	r3, [pc, #364]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 80027cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ce:	4a5a      	ldr	r2, [pc, #360]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 80027d0:	f023 0301 	bic.w	r3, r3, #1
 80027d4:	6713      	str	r3, [r2, #112]	; 0x70
 80027d6:	4b58      	ldr	r3, [pc, #352]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 80027d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027da:	4a57      	ldr	r2, [pc, #348]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 80027dc:	f023 0304 	bic.w	r3, r3, #4
 80027e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d015      	beq.n	8002816 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ea:	f7fe f849 	bl	8000880 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f0:	e00a      	b.n	8002808 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f2:	f7fe f845 	bl	8000880 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002800:	4293      	cmp	r3, r2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e0ce      	b.n	80029a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002808:	4b4b      	ldr	r3, [pc, #300]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 800280a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0ee      	beq.n	80027f2 <HAL_RCC_OscConfig+0x386>
 8002814:	e014      	b.n	8002840 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002816:	f7fe f833 	bl	8000880 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800281c:	e00a      	b.n	8002834 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281e:	f7fe f82f 	bl	8000880 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	f241 3288 	movw	r2, #5000	; 0x1388
 800282c:	4293      	cmp	r3, r2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e0b8      	b.n	80029a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002834:	4b40      	ldr	r3, [pc, #256]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 8002836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1ee      	bne.n	800281e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002840:	7dfb      	ldrb	r3, [r7, #23]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d105      	bne.n	8002852 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002846:	4b3c      	ldr	r3, [pc, #240]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	4a3b      	ldr	r2, [pc, #236]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 800284c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002850:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 80a4 	beq.w	80029a4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800285c:	4b36      	ldr	r3, [pc, #216]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	2b08      	cmp	r3, #8
 8002866:	d06b      	beq.n	8002940 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	2b02      	cmp	r3, #2
 800286e:	d149      	bne.n	8002904 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002870:	4b31      	ldr	r3, [pc, #196]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a30      	ldr	r2, [pc, #192]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 8002876:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800287a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287c:	f7fe f800 	bl	8000880 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002884:	f7fd fffc 	bl	8000880 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e087      	b.n	80029a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002896:	4b28      	ldr	r3, [pc, #160]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f0      	bne.n	8002884 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69da      	ldr	r2, [r3, #28]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	019b      	lsls	r3, r3, #6
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b8:	085b      	lsrs	r3, r3, #1
 80028ba:	3b01      	subs	r3, #1
 80028bc:	041b      	lsls	r3, r3, #16
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c4:	061b      	lsls	r3, r3, #24
 80028c6:	4313      	orrs	r3, r2
 80028c8:	4a1b      	ldr	r2, [pc, #108]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 80028ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80028ce:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d0:	4b19      	ldr	r3, [pc, #100]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a18      	ldr	r2, [pc, #96]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 80028d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7fd ffd0 	bl	8000880 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e4:	f7fd ffcc 	bl	8000880 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e057      	b.n	80029a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f6:	4b10      	ldr	r3, [pc, #64]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCC_OscConfig+0x478>
 8002902:	e04f      	b.n	80029a4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002904:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a0b      	ldr	r2, [pc, #44]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 800290a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800290e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002910:	f7fd ffb6 	bl	8000880 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002918:	f7fd ffb2 	bl	8000880 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e03d      	b.n	80029a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292a:	4b03      	ldr	r3, [pc, #12]	; (8002938 <HAL_RCC_OscConfig+0x4cc>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x4ac>
 8002936:	e035      	b.n	80029a4 <HAL_RCC_OscConfig+0x538>
 8002938:	40023800 	.word	0x40023800
 800293c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002940:	4b1b      	ldr	r3, [pc, #108]	; (80029b0 <HAL_RCC_OscConfig+0x544>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d028      	beq.n	80029a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002958:	429a      	cmp	r2, r3
 800295a:	d121      	bne.n	80029a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002966:	429a      	cmp	r2, r3
 8002968:	d11a      	bne.n	80029a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002970:	4013      	ands	r3, r2
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002976:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002978:	4293      	cmp	r3, r2
 800297a:	d111      	bne.n	80029a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002986:	085b      	lsrs	r3, r3, #1
 8002988:	3b01      	subs	r3, #1
 800298a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800298c:	429a      	cmp	r2, r3
 800298e:	d107      	bne.n	80029a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800299c:	429a      	cmp	r2, r3
 800299e:	d001      	beq.n	80029a4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e000      	b.n	80029a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40023800 	.word	0x40023800

080029b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e0d0      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029cc:	4b6a      	ldr	r3, [pc, #424]	; (8002b78 <HAL_RCC_ClockConfig+0x1c4>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 030f 	and.w	r3, r3, #15
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d910      	bls.n	80029fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029da:	4b67      	ldr	r3, [pc, #412]	; (8002b78 <HAL_RCC_ClockConfig+0x1c4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f023 020f 	bic.w	r2, r3, #15
 80029e2:	4965      	ldr	r1, [pc, #404]	; (8002b78 <HAL_RCC_ClockConfig+0x1c4>)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ea:	4b63      	ldr	r3, [pc, #396]	; (8002b78 <HAL_RCC_ClockConfig+0x1c4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d001      	beq.n	80029fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e0b8      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d020      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d005      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a14:	4b59      	ldr	r3, [pc, #356]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	4a58      	ldr	r2, [pc, #352]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a2c:	4b53      	ldr	r3, [pc, #332]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	4a52      	ldr	r2, [pc, #328]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a38:	4b50      	ldr	r3, [pc, #320]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	494d      	ldr	r1, [pc, #308]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d040      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d107      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5e:	4b47      	ldr	r3, [pc, #284]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d115      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e07f      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d107      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a76:	4b41      	ldr	r3, [pc, #260]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d109      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e073      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a86:	4b3d      	ldr	r3, [pc, #244]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e06b      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a96:	4b39      	ldr	r3, [pc, #228]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f023 0203 	bic.w	r2, r3, #3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	4936      	ldr	r1, [pc, #216]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aa8:	f7fd feea 	bl	8000880 <HAL_GetTick>
 8002aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aae:	e00a      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab0:	f7fd fee6 	bl	8000880 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e053      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac6:	4b2d      	ldr	r3, [pc, #180]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 020c 	and.w	r2, r3, #12
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d1eb      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ad8:	4b27      	ldr	r3, [pc, #156]	; (8002b78 <HAL_RCC_ClockConfig+0x1c4>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d210      	bcs.n	8002b08 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae6:	4b24      	ldr	r3, [pc, #144]	; (8002b78 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f023 020f 	bic.w	r2, r3, #15
 8002aee:	4922      	ldr	r1, [pc, #136]	; (8002b78 <HAL_RCC_ClockConfig+0x1c4>)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af6:	4b20      	ldr	r3, [pc, #128]	; (8002b78 <HAL_RCC_ClockConfig+0x1c4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e032      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b14:	4b19      	ldr	r3, [pc, #100]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4916      	ldr	r1, [pc, #88]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d009      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b32:	4b12      	ldr	r3, [pc, #72]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	490e      	ldr	r1, [pc, #56]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b46:	f000 f821 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	091b      	lsrs	r3, r3, #4
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	490a      	ldr	r1, [pc, #40]	; (8002b80 <HAL_RCC_ClockConfig+0x1cc>)
 8002b58:	5ccb      	ldrb	r3, [r1, r3]
 8002b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5e:	4a09      	ldr	r2, [pc, #36]	; (8002b84 <HAL_RCC_ClockConfig+0x1d0>)
 8002b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b62:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <HAL_RCC_ClockConfig+0x1d4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fd fe46 	bl	80007f8 <HAL_InitTick>

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40023c00 	.word	0x40023c00
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	08007b30 	.word	0x08007b30
 8002b84:	20000000 	.word	0x20000000
 8002b88:	20000004 	.word	0x20000004

08002b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b90:	b094      	sub	sp, #80	; 0x50
 8002b92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002b94:	2300      	movs	r3, #0
 8002b96:	647b      	str	r3, [r7, #68]	; 0x44
 8002b98:	2300      	movs	r3, #0
 8002b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ba4:	4b79      	ldr	r3, [pc, #484]	; (8002d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 030c 	and.w	r3, r3, #12
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d00d      	beq.n	8002bcc <HAL_RCC_GetSysClockFreq+0x40>
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	f200 80e1 	bhi.w	8002d78 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d002      	beq.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x34>
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d003      	beq.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bbe:	e0db      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bc0:	4b73      	ldr	r3, [pc, #460]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bc2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bc4:	e0db      	b.n	8002d7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bc6:	4b73      	ldr	r3, [pc, #460]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x208>)
 8002bc8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bca:	e0d8      	b.n	8002d7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bcc:	4b6f      	ldr	r3, [pc, #444]	; (8002d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bd4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002bd6:	4b6d      	ldr	r3, [pc, #436]	; (8002d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d063      	beq.n	8002caa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002be2:	4b6a      	ldr	r3, [pc, #424]	; (8002d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	099b      	lsrs	r3, r3, #6
 8002be8:	2200      	movs	r2, #0
 8002bea:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bf4:	633b      	str	r3, [r7, #48]	; 0x30
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	637b      	str	r3, [r7, #52]	; 0x34
 8002bfa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002bfe:	4622      	mov	r2, r4
 8002c00:	462b      	mov	r3, r5
 8002c02:	f04f 0000 	mov.w	r0, #0
 8002c06:	f04f 0100 	mov.w	r1, #0
 8002c0a:	0159      	lsls	r1, r3, #5
 8002c0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c10:	0150      	lsls	r0, r2, #5
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	4621      	mov	r1, r4
 8002c18:	1a51      	subs	r1, r2, r1
 8002c1a:	6139      	str	r1, [r7, #16]
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	f04f 0300 	mov.w	r3, #0
 8002c2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c30:	4659      	mov	r1, fp
 8002c32:	018b      	lsls	r3, r1, #6
 8002c34:	4651      	mov	r1, sl
 8002c36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c3a:	4651      	mov	r1, sl
 8002c3c:	018a      	lsls	r2, r1, #6
 8002c3e:	4651      	mov	r1, sl
 8002c40:	ebb2 0801 	subs.w	r8, r2, r1
 8002c44:	4659      	mov	r1, fp
 8002c46:	eb63 0901 	sbc.w	r9, r3, r1
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	f04f 0300 	mov.w	r3, #0
 8002c52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c5e:	4690      	mov	r8, r2
 8002c60:	4699      	mov	r9, r3
 8002c62:	4623      	mov	r3, r4
 8002c64:	eb18 0303 	adds.w	r3, r8, r3
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	462b      	mov	r3, r5
 8002c6c:	eb49 0303 	adc.w	r3, r9, r3
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c7e:	4629      	mov	r1, r5
 8002c80:	024b      	lsls	r3, r1, #9
 8002c82:	4621      	mov	r1, r4
 8002c84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c88:	4621      	mov	r1, r4
 8002c8a:	024a      	lsls	r2, r1, #9
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	4619      	mov	r1, r3
 8002c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c92:	2200      	movs	r2, #0
 8002c94:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c9c:	f7fd fab4 	bl	8000208 <__aeabi_uldivmod>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ca8:	e058      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002caa:	4b38      	ldr	r3, [pc, #224]	; (8002d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	099b      	lsrs	r3, r3, #6
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cba:	623b      	str	r3, [r7, #32]
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002cc4:	4642      	mov	r2, r8
 8002cc6:	464b      	mov	r3, r9
 8002cc8:	f04f 0000 	mov.w	r0, #0
 8002ccc:	f04f 0100 	mov.w	r1, #0
 8002cd0:	0159      	lsls	r1, r3, #5
 8002cd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cd6:	0150      	lsls	r0, r2, #5
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4641      	mov	r1, r8
 8002cde:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ce2:	4649      	mov	r1, r9
 8002ce4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cf4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cf8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cfc:	ebb2 040a 	subs.w	r4, r2, sl
 8002d00:	eb63 050b 	sbc.w	r5, r3, fp
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	00eb      	lsls	r3, r5, #3
 8002d0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d12:	00e2      	lsls	r2, r4, #3
 8002d14:	4614      	mov	r4, r2
 8002d16:	461d      	mov	r5, r3
 8002d18:	4643      	mov	r3, r8
 8002d1a:	18e3      	adds	r3, r4, r3
 8002d1c:	603b      	str	r3, [r7, #0]
 8002d1e:	464b      	mov	r3, r9
 8002d20:	eb45 0303 	adc.w	r3, r5, r3
 8002d24:	607b      	str	r3, [r7, #4]
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d32:	4629      	mov	r1, r5
 8002d34:	028b      	lsls	r3, r1, #10
 8002d36:	4621      	mov	r1, r4
 8002d38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d3c:	4621      	mov	r1, r4
 8002d3e:	028a      	lsls	r2, r1, #10
 8002d40:	4610      	mov	r0, r2
 8002d42:	4619      	mov	r1, r3
 8002d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d46:	2200      	movs	r2, #0
 8002d48:	61bb      	str	r3, [r7, #24]
 8002d4a:	61fa      	str	r2, [r7, #28]
 8002d4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d50:	f7fd fa5a 	bl	8000208 <__aeabi_uldivmod>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4613      	mov	r3, r2
 8002d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	0c1b      	lsrs	r3, r3, #16
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	3301      	adds	r3, #1
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002d6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d76:	e002      	b.n	8002d7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d78:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3750      	adds	r7, #80	; 0x50
 8002d84:	46bd      	mov	sp, r7
 8002d86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	00f42400 	.word	0x00f42400
 8002d94:	007a1200 	.word	0x007a1200

08002d98 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d9c:	4b03      	ldr	r3, [pc, #12]	; (8002dac <HAL_RCC_GetHCLKFreq+0x14>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	20000000 	.word	0x20000000

08002db0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d012      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002dd8:	4b69      	ldr	r3, [pc, #420]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	4a68      	ldr	r2, [pc, #416]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dde:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002de2:	6093      	str	r3, [r2, #8]
 8002de4:	4b66      	ldr	r3, [pc, #408]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dec:	4964      	ldr	r1, [pc, #400]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d017      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e0a:	4b5d      	ldr	r3, [pc, #372]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e18:	4959      	ldr	r1, [pc, #356]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e28:	d101      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002e36:	2301      	movs	r3, #1
 8002e38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d017      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e46:	4b4e      	ldr	r3, [pc, #312]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	494a      	ldr	r1, [pc, #296]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e64:	d101      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002e66:	2301      	movs	r3, #1
 8002e68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002e72:	2301      	movs	r3, #1
 8002e74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002e82:	2301      	movs	r3, #1
 8002e84:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0320 	and.w	r3, r3, #32
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 808b 	beq.w	8002faa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e94:	4b3a      	ldr	r3, [pc, #232]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	4a39      	ldr	r2, [pc, #228]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e9e:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea0:	4b37      	ldr	r3, [pc, #220]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	60bb      	str	r3, [r7, #8]
 8002eaa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002eac:	4b35      	ldr	r3, [pc, #212]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a34      	ldr	r2, [pc, #208]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eb8:	f7fd fce2 	bl	8000880 <HAL_GetTick>
 8002ebc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ec0:	f7fd fcde 	bl	8000880 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b64      	cmp	r3, #100	; 0x64
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e357      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ed2:	4b2c      	ldr	r3, [pc, #176]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0f0      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ede:	4b28      	ldr	r3, [pc, #160]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d035      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d02e      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002efc:	4b20      	ldr	r3, [pc, #128]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f04:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f06:	4b1e      	ldr	r3, [pc, #120]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0a:	4a1d      	ldr	r2, [pc, #116]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f10:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f12:	4b1b      	ldr	r3, [pc, #108]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f16:	4a1a      	ldr	r2, [pc, #104]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f1e:	4a18      	ldr	r2, [pc, #96]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f24:	4b16      	ldr	r3, [pc, #88]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d114      	bne.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f30:	f7fd fca6 	bl	8000880 <HAL_GetTick>
 8002f34:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f36:	e00a      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f38:	f7fd fca2 	bl	8000880 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e319      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4e:	4b0c      	ldr	r3, [pc, #48]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0ee      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f66:	d111      	bne.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002f68:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f74:	4b04      	ldr	r3, [pc, #16]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f76:	400b      	ands	r3, r1
 8002f78:	4901      	ldr	r1, [pc, #4]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	608b      	str	r3, [r1, #8]
 8002f7e:	e00b      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002f80:	40023800 	.word	0x40023800
 8002f84:	40007000 	.word	0x40007000
 8002f88:	0ffffcff 	.word	0x0ffffcff
 8002f8c:	4baa      	ldr	r3, [pc, #680]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	4aa9      	ldr	r2, [pc, #676]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f92:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f96:	6093      	str	r3, [r2, #8]
 8002f98:	4ba7      	ldr	r3, [pc, #668]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa4:	49a4      	ldr	r1, [pc, #656]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0310 	and.w	r3, r3, #16
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d010      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002fb6:	4ba0      	ldr	r3, [pc, #640]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fbc:	4a9e      	ldr	r2, [pc, #632]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002fc6:	4b9c      	ldr	r3, [pc, #624]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fc8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd0:	4999      	ldr	r1, [pc, #612]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00a      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fe4:	4b94      	ldr	r3, [pc, #592]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ff2:	4991      	ldr	r1, [pc, #580]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00a      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003006:	4b8c      	ldr	r3, [pc, #560]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003014:	4988      	ldr	r1, [pc, #544]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003016:	4313      	orrs	r3, r2
 8003018:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00a      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003028:	4b83      	ldr	r3, [pc, #524]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800302a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003036:	4980      	ldr	r1, [pc, #512]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003038:	4313      	orrs	r3, r2
 800303a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00a      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800304a:	4b7b      	ldr	r3, [pc, #492]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800304c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003050:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003058:	4977      	ldr	r1, [pc, #476]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800305a:	4313      	orrs	r3, r2
 800305c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00a      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800306c:	4b72      	ldr	r3, [pc, #456]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800306e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003072:	f023 0203 	bic.w	r2, r3, #3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	496f      	ldr	r1, [pc, #444]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800307c:	4313      	orrs	r3, r2
 800307e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00a      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800308e:	4b6a      	ldr	r3, [pc, #424]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003094:	f023 020c 	bic.w	r2, r3, #12
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800309c:	4966      	ldr	r1, [pc, #408]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00a      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030b0:	4b61      	ldr	r3, [pc, #388]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030be:	495e      	ldr	r1, [pc, #376]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00a      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030d2:	4b59      	ldr	r3, [pc, #356]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e0:	4955      	ldr	r1, [pc, #340]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030f4:	4b50      	ldr	r3, [pc, #320]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003102:	494d      	ldr	r1, [pc, #308]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003104:	4313      	orrs	r3, r2
 8003106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003116:	4b48      	ldr	r3, [pc, #288]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003124:	4944      	ldr	r1, [pc, #272]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00a      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003138:	4b3f      	ldr	r3, [pc, #252]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800313a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003146:	493c      	ldr	r1, [pc, #240]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800315a:	4b37      	ldr	r3, [pc, #220]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800315c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003160:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003168:	4933      	ldr	r1, [pc, #204]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00a      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800317c:	4b2e      	ldr	r3, [pc, #184]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800317e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003182:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800318a:	492b      	ldr	r1, [pc, #172]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800318c:	4313      	orrs	r3, r2
 800318e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d011      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800319e:	4b26      	ldr	r3, [pc, #152]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031ac:	4922      	ldr	r1, [pc, #136]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031bc:	d101      	bne.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80031be:	2301      	movs	r3, #1
 80031c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80031ce:	2301      	movs	r3, #1
 80031d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00a      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031de:	4b16      	ldr	r3, [pc, #88]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ec:	4912      	ldr	r1, [pc, #72]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00b      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003200:	4b0d      	ldr	r3, [pc, #52]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003206:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003210:	4909      	ldr	r1, [pc, #36]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d006      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 80d9 	beq.w	80033de <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800322c:	4b02      	ldr	r3, [pc, #8]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a01      	ldr	r2, [pc, #4]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003232:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003236:	e001      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003238:	40023800 	.word	0x40023800
 800323c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800323e:	f7fd fb1f 	bl	8000880 <HAL_GetTick>
 8003242:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003244:	e008      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003246:	f7fd fb1b 	bl	8000880 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b64      	cmp	r3, #100	; 0x64
 8003252:	d901      	bls.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e194      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003258:	4b6c      	ldr	r3, [pc, #432]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1f0      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	d021      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003274:	2b00      	cmp	r3, #0
 8003276:	d11d      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003278:	4b64      	ldr	r3, [pc, #400]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800327a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800327e:	0c1b      	lsrs	r3, r3, #16
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003286:	4b61      	ldr	r3, [pc, #388]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800328c:	0e1b      	lsrs	r3, r3, #24
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	019a      	lsls	r2, r3, #6
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	041b      	lsls	r3, r3, #16
 800329e:	431a      	orrs	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	061b      	lsls	r3, r3, #24
 80032a4:	431a      	orrs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	071b      	lsls	r3, r3, #28
 80032ac:	4957      	ldr	r1, [pc, #348]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d004      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032c8:	d00a      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d02e      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032de:	d129      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032e0:	4b4a      	ldr	r3, [pc, #296]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032e6:	0c1b      	lsrs	r3, r3, #16
 80032e8:	f003 0303 	and.w	r3, r3, #3
 80032ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032ee:	4b47      	ldr	r3, [pc, #284]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032f4:	0f1b      	lsrs	r3, r3, #28
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	019a      	lsls	r2, r3, #6
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	041b      	lsls	r3, r3, #16
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	061b      	lsls	r3, r3, #24
 800330e:	431a      	orrs	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	071b      	lsls	r3, r3, #28
 8003314:	493d      	ldr	r1, [pc, #244]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003316:	4313      	orrs	r3, r2
 8003318:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800331c:	4b3b      	ldr	r3, [pc, #236]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800331e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003322:	f023 021f 	bic.w	r2, r3, #31
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	3b01      	subs	r3, #1
 800332c:	4937      	ldr	r1, [pc, #220]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d01d      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003340:	4b32      	ldr	r3, [pc, #200]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003346:	0e1b      	lsrs	r3, r3, #24
 8003348:	f003 030f 	and.w	r3, r3, #15
 800334c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800334e:	4b2f      	ldr	r3, [pc, #188]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003354:	0f1b      	lsrs	r3, r3, #28
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	019a      	lsls	r2, r3, #6
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	041b      	lsls	r3, r3, #16
 8003368:	431a      	orrs	r2, r3
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	061b      	lsls	r3, r3, #24
 800336e:	431a      	orrs	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	071b      	lsls	r3, r3, #28
 8003374:	4925      	ldr	r1, [pc, #148]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003376:	4313      	orrs	r3, r2
 8003378:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d011      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	019a      	lsls	r2, r3, #6
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	041b      	lsls	r3, r3, #16
 8003394:	431a      	orrs	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	061b      	lsls	r3, r3, #24
 800339c:	431a      	orrs	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	071b      	lsls	r3, r3, #28
 80033a4:	4919      	ldr	r1, [pc, #100]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80033ac:	4b17      	ldr	r3, [pc, #92]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a16      	ldr	r2, [pc, #88]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033b8:	f7fd fa62 	bl	8000880 <HAL_GetTick>
 80033bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033be:	e008      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033c0:	f7fd fa5e 	bl	8000880 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b64      	cmp	r3, #100	; 0x64
 80033cc:	d901      	bls.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e0d7      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033d2:	4b0e      	ldr	r3, [pc, #56]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	f040 80cd 	bne.w	8003580 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80033e6:	4b09      	ldr	r3, [pc, #36]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a08      	ldr	r2, [pc, #32]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033f2:	f7fd fa45 	bl	8000880 <HAL_GetTick>
 80033f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033f8:	e00a      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033fa:	f7fd fa41 	bl	8000880 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b64      	cmp	r3, #100	; 0x64
 8003406:	d903      	bls.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e0ba      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800340c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003410:	4b5e      	ldr	r3, [pc, #376]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003418:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800341c:	d0ed      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342e:	2b00      	cmp	r3, #0
 8003430:	d009      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800343a:	2b00      	cmp	r3, #0
 800343c:	d02e      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	2b00      	cmp	r3, #0
 8003444:	d12a      	bne.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003446:	4b51      	ldr	r3, [pc, #324]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344c:	0c1b      	lsrs	r3, r3, #16
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003454:	4b4d      	ldr	r3, [pc, #308]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345a:	0f1b      	lsrs	r3, r3, #28
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	019a      	lsls	r2, r3, #6
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	041b      	lsls	r3, r3, #16
 800346c:	431a      	orrs	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	061b      	lsls	r3, r3, #24
 8003474:	431a      	orrs	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	071b      	lsls	r3, r3, #28
 800347a:	4944      	ldr	r1, [pc, #272]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800347c:	4313      	orrs	r3, r2
 800347e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003482:	4b42      	ldr	r3, [pc, #264]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003488:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003490:	3b01      	subs	r3, #1
 8003492:	021b      	lsls	r3, r3, #8
 8003494:	493d      	ldr	r1, [pc, #244]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003496:	4313      	orrs	r3, r2
 8003498:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d022      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034b0:	d11d      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034b2:	4b36      	ldr	r3, [pc, #216]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b8:	0e1b      	lsrs	r3, r3, #24
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034c0:	4b32      	ldr	r3, [pc, #200]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c6:	0f1b      	lsrs	r3, r3, #28
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	019a      	lsls	r2, r3, #6
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	041b      	lsls	r3, r3, #16
 80034da:	431a      	orrs	r2, r3
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	061b      	lsls	r3, r3, #24
 80034e0:	431a      	orrs	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	071b      	lsls	r3, r3, #28
 80034e6:	4929      	ldr	r1, [pc, #164]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d028      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034fa:	4b24      	ldr	r3, [pc, #144]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003500:	0e1b      	lsrs	r3, r3, #24
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003508:	4b20      	ldr	r3, [pc, #128]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800350a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350e:	0c1b      	lsrs	r3, r3, #16
 8003510:	f003 0303 	and.w	r3, r3, #3
 8003514:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	019a      	lsls	r2, r3, #6
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	041b      	lsls	r3, r3, #16
 8003520:	431a      	orrs	r2, r3
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	061b      	lsls	r3, r3, #24
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	071b      	lsls	r3, r3, #28
 800352e:	4917      	ldr	r1, [pc, #92]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003536:	4b15      	ldr	r3, [pc, #84]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800353c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	4911      	ldr	r1, [pc, #68]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003546:	4313      	orrs	r3, r2
 8003548:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800354c:	4b0f      	ldr	r3, [pc, #60]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a0e      	ldr	r2, [pc, #56]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003556:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003558:	f7fd f992 	bl	8000880 <HAL_GetTick>
 800355c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003560:	f7fd f98e 	bl	8000880 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b64      	cmp	r3, #100	; 0x64
 800356c:	d901      	bls.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e007      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003572:	4b06      	ldr	r3, [pc, #24]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800357a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800357e:	d1ef      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3720      	adds	r7, #32
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40023800 	.word	0x40023800

08003590 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003590:	b084      	sub	sp, #16
 8003592:	b580      	push	{r7, lr}
 8003594:	b084      	sub	sp, #16
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	f107 001c 	add.w	r0, r7, #28
 800359e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80035a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d120      	bne.n	80035ea <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68da      	ldr	r2, [r3, #12]
 80035b8:	4b20      	ldr	r3, [pc, #128]	; (800363c <USB_CoreInit+0xac>)
 80035ba:	4013      	ands	r3, r2
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80035cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d105      	bne.n	80035de <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f001 fbee 	bl	8004dc0 <USB_CoreReset>
 80035e4:	4603      	mov	r3, r0
 80035e6:	73fb      	strb	r3, [r7, #15]
 80035e8:	e010      	b.n	800360c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f001 fbe2 	bl	8004dc0 <USB_CoreReset>
 80035fc:	4603      	mov	r3, r0
 80035fe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003604:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800360c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360e:	2b01      	cmp	r3, #1
 8003610:	d10b      	bne.n	800362a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f043 0206 	orr.w	r2, r3, #6
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f043 0220 	orr.w	r2, r3, #32
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800362a:	7bfb      	ldrb	r3, [r7, #15]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003636:	b004      	add	sp, #16
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	ffbdffbf 	.word	0xffbdffbf

08003640 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	4613      	mov	r3, r2
 800364c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	2b02      	cmp	r3, #2
 8003652:	d165      	bne.n	8003720 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4a41      	ldr	r2, [pc, #260]	; (800375c <USB_SetTurnaroundTime+0x11c>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d906      	bls.n	800366a <USB_SetTurnaroundTime+0x2a>
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	4a40      	ldr	r2, [pc, #256]	; (8003760 <USB_SetTurnaroundTime+0x120>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d202      	bcs.n	800366a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003664:	230f      	movs	r3, #15
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	e062      	b.n	8003730 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	4a3c      	ldr	r2, [pc, #240]	; (8003760 <USB_SetTurnaroundTime+0x120>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d306      	bcc.n	8003680 <USB_SetTurnaroundTime+0x40>
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	4a3b      	ldr	r2, [pc, #236]	; (8003764 <USB_SetTurnaroundTime+0x124>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d202      	bcs.n	8003680 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800367a:	230e      	movs	r3, #14
 800367c:	617b      	str	r3, [r7, #20]
 800367e:	e057      	b.n	8003730 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	4a38      	ldr	r2, [pc, #224]	; (8003764 <USB_SetTurnaroundTime+0x124>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d306      	bcc.n	8003696 <USB_SetTurnaroundTime+0x56>
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	4a37      	ldr	r2, [pc, #220]	; (8003768 <USB_SetTurnaroundTime+0x128>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d202      	bcs.n	8003696 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003690:	230d      	movs	r3, #13
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	e04c      	b.n	8003730 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	4a33      	ldr	r2, [pc, #204]	; (8003768 <USB_SetTurnaroundTime+0x128>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d306      	bcc.n	80036ac <USB_SetTurnaroundTime+0x6c>
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	4a32      	ldr	r2, [pc, #200]	; (800376c <USB_SetTurnaroundTime+0x12c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d802      	bhi.n	80036ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80036a6:	230c      	movs	r3, #12
 80036a8:	617b      	str	r3, [r7, #20]
 80036aa:	e041      	b.n	8003730 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	4a2f      	ldr	r2, [pc, #188]	; (800376c <USB_SetTurnaroundTime+0x12c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d906      	bls.n	80036c2 <USB_SetTurnaroundTime+0x82>
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	4a2e      	ldr	r2, [pc, #184]	; (8003770 <USB_SetTurnaroundTime+0x130>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d802      	bhi.n	80036c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80036bc:	230b      	movs	r3, #11
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	e036      	b.n	8003730 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	4a2a      	ldr	r2, [pc, #168]	; (8003770 <USB_SetTurnaroundTime+0x130>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d906      	bls.n	80036d8 <USB_SetTurnaroundTime+0x98>
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	4a29      	ldr	r2, [pc, #164]	; (8003774 <USB_SetTurnaroundTime+0x134>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d802      	bhi.n	80036d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80036d2:	230a      	movs	r3, #10
 80036d4:	617b      	str	r3, [r7, #20]
 80036d6:	e02b      	b.n	8003730 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	4a26      	ldr	r2, [pc, #152]	; (8003774 <USB_SetTurnaroundTime+0x134>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d906      	bls.n	80036ee <USB_SetTurnaroundTime+0xae>
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	4a25      	ldr	r2, [pc, #148]	; (8003778 <USB_SetTurnaroundTime+0x138>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d202      	bcs.n	80036ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80036e8:	2309      	movs	r3, #9
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	e020      	b.n	8003730 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	4a21      	ldr	r2, [pc, #132]	; (8003778 <USB_SetTurnaroundTime+0x138>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d306      	bcc.n	8003704 <USB_SetTurnaroundTime+0xc4>
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	4a20      	ldr	r2, [pc, #128]	; (800377c <USB_SetTurnaroundTime+0x13c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d802      	bhi.n	8003704 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80036fe:	2308      	movs	r3, #8
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	e015      	b.n	8003730 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	4a1d      	ldr	r2, [pc, #116]	; (800377c <USB_SetTurnaroundTime+0x13c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d906      	bls.n	800371a <USB_SetTurnaroundTime+0xda>
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4a1c      	ldr	r2, [pc, #112]	; (8003780 <USB_SetTurnaroundTime+0x140>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d202      	bcs.n	800371a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003714:	2307      	movs	r3, #7
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	e00a      	b.n	8003730 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800371a:	2306      	movs	r3, #6
 800371c:	617b      	str	r3, [r7, #20]
 800371e:	e007      	b.n	8003730 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d102      	bne.n	800372c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003726:	2309      	movs	r3, #9
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	e001      	b.n	8003730 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800372c:	2309      	movs	r3, #9
 800372e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	68da      	ldr	r2, [r3, #12]
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	029b      	lsls	r3, r3, #10
 8003744:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003748:	431a      	orrs	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	371c      	adds	r7, #28
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	00d8acbf 	.word	0x00d8acbf
 8003760:	00e4e1c0 	.word	0x00e4e1c0
 8003764:	00f42400 	.word	0x00f42400
 8003768:	01067380 	.word	0x01067380
 800376c:	011a499f 	.word	0x011a499f
 8003770:	01312cff 	.word	0x01312cff
 8003774:	014ca43f 	.word	0x014ca43f
 8003778:	016e3600 	.word	0x016e3600
 800377c:	01a6ab1f 	.word	0x01a6ab1f
 8003780:	01e84800 	.word	0x01e84800

08003784 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f043 0201 	orr.w	r2, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f023 0201 	bic.w	r2, r3, #1
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	460b      	mov	r3, r1
 80037d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80037e4:	78fb      	ldrb	r3, [r7, #3]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d115      	bne.n	8003816 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80037f6:	2001      	movs	r0, #1
 80037f8:	f7fd f84e 	bl	8000898 <HAL_Delay>
      ms++;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	3301      	adds	r3, #1
 8003800:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f001 fa4b 	bl	8004c9e <USB_GetMode>
 8003808:	4603      	mov	r3, r0
 800380a:	2b01      	cmp	r3, #1
 800380c:	d01e      	beq.n	800384c <USB_SetCurrentMode+0x84>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2b31      	cmp	r3, #49	; 0x31
 8003812:	d9f0      	bls.n	80037f6 <USB_SetCurrentMode+0x2e>
 8003814:	e01a      	b.n	800384c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003816:	78fb      	ldrb	r3, [r7, #3]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d115      	bne.n	8003848 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003828:	2001      	movs	r0, #1
 800382a:	f7fd f835 	bl	8000898 <HAL_Delay>
      ms++;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	3301      	adds	r3, #1
 8003832:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f001 fa32 	bl	8004c9e <USB_GetMode>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <USB_SetCurrentMode+0x84>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2b31      	cmp	r3, #49	; 0x31
 8003844:	d9f0      	bls.n	8003828 <USB_SetCurrentMode+0x60>
 8003846:	e001      	b.n	800384c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e005      	b.n	8003858 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2b32      	cmp	r3, #50	; 0x32
 8003850:	d101      	bne.n	8003856 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e000      	b.n	8003858 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003860:	b084      	sub	sp, #16
 8003862:	b580      	push	{r7, lr}
 8003864:	b086      	sub	sp, #24
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800386e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003872:	2300      	movs	r3, #0
 8003874:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800387a:	2300      	movs	r3, #0
 800387c:	613b      	str	r3, [r7, #16]
 800387e:	e009      	b.n	8003894 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	3340      	adds	r3, #64	; 0x40
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	2200      	movs	r2, #0
 800388c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	3301      	adds	r3, #1
 8003892:	613b      	str	r3, [r7, #16]
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	2b0e      	cmp	r3, #14
 8003898:	d9f2      	bls.n	8003880 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800389a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800389c:	2b00      	cmp	r3, #0
 800389e:	d11c      	bne.n	80038da <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038ae:	f043 0302 	orr.w	r3, r3, #2
 80038b2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	e005      	b.n	80038e6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80038ec:	461a      	mov	r2, r3
 80038ee:	2300      	movs	r3, #0
 80038f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f8:	4619      	mov	r1, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003900:	461a      	mov	r2, r3
 8003902:	680b      	ldr	r3, [r1, #0]
 8003904:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003908:	2b01      	cmp	r3, #1
 800390a:	d10c      	bne.n	8003926 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800390c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390e:	2b00      	cmp	r3, #0
 8003910:	d104      	bne.n	800391c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003912:	2100      	movs	r1, #0
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f965 	bl	8003be4 <USB_SetDevSpeed>
 800391a:	e008      	b.n	800392e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800391c:	2101      	movs	r1, #1
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f960 	bl	8003be4 <USB_SetDevSpeed>
 8003924:	e003      	b.n	800392e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003926:	2103      	movs	r1, #3
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f95b 	bl	8003be4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800392e:	2110      	movs	r1, #16
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f8f3 	bl	8003b1c <USB_FlushTxFifo>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f91f 	bl	8003b84 <USB_FlushRxFifo>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003956:	461a      	mov	r2, r3
 8003958:	2300      	movs	r3, #0
 800395a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003962:	461a      	mov	r2, r3
 8003964:	2300      	movs	r3, #0
 8003966:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800396e:	461a      	mov	r2, r3
 8003970:	2300      	movs	r3, #0
 8003972:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003974:	2300      	movs	r3, #0
 8003976:	613b      	str	r3, [r7, #16]
 8003978:	e043      	b.n	8003a02 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	015a      	lsls	r2, r3, #5
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4413      	add	r3, r2
 8003982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800398c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003990:	d118      	bne.n	80039c4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10a      	bne.n	80039ae <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039a4:	461a      	mov	r2, r3
 80039a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	e013      	b.n	80039d6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ba:	461a      	mov	r2, r3
 80039bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	e008      	b.n	80039d6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	015a      	lsls	r2, r3, #5
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4413      	add	r3, r2
 80039cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d0:	461a      	mov	r2, r3
 80039d2:	2300      	movs	r3, #0
 80039d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	015a      	lsls	r2, r3, #5
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4413      	add	r3, r2
 80039de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e2:	461a      	mov	r2, r3
 80039e4:	2300      	movs	r3, #0
 80039e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f4:	461a      	mov	r2, r3
 80039f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	3301      	adds	r3, #1
 8003a00:	613b      	str	r3, [r7, #16]
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d3b7      	bcc.n	800397a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	613b      	str	r3, [r7, #16]
 8003a0e:	e043      	b.n	8003a98 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	015a      	lsls	r2, r3, #5
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4413      	add	r3, r2
 8003a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a26:	d118      	bne.n	8003a5a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10a      	bne.n	8003a44 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	015a      	lsls	r2, r3, #5
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	e013      	b.n	8003a6c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a50:	461a      	mov	r2, r3
 8003a52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	e008      	b.n	8003a6c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a66:	461a      	mov	r2, r3
 8003a68:	2300      	movs	r3, #0
 8003a6a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a78:	461a      	mov	r2, r3
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	015a      	lsls	r2, r3, #5
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4413      	add	r3, r2
 8003a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a90:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	3301      	adds	r3, #1
 8003a96:	613b      	str	r3, [r7, #16]
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d3b7      	bcc.n	8003a10 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ab2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003ac0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d105      	bne.n	8003ad4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	f043 0210 	orr.w	r2, r3, #16
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	699a      	ldr	r2, [r3, #24]
 8003ad8:	4b0e      	ldr	r3, [pc, #56]	; (8003b14 <USB_DevInit+0x2b4>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d005      	beq.n	8003af2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	f043 0208 	orr.w	r2, r3, #8
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d105      	bne.n	8003b04 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	699a      	ldr	r2, [r3, #24]
 8003afc:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <USB_DevInit+0x2b8>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b10:	b004      	add	sp, #16
 8003b12:	4770      	bx	lr
 8003b14:	803c3800 	.word	0x803c3800
 8003b18:	40000004 	.word	0x40000004

08003b1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4a13      	ldr	r2, [pc, #76]	; (8003b80 <USB_FlushTxFifo+0x64>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d901      	bls.n	8003b3c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e01b      	b.n	8003b74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	daf2      	bge.n	8003b2a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	019b      	lsls	r3, r3, #6
 8003b4c:	f043 0220 	orr.w	r2, r3, #32
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	3301      	adds	r3, #1
 8003b58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4a08      	ldr	r2, [pc, #32]	; (8003b80 <USB_FlushTxFifo+0x64>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d901      	bls.n	8003b66 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e006      	b.n	8003b74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	f003 0320 	and.w	r3, r3, #32
 8003b6e:	2b20      	cmp	r3, #32
 8003b70:	d0f0      	beq.n	8003b54 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	00030d40 	.word	0x00030d40

08003b84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	3301      	adds	r3, #1
 8003b94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4a11      	ldr	r2, [pc, #68]	; (8003be0 <USB_FlushRxFifo+0x5c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d901      	bls.n	8003ba2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e018      	b.n	8003bd4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	daf2      	bge.n	8003b90 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2210      	movs	r2, #16
 8003bb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4a08      	ldr	r2, [pc, #32]	; (8003be0 <USB_FlushRxFifo+0x5c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d901      	bls.n	8003bc6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e006      	b.n	8003bd4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f003 0310 	and.w	r3, r3, #16
 8003bce:	2b10      	cmp	r3, #16
 8003bd0:	d0f0      	beq.n	8003bb4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	00030d40 	.word	0x00030d40

08003be4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	78fb      	ldrb	r3, [r7, #3]
 8003bfe:	68f9      	ldr	r1, [r7, #12]
 8003c00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c04:	4313      	orrs	r3, r2
 8003c06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b087      	sub	sp, #28
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 0306 	and.w	r3, r3, #6
 8003c2e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d102      	bne.n	8003c3c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003c36:	2300      	movs	r3, #0
 8003c38:	75fb      	strb	r3, [r7, #23]
 8003c3a:	e00a      	b.n	8003c52 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d002      	beq.n	8003c48 <USB_GetDevSpeed+0x32>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2b06      	cmp	r3, #6
 8003c46:	d102      	bne.n	8003c4e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003c48:	2302      	movs	r3, #2
 8003c4a:	75fb      	strb	r3, [r7, #23]
 8003c4c:	e001      	b.n	8003c52 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003c4e:	230f      	movs	r3, #15
 8003c50:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	371c      	adds	r7, #28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	785b      	ldrb	r3, [r3, #1]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d139      	bne.n	8003cf0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c82:	69da      	ldr	r2, [r3, #28]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	f003 030f 	and.w	r3, r3, #15
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	68f9      	ldr	r1, [r7, #12]
 8003c96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d153      	bne.n	8003d5c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	791b      	ldrb	r3, [r3, #4]
 8003cce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cd0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	059b      	lsls	r3, r3, #22
 8003cd6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	0159      	lsls	r1, r3, #5
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	440b      	add	r3, r1
 8003ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4b20      	ldr	r3, [pc, #128]	; (8003d6c <USB_ActivateEndpoint+0x10c>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	600b      	str	r3, [r1, #0]
 8003cee:	e035      	b.n	8003d5c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf6:	69da      	ldr	r2, [r3, #28]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	f003 030f 	and.w	r3, r3, #15
 8003d00:	2101      	movs	r1, #1
 8003d02:	fa01 f303 	lsl.w	r3, r1, r3
 8003d06:	041b      	lsls	r3, r3, #16
 8003d08:	68f9      	ldr	r1, [r7, #12]
 8003d0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	015a      	lsls	r2, r3, #5
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d119      	bne.n	8003d5c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	015a      	lsls	r2, r3, #5
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4413      	add	r3, r2
 8003d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	791b      	ldrb	r3, [r3, #4]
 8003d42:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d44:	430b      	orrs	r3, r1
 8003d46:	431a      	orrs	r2, r3
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	0159      	lsls	r1, r3, #5
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	440b      	add	r3, r1
 8003d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d54:	4619      	mov	r1, r3
 8003d56:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <USB_ActivateEndpoint+0x10c>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	10008000 	.word	0x10008000

08003d70 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	785b      	ldrb	r3, [r3, #1]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d161      	bne.n	8003e50 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003da2:	d11f      	bne.n	8003de4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	0151      	lsls	r1, r2, #5
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	440a      	add	r2, r1
 8003dba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dbe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003dc2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	0151      	lsls	r1, r2, #5
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	440a      	add	r2, r1
 8003dda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003de2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	f003 030f 	and.w	r3, r3, #15
 8003df4:	2101      	movs	r1, #1
 8003df6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	68f9      	ldr	r1, [r7, #12]
 8003e00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e04:	4013      	ands	r3, r2
 8003e06:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e0e:	69da      	ldr	r2, [r3, #28]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	f003 030f 	and.w	r3, r3, #15
 8003e18:	2101      	movs	r1, #1
 8003e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	43db      	mvns	r3, r3
 8003e22:	68f9      	ldr	r1, [r7, #12]
 8003e24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e28:	4013      	ands	r3, r2
 8003e2a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	0159      	lsls	r1, r3, #5
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	440b      	add	r3, r1
 8003e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e46:	4619      	mov	r1, r3
 8003e48:	4b35      	ldr	r3, [pc, #212]	; (8003f20 <USB_DeactivateEndpoint+0x1b0>)
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	600b      	str	r3, [r1, #0]
 8003e4e:	e060      	b.n	8003f12 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e66:	d11f      	bne.n	8003ea8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	0151      	lsls	r1, r2, #5
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	440a      	add	r2, r1
 8003e7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e86:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	0151      	lsls	r1, r2, #5
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	440a      	add	r2, r1
 8003e9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ea2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ea6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	f003 030f 	and.w	r3, r3, #15
 8003eb8:	2101      	movs	r1, #1
 8003eba:	fa01 f303 	lsl.w	r3, r1, r3
 8003ebe:	041b      	lsls	r3, r3, #16
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	68f9      	ldr	r1, [r7, #12]
 8003ec4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ec8:	4013      	ands	r3, r2
 8003eca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed2:	69da      	ldr	r2, [r3, #28]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	f003 030f 	and.w	r3, r3, #15
 8003edc:	2101      	movs	r1, #1
 8003ede:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee2:	041b      	lsls	r3, r3, #16
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	68f9      	ldr	r1, [r7, #12]
 8003ee8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003eec:	4013      	ands	r3, r2
 8003eee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	015a      	lsls	r2, r3, #5
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	0159      	lsls	r1, r3, #5
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	440b      	add	r3, r1
 8003f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <USB_DeactivateEndpoint+0x1b4>)
 8003f0e:	4013      	ands	r3, r2
 8003f10:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	ec337800 	.word	0xec337800
 8003f24:	eff37800 	.word	0xeff37800

08003f28 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b08a      	sub	sp, #40	; 0x28
 8003f2c:	af02      	add	r7, sp, #8
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	4613      	mov	r3, r2
 8003f34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	785b      	ldrb	r3, [r3, #1]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	f040 8163 	bne.w	8004210 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d132      	bne.n	8003fb8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	015a      	lsls	r2, r3, #5
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	0159      	lsls	r1, r3, #5
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	440b      	add	r3, r1
 8003f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4ba5      	ldr	r3, [pc, #660]	; (8004204 <USB_EPStartXfer+0x2dc>)
 8003f70:	4013      	ands	r3, r2
 8003f72:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	0151      	lsls	r1, r2, #5
 8003f86:	69fa      	ldr	r2, [r7, #28]
 8003f88:	440a      	add	r2, r1
 8003f8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa0:	691a      	ldr	r2, [r3, #16]
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	0159      	lsls	r1, r3, #5
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	440b      	add	r3, r1
 8003faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fae:	4619      	mov	r1, r3
 8003fb0:	4b95      	ldr	r3, [pc, #596]	; (8004208 <USB_EPStartXfer+0x2e0>)
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	610b      	str	r3, [r1, #16]
 8003fb6:	e074      	b.n	80040a2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc4:	691a      	ldr	r2, [r3, #16]
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	0159      	lsls	r1, r3, #5
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	440b      	add	r3, r1
 8003fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	4b8c      	ldr	r3, [pc, #560]	; (8004208 <USB_EPStartXfer+0x2e0>)
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe6:	691a      	ldr	r2, [r3, #16]
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	0159      	lsls	r1, r3, #5
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	440b      	add	r3, r1
 8003ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4b83      	ldr	r3, [pc, #524]	; (8004204 <USB_EPStartXfer+0x2dc>)
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	4413      	add	r3, r2
 8004004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004008:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	6999      	ldr	r1, [r3, #24]
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	440b      	add	r3, r1
 8004014:	1e59      	subs	r1, r3, #1
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	fbb1 f3f3 	udiv	r3, r1, r3
 800401e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004020:	4b7a      	ldr	r3, [pc, #488]	; (800420c <USB_EPStartXfer+0x2e4>)
 8004022:	400b      	ands	r3, r1
 8004024:	69b9      	ldr	r1, [r7, #24]
 8004026:	0148      	lsls	r0, r1, #5
 8004028:	69f9      	ldr	r1, [r7, #28]
 800402a:	4401      	add	r1, r0
 800402c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004030:	4313      	orrs	r3, r2
 8004032:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	4413      	add	r3, r2
 800403c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004040:	691a      	ldr	r2, [r3, #16]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800404a:	69b9      	ldr	r1, [r7, #24]
 800404c:	0148      	lsls	r0, r1, #5
 800404e:	69f9      	ldr	r1, [r7, #28]
 8004050:	4401      	add	r1, r0
 8004052:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004056:	4313      	orrs	r3, r2
 8004058:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	791b      	ldrb	r3, [r3, #4]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d11f      	bne.n	80040a2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	015a      	lsls	r2, r3, #5
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	4413      	add	r3, r2
 800406a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	0151      	lsls	r1, r2, #5
 8004074:	69fa      	ldr	r2, [r7, #28]
 8004076:	440a      	add	r2, r1
 8004078:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800407c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004080:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	015a      	lsls	r2, r3, #5
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	4413      	add	r3, r2
 800408a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	0151      	lsls	r1, r2, #5
 8004094:	69fa      	ldr	r2, [r7, #28]
 8004096:	440a      	add	r2, r1
 8004098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800409c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80040a2:	79fb      	ldrb	r3, [r7, #7]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d14b      	bne.n	8004140 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d009      	beq.n	80040c4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040bc:	461a      	mov	r2, r3
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	791b      	ldrb	r3, [r3, #4]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d128      	bne.n	800411e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d110      	bne.n	80040fe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	0151      	lsls	r1, r2, #5
 80040ee:	69fa      	ldr	r2, [r7, #28]
 80040f0:	440a      	add	r2, r1
 80040f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040fa:	6013      	str	r3, [r2, #0]
 80040fc:	e00f      	b.n	800411e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	015a      	lsls	r2, r3, #5
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	4413      	add	r3, r2
 8004106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	0151      	lsls	r1, r2, #5
 8004110:	69fa      	ldr	r2, [r7, #28]
 8004112:	440a      	add	r2, r1
 8004114:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800411c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	015a      	lsls	r2, r3, #5
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	4413      	add	r3, r2
 8004126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	0151      	lsls	r1, r2, #5
 8004130:	69fa      	ldr	r2, [r7, #28]
 8004132:	440a      	add	r2, r1
 8004134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004138:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	e137      	b.n	80043b0 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	015a      	lsls	r2, r3, #5
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	4413      	add	r3, r2
 8004148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	0151      	lsls	r1, r2, #5
 8004152:	69fa      	ldr	r2, [r7, #28]
 8004154:	440a      	add	r2, r1
 8004156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800415a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800415e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	791b      	ldrb	r3, [r3, #4]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d015      	beq.n	8004194 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 811f 	beq.w	80043b0 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	2101      	movs	r1, #1
 8004184:	fa01 f303 	lsl.w	r3, r1, r3
 8004188:	69f9      	ldr	r1, [r7, #28]
 800418a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800418e:	4313      	orrs	r3, r2
 8004190:	634b      	str	r3, [r1, #52]	; 0x34
 8004192:	e10d      	b.n	80043b0 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d110      	bne.n	80041c6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	015a      	lsls	r2, r3, #5
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	0151      	lsls	r1, r2, #5
 80041b6:	69fa      	ldr	r2, [r7, #28]
 80041b8:	440a      	add	r2, r1
 80041ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041c2:	6013      	str	r3, [r2, #0]
 80041c4:	e00f      	b.n	80041e6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	0151      	lsls	r1, r2, #5
 80041d8:	69fa      	ldr	r2, [r7, #28]
 80041da:	440a      	add	r2, r1
 80041dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	6919      	ldr	r1, [r3, #16]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	781a      	ldrb	r2, [r3, #0]
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	b298      	uxth	r0, r3
 80041f4:	79fb      	ldrb	r3, [r7, #7]
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	4603      	mov	r3, r0
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f000 faea 	bl	80047d4 <USB_WritePacket>
 8004200:	e0d6      	b.n	80043b0 <USB_EPStartXfer+0x488>
 8004202:	bf00      	nop
 8004204:	e007ffff 	.word	0xe007ffff
 8004208:	fff80000 	.word	0xfff80000
 800420c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	015a      	lsls	r2, r3, #5
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	4413      	add	r3, r2
 8004218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421c:	691a      	ldr	r2, [r3, #16]
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	0159      	lsls	r1, r3, #5
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	440b      	add	r3, r1
 8004226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422a:	4619      	mov	r1, r3
 800422c:	4b63      	ldr	r3, [pc, #396]	; (80043bc <USB_EPStartXfer+0x494>)
 800422e:	4013      	ands	r3, r2
 8004230:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	015a      	lsls	r2, r3, #5
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	4413      	add	r3, r2
 800423a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800423e:	691a      	ldr	r2, [r3, #16]
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	0159      	lsls	r1, r3, #5
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	440b      	add	r3, r1
 8004248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800424c:	4619      	mov	r1, r3
 800424e:	4b5c      	ldr	r3, [pc, #368]	; (80043c0 <USB_EPStartXfer+0x498>)
 8004250:	4013      	ands	r3, r2
 8004252:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d123      	bne.n	80042a4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	4413      	add	r3, r2
 8004264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004268:	691a      	ldr	r2, [r3, #16]
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004272:	69b9      	ldr	r1, [r7, #24]
 8004274:	0148      	lsls	r0, r1, #5
 8004276:	69f9      	ldr	r1, [r7, #28]
 8004278:	4401      	add	r1, r0
 800427a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800427e:	4313      	orrs	r3, r2
 8004280:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	015a      	lsls	r2, r3, #5
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	4413      	add	r3, r2
 800428a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	0151      	lsls	r1, r2, #5
 8004294:	69fa      	ldr	r2, [r7, #28]
 8004296:	440a      	add	r2, r1
 8004298:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800429c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042a0:	6113      	str	r3, [r2, #16]
 80042a2:	e037      	b.n	8004314 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	699a      	ldr	r2, [r3, #24]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	4413      	add	r3, r2
 80042ae:	1e5a      	subs	r2, r3, #1
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	8afa      	ldrh	r2, [r7, #22]
 80042c0:	fb03 f202 	mul.w	r2, r3, r2
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d4:	691a      	ldr	r2, [r3, #16]
 80042d6:	8afb      	ldrh	r3, [r7, #22]
 80042d8:	04d9      	lsls	r1, r3, #19
 80042da:	4b3a      	ldr	r3, [pc, #232]	; (80043c4 <USB_EPStartXfer+0x49c>)
 80042dc:	400b      	ands	r3, r1
 80042de:	69b9      	ldr	r1, [r7, #24]
 80042e0:	0148      	lsls	r0, r1, #5
 80042e2:	69f9      	ldr	r1, [r7, #28]
 80042e4:	4401      	add	r1, r0
 80042e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80042ea:	4313      	orrs	r3, r2
 80042ec:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	015a      	lsls	r2, r3, #5
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	4413      	add	r3, r2
 80042f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004304:	69b9      	ldr	r1, [r7, #24]
 8004306:	0148      	lsls	r0, r1, #5
 8004308:	69f9      	ldr	r1, [r7, #28]
 800430a:	4401      	add	r1, r0
 800430c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004310:	4313      	orrs	r3, r2
 8004312:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004314:	79fb      	ldrb	r3, [r7, #7]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d10d      	bne.n	8004336 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d009      	beq.n	8004336 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	6919      	ldr	r1, [r3, #16]
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004332:	460a      	mov	r2, r1
 8004334:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	791b      	ldrb	r3, [r3, #4]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d128      	bne.n	8004390 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434a:	2b00      	cmp	r3, #0
 800434c:	d110      	bne.n	8004370 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	4413      	add	r3, r2
 8004356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	0151      	lsls	r1, r2, #5
 8004360:	69fa      	ldr	r2, [r7, #28]
 8004362:	440a      	add	r2, r1
 8004364:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004368:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	e00f      	b.n	8004390 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	4413      	add	r3, r2
 8004378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	0151      	lsls	r1, r2, #5
 8004382:	69fa      	ldr	r2, [r7, #28]
 8004384:	440a      	add	r2, r1
 8004386:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800438a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800438e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	4413      	add	r3, r2
 8004398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	0151      	lsls	r1, r2, #5
 80043a2:	69fa      	ldr	r2, [r7, #28]
 80043a4:	440a      	add	r2, r1
 80043a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3720      	adds	r7, #32
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	fff80000 	.word	0xfff80000
 80043c0:	e007ffff 	.word	0xe007ffff
 80043c4:	1ff80000 	.word	0x1ff80000

080043c8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	4613      	mov	r3, r2
 80043d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	785b      	ldrb	r3, [r3, #1]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	f040 80ce 	bne.w	8004586 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d132      	bne.n	8004458 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	0159      	lsls	r1, r3, #5
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	440b      	add	r3, r1
 8004408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800440c:	4619      	mov	r1, r3
 800440e:	4b9a      	ldr	r3, [pc, #616]	; (8004678 <USB_EP0StartXfer+0x2b0>)
 8004410:	4013      	ands	r3, r2
 8004412:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	4413      	add	r3, r2
 800441c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	0151      	lsls	r1, r2, #5
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	440a      	add	r2, r1
 800442a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800442e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004432:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	015a      	lsls	r2, r3, #5
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	4413      	add	r3, r2
 800443c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004440:	691a      	ldr	r2, [r3, #16]
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	0159      	lsls	r1, r3, #5
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	440b      	add	r3, r1
 800444a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800444e:	4619      	mov	r1, r3
 8004450:	4b8a      	ldr	r3, [pc, #552]	; (800467c <USB_EP0StartXfer+0x2b4>)
 8004452:	4013      	ands	r3, r2
 8004454:	610b      	str	r3, [r1, #16]
 8004456:	e04e      	b.n	80044f6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	4413      	add	r3, r2
 8004460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004464:	691a      	ldr	r2, [r3, #16]
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	0159      	lsls	r1, r3, #5
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	440b      	add	r3, r1
 800446e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004472:	4619      	mov	r1, r3
 8004474:	4b81      	ldr	r3, [pc, #516]	; (800467c <USB_EP0StartXfer+0x2b4>)
 8004476:	4013      	ands	r3, r2
 8004478:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	4413      	add	r3, r2
 8004482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	0159      	lsls	r1, r3, #5
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	440b      	add	r3, r1
 8004490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004494:	4619      	mov	r1, r3
 8004496:	4b78      	ldr	r3, [pc, #480]	; (8004678 <USB_EP0StartXfer+0x2b0>)
 8004498:	4013      	ands	r3, r2
 800449a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	699a      	ldr	r2, [r3, #24]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d903      	bls.n	80044b0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	68da      	ldr	r2, [r3, #12]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	0151      	lsls	r1, r2, #5
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	440a      	add	r2, r1
 80044c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044dc:	691a      	ldr	r2, [r3, #16]
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044e6:	6939      	ldr	r1, [r7, #16]
 80044e8:	0148      	lsls	r0, r1, #5
 80044ea:	6979      	ldr	r1, [r7, #20]
 80044ec:	4401      	add	r1, r0
 80044ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80044f2:	4313      	orrs	r3, r2
 80044f4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80044f6:	79fb      	ldrb	r3, [r7, #7]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d11e      	bne.n	800453a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d009      	beq.n	8004518 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	4413      	add	r3, r2
 800450c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004510:	461a      	mov	r2, r3
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	4413      	add	r3, r2
 8004520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	0151      	lsls	r1, r2, #5
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	440a      	add	r2, r1
 800452e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004532:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004536:	6013      	str	r3, [r2, #0]
 8004538:	e097      	b.n	800466a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	4413      	add	r3, r2
 8004542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	0151      	lsls	r1, r2, #5
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	440a      	add	r2, r1
 8004550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004554:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004558:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 8083 	beq.w	800466a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800456a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	f003 030f 	and.w	r3, r3, #15
 8004574:	2101      	movs	r1, #1
 8004576:	fa01 f303 	lsl.w	r3, r1, r3
 800457a:	6979      	ldr	r1, [r7, #20]
 800457c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004580:	4313      	orrs	r3, r2
 8004582:	634b      	str	r3, [r1, #52]	; 0x34
 8004584:	e071      	b.n	800466a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	015a      	lsls	r2, r3, #5
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	4413      	add	r3, r2
 800458e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004592:	691a      	ldr	r2, [r3, #16]
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	0159      	lsls	r1, r3, #5
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	440b      	add	r3, r1
 800459c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a0:	4619      	mov	r1, r3
 80045a2:	4b36      	ldr	r3, [pc, #216]	; (800467c <USB_EP0StartXfer+0x2b4>)
 80045a4:	4013      	ands	r3, r2
 80045a6:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b4:	691a      	ldr	r2, [r3, #16]
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	0159      	lsls	r1, r3, #5
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	440b      	add	r3, r1
 80045be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c2:	4619      	mov	r1, r3
 80045c4:	4b2c      	ldr	r3, [pc, #176]	; (8004678 <USB_EP0StartXfer+0x2b0>)
 80045c6:	4013      	ands	r3, r2
 80045c8:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	68da      	ldr	r2, [r3, #12]
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	015a      	lsls	r2, r3, #5
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	0151      	lsls	r1, r2, #5
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	440a      	add	r2, r1
 80045f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004600:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	4413      	add	r3, r2
 800460a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004618:	6939      	ldr	r1, [r7, #16]
 800461a:	0148      	lsls	r0, r1, #5
 800461c:	6979      	ldr	r1, [r7, #20]
 800461e:	4401      	add	r1, r0
 8004620:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004624:	4313      	orrs	r3, r2
 8004626:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004628:	79fb      	ldrb	r3, [r7, #7]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d10d      	bne.n	800464a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d009      	beq.n	800464a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	6919      	ldr	r1, [r3, #16]
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	4413      	add	r3, r2
 8004642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004646:	460a      	mov	r2, r1
 8004648:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	4413      	add	r3, r2
 8004652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	0151      	lsls	r1, r2, #5
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	440a      	add	r2, r1
 8004660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004664:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004668:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	371c      	adds	r7, #28
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	e007ffff 	.word	0xe007ffff
 800467c:	fff80000 	.word	0xfff80000

08004680 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004680:	b480      	push	{r7}
 8004682:	b087      	sub	sp, #28
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800468a:	2300      	movs	r3, #0
 800468c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	785b      	ldrb	r3, [r3, #1]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d14a      	bne.n	8004734 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	015a      	lsls	r2, r3, #5
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046b6:	f040 8086 	bne.w	80047c6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	7812      	ldrb	r2, [r2, #0]
 80046ce:	0151      	lsls	r1, r2, #5
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	440a      	add	r2, r1
 80046d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046dc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	7812      	ldrb	r2, [r2, #0]
 80046f2:	0151      	lsls	r1, r2, #5
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	440a      	add	r2, r1
 80046f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004700:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	3301      	adds	r3, #1
 8004706:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f242 7210 	movw	r2, #10000	; 0x2710
 800470e:	4293      	cmp	r3, r2
 8004710:	d902      	bls.n	8004718 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	75fb      	strb	r3, [r7, #23]
          break;
 8004716:	e056      	b.n	80047c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	015a      	lsls	r2, r3, #5
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	4413      	add	r3, r2
 8004722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800472c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004730:	d0e7      	beq.n	8004702 <USB_EPStopXfer+0x82>
 8004732:	e048      	b.n	80047c6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	4413      	add	r3, r2
 800473e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004748:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800474c:	d13b      	bne.n	80047c6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	4413      	add	r3, r2
 8004758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	7812      	ldrb	r2, [r2, #0]
 8004762:	0151      	lsls	r1, r2, #5
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	440a      	add	r2, r1
 8004768:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800476c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004770:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	4413      	add	r3, r2
 800477c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	7812      	ldrb	r2, [r2, #0]
 8004786:	0151      	lsls	r1, r2, #5
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	440a      	add	r2, r1
 800478c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004790:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004794:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	3301      	adds	r3, #1
 800479a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f242 7210 	movw	r2, #10000	; 0x2710
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d902      	bls.n	80047ac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	75fb      	strb	r3, [r7, #23]
          break;
 80047aa:	e00c      	b.n	80047c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047c4:	d0e7      	beq.n	8004796 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80047c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	371c      	adds	r7, #28
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b089      	sub	sp, #36	; 0x24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	4611      	mov	r1, r2
 80047e0:	461a      	mov	r2, r3
 80047e2:	460b      	mov	r3, r1
 80047e4:	71fb      	strb	r3, [r7, #7]
 80047e6:	4613      	mov	r3, r2
 80047e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80047f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d123      	bne.n	8004842 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80047fa:	88bb      	ldrh	r3, [r7, #4]
 80047fc:	3303      	adds	r3, #3
 80047fe:	089b      	lsrs	r3, r3, #2
 8004800:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004802:	2300      	movs	r3, #0
 8004804:	61bb      	str	r3, [r7, #24]
 8004806:	e018      	b.n	800483a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004808:	79fb      	ldrb	r3, [r7, #7]
 800480a:	031a      	lsls	r2, r3, #12
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	4413      	add	r3, r2
 8004810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004814:	461a      	mov	r2, r3
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	3301      	adds	r3, #1
 8004820:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	3301      	adds	r3, #1
 8004826:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	3301      	adds	r3, #1
 800482c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	3301      	adds	r3, #1
 8004832:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	3301      	adds	r3, #1
 8004838:	61bb      	str	r3, [r7, #24]
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	429a      	cmp	r2, r3
 8004840:	d3e2      	bcc.n	8004808 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3724      	adds	r7, #36	; 0x24
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004850:	b480      	push	{r7}
 8004852:	b08b      	sub	sp, #44	; 0x2c
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	4613      	mov	r3, r2
 800485c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004866:	88fb      	ldrh	r3, [r7, #6]
 8004868:	089b      	lsrs	r3, r3, #2
 800486a:	b29b      	uxth	r3, r3
 800486c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800486e:	88fb      	ldrh	r3, [r7, #6]
 8004870:	f003 0303 	and.w	r3, r3, #3
 8004874:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004876:	2300      	movs	r3, #0
 8004878:	623b      	str	r3, [r7, #32]
 800487a:	e014      	b.n	80048a6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	601a      	str	r2, [r3, #0]
    pDest++;
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	3301      	adds	r3, #1
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	3301      	adds	r3, #1
 8004892:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	3301      	adds	r3, #1
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	3301      	adds	r3, #1
 800489e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	3301      	adds	r3, #1
 80048a4:	623b      	str	r3, [r7, #32]
 80048a6:	6a3a      	ldr	r2, [r7, #32]
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d3e6      	bcc.n	800487c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80048ae:	8bfb      	ldrh	r3, [r7, #30]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d01e      	beq.n	80048f2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048be:	461a      	mov	r2, r3
 80048c0:	f107 0310 	add.w	r3, r7, #16
 80048c4:	6812      	ldr	r2, [r2, #0]
 80048c6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	6a3b      	ldr	r3, [r7, #32]
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	fa22 f303 	lsr.w	r3, r2, r3
 80048d4:	b2da      	uxtb	r2, r3
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	701a      	strb	r2, [r3, #0]
      i++;
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	3301      	adds	r3, #1
 80048de:	623b      	str	r3, [r7, #32]
      pDest++;
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	3301      	adds	r3, #1
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80048e6:	8bfb      	ldrh	r3, [r7, #30]
 80048e8:	3b01      	subs	r3, #1
 80048ea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80048ec:	8bfb      	ldrh	r3, [r7, #30]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1ea      	bne.n	80048c8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	372c      	adds	r7, #44	; 0x2c
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	785b      	ldrb	r3, [r3, #1]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d12c      	bne.n	8004976 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	db12      	blt.n	8004954 <USB_EPSetStall+0x54>
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00f      	beq.n	8004954 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	0151      	lsls	r1, r2, #5
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	440a      	add	r2, r1
 800494a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800494e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004952:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	0151      	lsls	r1, r2, #5
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	440a      	add	r2, r1
 800496a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800496e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004972:	6013      	str	r3, [r2, #0]
 8004974:	e02b      	b.n	80049ce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	015a      	lsls	r2, r3, #5
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4413      	add	r3, r2
 800497e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	db12      	blt.n	80049ae <USB_EPSetStall+0xae>
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00f      	beq.n	80049ae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	015a      	lsls	r2, r3, #5
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4413      	add	r3, r2
 8004996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	0151      	lsls	r1, r2, #5
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	440a      	add	r2, r1
 80049a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80049ac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	015a      	lsls	r2, r3, #5
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	0151      	lsls	r1, r2, #5
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	440a      	add	r2, r1
 80049c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	785b      	ldrb	r3, [r3, #1]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d128      	bne.n	8004a4a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	0151      	lsls	r1, r2, #5
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	440a      	add	r2, r1
 8004a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a16:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	791b      	ldrb	r3, [r3, #4]
 8004a1c:	2b03      	cmp	r3, #3
 8004a1e:	d003      	beq.n	8004a28 <USB_EPClearStall+0x4c>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	791b      	ldrb	r3, [r3, #4]
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d138      	bne.n	8004a9a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	0151      	lsls	r1, r2, #5
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	440a      	add	r2, r1
 8004a3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a46:	6013      	str	r3, [r2, #0]
 8004a48:	e027      	b.n	8004a9a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	015a      	lsls	r2, r3, #5
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	0151      	lsls	r1, r2, #5
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	440a      	add	r2, r1
 8004a60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a68:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	791b      	ldrb	r3, [r3, #4]
 8004a6e:	2b03      	cmp	r3, #3
 8004a70:	d003      	beq.n	8004a7a <USB_EPClearStall+0x9e>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	791b      	ldrb	r3, [r3, #4]
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d10f      	bne.n	8004a9a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	0151      	lsls	r1, r2, #5
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	440a      	add	r2, r1
 8004a90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a98:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ac6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004aca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	78fb      	ldrb	r3, [r7, #3]
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004adc:	68f9      	ldr	r1, [r7, #12]
 8004ade:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b0e:	f023 0303 	bic.w	r3, r3, #3
 8004b12:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b22:	f023 0302 	bic.w	r3, r3, #2
 8004b26:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b085      	sub	sp, #20
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b50:	f023 0303 	bic.w	r3, r3, #3
 8004b54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b64:	f043 0302 	orr.w	r3, r3, #2
 8004b68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004b90:	68fb      	ldr	r3, [r7, #12]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3714      	adds	r7, #20
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b085      	sub	sp, #20
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	0c1b      	lsrs	r3, r3, #16
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b085      	sub	sp, #20
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bee:	69db      	ldr	r3, [r3, #28]
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	b29b      	uxth	r3, r3
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b085      	sub	sp, #20
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
 8004c0e:	460b      	mov	r3, r1
 8004c10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004c16:	78fb      	ldrb	r3, [r7, #3]
 8004c18:	015a      	lsls	r2, r3, #5
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	4013      	ands	r3, r2
 8004c32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c34:	68bb      	ldr	r3, [r7, #8]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b087      	sub	sp, #28
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c64:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004c66:	78fb      	ldrb	r3, [r7, #3]
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c72:	01db      	lsls	r3, r3, #7
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004c7c:	78fb      	ldrb	r3, [r7, #3]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c90:	68bb      	ldr	r3, [r7, #8]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	371c      	adds	r7, #28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	f003 0301 	and.w	r3, r3, #1
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
	...

08004cbc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4b09      	ldr	r3, [pc, #36]	; (8004d00 <USB_ActivateSetup+0x44>)
 8004cda:	4013      	ands	r3, r2
 8004cdc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	fffff800 	.word	0xfffff800

08004d04 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b087      	sub	sp, #28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	607a      	str	r2, [r7, #4]
 8004d10:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	333c      	adds	r3, #60	; 0x3c
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	4a26      	ldr	r2, [pc, #152]	; (8004dbc <USB_EP0_OutStart+0xb8>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d90a      	bls.n	8004d3e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d38:	d101      	bne.n	8004d3e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	e037      	b.n	8004dae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d44:	461a      	mov	r2, r3
 8004d46:	2300      	movs	r3, #0
 8004d48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d6c:	f043 0318 	orr.w	r3, r3, #24
 8004d70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d80:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004d84:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004d86:	7afb      	ldrb	r3, [r7, #11]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d10f      	bne.n	8004dac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d92:	461a      	mov	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004da6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004daa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	371c      	adds	r7, #28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	4f54300a 	.word	0x4f54300a

08004dc0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	4a13      	ldr	r2, [pc, #76]	; (8004e24 <USB_CoreReset+0x64>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d901      	bls.n	8004dde <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e01b      	b.n	8004e16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	daf2      	bge.n	8004dcc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	f043 0201 	orr.w	r2, r3, #1
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4a09      	ldr	r2, [pc, #36]	; (8004e24 <USB_CoreReset+0x64>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d901      	bls.n	8004e08 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e006      	b.n	8004e16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d0f0      	beq.n	8004df6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	00030d40 	.word	0x00030d40

08004e28 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	460b      	mov	r3, r1
 8004e32:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004e34:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004e38:	f002 fd02 	bl	8007840 <malloc>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d109      	bne.n	8004e5a <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	32b0      	adds	r2, #176	; 0xb0
 8004e50:	2100      	movs	r1, #0
 8004e52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004e56:	2302      	movs	r3, #2
 8004e58:	e0d4      	b.n	8005004 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004e5a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004e5e:	2100      	movs	r1, #0
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f002 fda9 	bl	80079b8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	32b0      	adds	r2, #176	; 0xb0
 8004e70:	68f9      	ldr	r1, [r7, #12]
 8004e72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	32b0      	adds	r2, #176	; 0xb0
 8004e80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	7c1b      	ldrb	r3, [r3, #16]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d138      	bne.n	8004f04 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004e92:	4b5e      	ldr	r3, [pc, #376]	; (800500c <USBD_CDC_Init+0x1e4>)
 8004e94:	7819      	ldrb	r1, [r3, #0]
 8004e96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f002 fb2c 	bl	80074fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004ea2:	4b5a      	ldr	r3, [pc, #360]	; (800500c <USBD_CDC_Init+0x1e4>)
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	f003 020f 	and.w	r2, r3, #15
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	3324      	adds	r3, #36	; 0x24
 8004eb8:	2201      	movs	r2, #1
 8004eba:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004ebc:	4b54      	ldr	r3, [pc, #336]	; (8005010 <USBD_CDC_Init+0x1e8>)
 8004ebe:	7819      	ldrb	r1, [r3, #0]
 8004ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ec4:	2202      	movs	r2, #2
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f002 fb17 	bl	80074fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004ecc:	4b50      	ldr	r3, [pc, #320]	; (8005010 <USBD_CDC_Init+0x1e8>)
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	f003 020f 	and.w	r2, r3, #15
 8004ed4:	6879      	ldr	r1, [r7, #4]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	440b      	add	r3, r1
 8004ee0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004ee8:	4b4a      	ldr	r3, [pc, #296]	; (8005014 <USBD_CDC_Init+0x1ec>)
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	f003 020f 	and.w	r2, r3, #15
 8004ef0:	6879      	ldr	r1, [r7, #4]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	440b      	add	r3, r1
 8004efc:	3326      	adds	r3, #38	; 0x26
 8004efe:	2210      	movs	r2, #16
 8004f00:	801a      	strh	r2, [r3, #0]
 8004f02:	e035      	b.n	8004f70 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004f04:	4b41      	ldr	r3, [pc, #260]	; (800500c <USBD_CDC_Init+0x1e4>)
 8004f06:	7819      	ldrb	r1, [r3, #0]
 8004f08:	2340      	movs	r3, #64	; 0x40
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f002 faf4 	bl	80074fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004f12:	4b3e      	ldr	r3, [pc, #248]	; (800500c <USBD_CDC_Init+0x1e4>)
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	f003 020f 	and.w	r2, r3, #15
 8004f1a:	6879      	ldr	r1, [r7, #4]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	440b      	add	r3, r1
 8004f26:	3324      	adds	r3, #36	; 0x24
 8004f28:	2201      	movs	r2, #1
 8004f2a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004f2c:	4b38      	ldr	r3, [pc, #224]	; (8005010 <USBD_CDC_Init+0x1e8>)
 8004f2e:	7819      	ldrb	r1, [r3, #0]
 8004f30:	2340      	movs	r3, #64	; 0x40
 8004f32:	2202      	movs	r2, #2
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f002 fae0 	bl	80074fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004f3a:	4b35      	ldr	r3, [pc, #212]	; (8005010 <USBD_CDC_Init+0x1e8>)
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	f003 020f 	and.w	r2, r3, #15
 8004f42:	6879      	ldr	r1, [r7, #4]
 8004f44:	4613      	mov	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	440b      	add	r3, r1
 8004f4e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004f52:	2201      	movs	r2, #1
 8004f54:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004f56:	4b2f      	ldr	r3, [pc, #188]	; (8005014 <USBD_CDC_Init+0x1ec>)
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	f003 020f 	and.w	r2, r3, #15
 8004f5e:	6879      	ldr	r1, [r7, #4]
 8004f60:	4613      	mov	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	440b      	add	r3, r1
 8004f6a:	3326      	adds	r3, #38	; 0x26
 8004f6c:	2210      	movs	r2, #16
 8004f6e:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004f70:	4b28      	ldr	r3, [pc, #160]	; (8005014 <USBD_CDC_Init+0x1ec>)
 8004f72:	7819      	ldrb	r1, [r3, #0]
 8004f74:	2308      	movs	r3, #8
 8004f76:	2203      	movs	r2, #3
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f002 fabe 	bl	80074fa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004f7e:	4b25      	ldr	r3, [pc, #148]	; (8005014 <USBD_CDC_Init+0x1ec>)
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	f003 020f 	and.w	r2, r3, #15
 8004f86:	6879      	ldr	r1, [r7, #4]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	440b      	add	r3, r1
 8004f92:	3324      	adds	r3, #36	; 0x24
 8004f94:	2201      	movs	r2, #1
 8004f96:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	33b0      	adds	r3, #176	; 0xb0
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8004fce:	2302      	movs	r3, #2
 8004fd0:	e018      	b.n	8005004 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	7c1b      	ldrb	r3, [r3, #16]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10a      	bne.n	8004ff0 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004fda:	4b0d      	ldr	r3, [pc, #52]	; (8005010 <USBD_CDC_Init+0x1e8>)
 8004fdc:	7819      	ldrb	r1, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f002 fb75 	bl	80076d8 <USBD_LL_PrepareReceive>
 8004fee:	e008      	b.n	8005002 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004ff0:	4b07      	ldr	r3, [pc, #28]	; (8005010 <USBD_CDC_Init+0x1e8>)
 8004ff2:	7819      	ldrb	r1, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ffa:	2340      	movs	r3, #64	; 0x40
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f002 fb6b 	bl	80076d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	20000093 	.word	0x20000093
 8005010:	20000094 	.word	0x20000094
 8005014:	20000095 	.word	0x20000095

08005018 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	460b      	mov	r3, r1
 8005022:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005024:	4b3a      	ldr	r3, [pc, #232]	; (8005110 <USBD_CDC_DeInit+0xf8>)
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	4619      	mov	r1, r3
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f002 fa8b 	bl	8007546 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005030:	4b37      	ldr	r3, [pc, #220]	; (8005110 <USBD_CDC_DeInit+0xf8>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	f003 020f 	and.w	r2, r3, #15
 8005038:	6879      	ldr	r1, [r7, #4]
 800503a:	4613      	mov	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	440b      	add	r3, r1
 8005044:	3324      	adds	r3, #36	; 0x24
 8005046:	2200      	movs	r2, #0
 8005048:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800504a:	4b32      	ldr	r3, [pc, #200]	; (8005114 <USBD_CDC_DeInit+0xfc>)
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	4619      	mov	r1, r3
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f002 fa78 	bl	8007546 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005056:	4b2f      	ldr	r3, [pc, #188]	; (8005114 <USBD_CDC_DeInit+0xfc>)
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	f003 020f 	and.w	r2, r3, #15
 800505e:	6879      	ldr	r1, [r7, #4]
 8005060:	4613      	mov	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	440b      	add	r3, r1
 800506a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800506e:	2200      	movs	r2, #0
 8005070:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005072:	4b29      	ldr	r3, [pc, #164]	; (8005118 <USBD_CDC_DeInit+0x100>)
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	4619      	mov	r1, r3
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f002 fa64 	bl	8007546 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800507e:	4b26      	ldr	r3, [pc, #152]	; (8005118 <USBD_CDC_DeInit+0x100>)
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	f003 020f 	and.w	r2, r3, #15
 8005086:	6879      	ldr	r1, [r7, #4]
 8005088:	4613      	mov	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	440b      	add	r3, r1
 8005092:	3324      	adds	r3, #36	; 0x24
 8005094:	2200      	movs	r2, #0
 8005096:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005098:	4b1f      	ldr	r3, [pc, #124]	; (8005118 <USBD_CDC_DeInit+0x100>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	f003 020f 	and.w	r2, r3, #15
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	4613      	mov	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	440b      	add	r3, r1
 80050ac:	3326      	adds	r3, #38	; 0x26
 80050ae:	2200      	movs	r2, #0
 80050b0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	32b0      	adds	r2, #176	; 0xb0
 80050bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d01f      	beq.n	8005104 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	33b0      	adds	r3, #176	; 0xb0
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	32b0      	adds	r2, #176	; 0xb0
 80050e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f002 fbb2 	bl	8007850 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	32b0      	adds	r2, #176	; 0xb0
 80050f6:	2100      	movs	r1, #0
 80050f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20000093 	.word	0x20000093
 8005114:	20000094 	.word	0x20000094
 8005118:	20000095 	.word	0x20000095

0800511c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	32b0      	adds	r2, #176	; 0xb0
 8005130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005134:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005136:	2300      	movs	r3, #0
 8005138:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800513a:	2300      	movs	r3, #0
 800513c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d101      	bne.n	800514c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005148:	2303      	movs	r3, #3
 800514a:	e0bf      	b.n	80052cc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005154:	2b00      	cmp	r3, #0
 8005156:	d050      	beq.n	80051fa <USBD_CDC_Setup+0xde>
 8005158:	2b20      	cmp	r3, #32
 800515a:	f040 80af 	bne.w	80052bc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	88db      	ldrh	r3, [r3, #6]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d03a      	beq.n	80051dc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	b25b      	sxtb	r3, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	da1b      	bge.n	80051a8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	33b0      	adds	r3, #176	; 0xb0
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005186:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005188:	683a      	ldr	r2, [r7, #0]
 800518a:	88d2      	ldrh	r2, [r2, #6]
 800518c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	88db      	ldrh	r3, [r3, #6]
 8005192:	2b07      	cmp	r3, #7
 8005194:	bf28      	it	cs
 8005196:	2307      	movcs	r3, #7
 8005198:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	89fa      	ldrh	r2, [r7, #14]
 800519e:	4619      	mov	r1, r3
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f001 fd6d 	bl	8006c80 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80051a6:	e090      	b.n	80052ca <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	785a      	ldrb	r2, [r3, #1]
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	88db      	ldrh	r3, [r3, #6]
 80051b6:	2b3f      	cmp	r3, #63	; 0x3f
 80051b8:	d803      	bhi.n	80051c2 <USBD_CDC_Setup+0xa6>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	88db      	ldrh	r3, [r3, #6]
 80051be:	b2da      	uxtb	r2, r3
 80051c0:	e000      	b.n	80051c4 <USBD_CDC_Setup+0xa8>
 80051c2:	2240      	movs	r2, #64	; 0x40
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80051ca:	6939      	ldr	r1, [r7, #16]
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80051d2:	461a      	mov	r2, r3
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f001 fd7f 	bl	8006cd8 <USBD_CtlPrepareRx>
      break;
 80051da:	e076      	b.n	80052ca <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	33b0      	adds	r3, #176	; 0xb0
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	7850      	ldrb	r0, [r2, #1]
 80051f2:	2200      	movs	r2, #0
 80051f4:	6839      	ldr	r1, [r7, #0]
 80051f6:	4798      	blx	r3
      break;
 80051f8:	e067      	b.n	80052ca <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	785b      	ldrb	r3, [r3, #1]
 80051fe:	2b0b      	cmp	r3, #11
 8005200:	d851      	bhi.n	80052a6 <USBD_CDC_Setup+0x18a>
 8005202:	a201      	add	r2, pc, #4	; (adr r2, 8005208 <USBD_CDC_Setup+0xec>)
 8005204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005208:	08005239 	.word	0x08005239
 800520c:	080052b5 	.word	0x080052b5
 8005210:	080052a7 	.word	0x080052a7
 8005214:	080052a7 	.word	0x080052a7
 8005218:	080052a7 	.word	0x080052a7
 800521c:	080052a7 	.word	0x080052a7
 8005220:	080052a7 	.word	0x080052a7
 8005224:	080052a7 	.word	0x080052a7
 8005228:	080052a7 	.word	0x080052a7
 800522c:	080052a7 	.word	0x080052a7
 8005230:	08005263 	.word	0x08005263
 8005234:	0800528d 	.word	0x0800528d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b03      	cmp	r3, #3
 8005242:	d107      	bne.n	8005254 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005244:	f107 030a 	add.w	r3, r7, #10
 8005248:	2202      	movs	r2, #2
 800524a:	4619      	mov	r1, r3
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f001 fd17 	bl	8006c80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005252:	e032      	b.n	80052ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005254:	6839      	ldr	r1, [r7, #0]
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f001 fca1 	bl	8006b9e <USBD_CtlError>
            ret = USBD_FAIL;
 800525c:	2303      	movs	r3, #3
 800525e:	75fb      	strb	r3, [r7, #23]
          break;
 8005260:	e02b      	b.n	80052ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b03      	cmp	r3, #3
 800526c:	d107      	bne.n	800527e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800526e:	f107 030d 	add.w	r3, r7, #13
 8005272:	2201      	movs	r2, #1
 8005274:	4619      	mov	r1, r3
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f001 fd02 	bl	8006c80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800527c:	e01d      	b.n	80052ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800527e:	6839      	ldr	r1, [r7, #0]
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f001 fc8c 	bl	8006b9e <USBD_CtlError>
            ret = USBD_FAIL;
 8005286:	2303      	movs	r3, #3
 8005288:	75fb      	strb	r3, [r7, #23]
          break;
 800528a:	e016      	b.n	80052ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b03      	cmp	r3, #3
 8005296:	d00f      	beq.n	80052b8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005298:	6839      	ldr	r1, [r7, #0]
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f001 fc7f 	bl	8006b9e <USBD_CtlError>
            ret = USBD_FAIL;
 80052a0:	2303      	movs	r3, #3
 80052a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80052a4:	e008      	b.n	80052b8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80052a6:	6839      	ldr	r1, [r7, #0]
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f001 fc78 	bl	8006b9e <USBD_CtlError>
          ret = USBD_FAIL;
 80052ae:	2303      	movs	r3, #3
 80052b0:	75fb      	strb	r3, [r7, #23]
          break;
 80052b2:	e002      	b.n	80052ba <USBD_CDC_Setup+0x19e>
          break;
 80052b4:	bf00      	nop
 80052b6:	e008      	b.n	80052ca <USBD_CDC_Setup+0x1ae>
          break;
 80052b8:	bf00      	nop
      }
      break;
 80052ba:	e006      	b.n	80052ca <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80052bc:	6839      	ldr	r1, [r7, #0]
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f001 fc6d 	bl	8006b9e <USBD_CtlError>
      ret = USBD_FAIL;
 80052c4:	2303      	movs	r3, #3
 80052c6:	75fb      	strb	r3, [r7, #23]
      break;
 80052c8:	bf00      	nop
  }

  return (uint8_t)ret;
 80052ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3718      	adds	r7, #24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	460b      	mov	r3, r1
 80052de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80052e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	32b0      	adds	r2, #176	; 0xb0
 80052f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e065      	b.n	80053ca <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	32b0      	adds	r2, #176	; 0xb0
 8005308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800530c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800530e:	78fb      	ldrb	r3, [r7, #3]
 8005310:	f003 020f 	and.w	r2, r3, #15
 8005314:	6879      	ldr	r1, [r7, #4]
 8005316:	4613      	mov	r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4413      	add	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	440b      	add	r3, r1
 8005320:	3318      	adds	r3, #24
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d02f      	beq.n	8005388 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005328:	78fb      	ldrb	r3, [r7, #3]
 800532a:	f003 020f 	and.w	r2, r3, #15
 800532e:	6879      	ldr	r1, [r7, #4]
 8005330:	4613      	mov	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	440b      	add	r3, r1
 800533a:	3318      	adds	r3, #24
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	78fb      	ldrb	r3, [r7, #3]
 8005340:	f003 010f 	and.w	r1, r3, #15
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	460b      	mov	r3, r1
 8005348:	00db      	lsls	r3, r3, #3
 800534a:	440b      	add	r3, r1
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4403      	add	r3, r0
 8005350:	3348      	adds	r3, #72	; 0x48
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	fbb2 f1f3 	udiv	r1, r2, r3
 8005358:	fb01 f303 	mul.w	r3, r1, r3
 800535c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800535e:	2b00      	cmp	r3, #0
 8005360:	d112      	bne.n	8005388 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005362:	78fb      	ldrb	r3, [r7, #3]
 8005364:	f003 020f 	and.w	r2, r3, #15
 8005368:	6879      	ldr	r1, [r7, #4]
 800536a:	4613      	mov	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	440b      	add	r3, r1
 8005374:	3318      	adds	r3, #24
 8005376:	2200      	movs	r2, #0
 8005378:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800537a:	78f9      	ldrb	r1, [r7, #3]
 800537c:	2300      	movs	r3, #0
 800537e:	2200      	movs	r2, #0
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f002 f988 	bl	8007696 <USBD_LL_Transmit>
 8005386:	e01f      	b.n	80053c8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2200      	movs	r2, #0
 800538c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	33b0      	adds	r3, #176	; 0xb0
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4413      	add	r3, r2
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d010      	beq.n	80053c8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	33b0      	adds	r3, #176	; 0xb0
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80053c4:	78fa      	ldrb	r2, [r7, #3]
 80053c6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b084      	sub	sp, #16
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	460b      	mov	r3, r1
 80053dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	32b0      	adds	r2, #176	; 0xb0
 80053e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053ec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	32b0      	adds	r2, #176	; 0xb0
 80053f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005400:	2303      	movs	r3, #3
 8005402:	e01a      	b.n	800543a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005404:	78fb      	ldrb	r3, [r7, #3]
 8005406:	4619      	mov	r1, r3
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f002 f986 	bl	800771a <USBD_LL_GetRxDataSize>
 800540e:	4602      	mov	r2, r0
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	33b0      	adds	r3, #176	; 0xb0
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005434:	4611      	mov	r1, r2
 8005436:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b084      	sub	sp, #16
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	32b0      	adds	r2, #176	; 0xb0
 8005454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005458:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005460:	2303      	movs	r3, #3
 8005462:	e025      	b.n	80054b0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	33b0      	adds	r3, #176	; 0xb0
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d01a      	beq.n	80054ae <USBD_CDC_EP0_RxReady+0x6c>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800547e:	2bff      	cmp	r3, #255	; 0xff
 8005480:	d015      	beq.n	80054ae <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	33b0      	adds	r3, #176	; 0xb0
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4413      	add	r3, r2
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800549a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80054a2:	b292      	uxth	r2, r2
 80054a4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	22ff      	movs	r2, #255	; 0xff
 80054aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80054c0:	2182      	movs	r1, #130	; 0x82
 80054c2:	4818      	ldr	r0, [pc, #96]	; (8005524 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80054c4:	f000 fd09 	bl	8005eda <USBD_GetEpDesc>
 80054c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80054ca:	2101      	movs	r1, #1
 80054cc:	4815      	ldr	r0, [pc, #84]	; (8005524 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80054ce:	f000 fd04 	bl	8005eda <USBD_GetEpDesc>
 80054d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80054d4:	2181      	movs	r1, #129	; 0x81
 80054d6:	4813      	ldr	r0, [pc, #76]	; (8005524 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80054d8:	f000 fcff 	bl	8005eda <USBD_GetEpDesc>
 80054dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2210      	movs	r2, #16
 80054e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d006      	beq.n	80054fe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054f8:	711a      	strb	r2, [r3, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d006      	beq.n	8005512 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800550c:	711a      	strb	r2, [r3, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2243      	movs	r2, #67	; 0x43
 8005516:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005518:	4b02      	ldr	r3, [pc, #8]	; (8005524 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800551a:	4618      	mov	r0, r3
 800551c:	3718      	adds	r7, #24
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	20000050 	.word	0x20000050

08005528 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005530:	2182      	movs	r1, #130	; 0x82
 8005532:	4818      	ldr	r0, [pc, #96]	; (8005594 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005534:	f000 fcd1 	bl	8005eda <USBD_GetEpDesc>
 8005538:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800553a:	2101      	movs	r1, #1
 800553c:	4815      	ldr	r0, [pc, #84]	; (8005594 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800553e:	f000 fccc 	bl	8005eda <USBD_GetEpDesc>
 8005542:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005544:	2181      	movs	r1, #129	; 0x81
 8005546:	4813      	ldr	r0, [pc, #76]	; (8005594 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005548:	f000 fcc7 	bl	8005eda <USBD_GetEpDesc>
 800554c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d002      	beq.n	800555a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	2210      	movs	r2, #16
 8005558:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d006      	beq.n	800556e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	2200      	movs	r2, #0
 8005564:	711a      	strb	r2, [r3, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f042 0202 	orr.w	r2, r2, #2
 800556c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d006      	beq.n	8005582 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	711a      	strb	r2, [r3, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f042 0202 	orr.w	r2, r2, #2
 8005580:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2243      	movs	r2, #67	; 0x43
 8005586:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005588:	4b02      	ldr	r3, [pc, #8]	; (8005594 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800558a:	4618      	mov	r0, r3
 800558c:	3718      	adds	r7, #24
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	20000050 	.word	0x20000050

08005598 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80055a0:	2182      	movs	r1, #130	; 0x82
 80055a2:	4818      	ldr	r0, [pc, #96]	; (8005604 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80055a4:	f000 fc99 	bl	8005eda <USBD_GetEpDesc>
 80055a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80055aa:	2101      	movs	r1, #1
 80055ac:	4815      	ldr	r0, [pc, #84]	; (8005604 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80055ae:	f000 fc94 	bl	8005eda <USBD_GetEpDesc>
 80055b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80055b4:	2181      	movs	r1, #129	; 0x81
 80055b6:	4813      	ldr	r0, [pc, #76]	; (8005604 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80055b8:	f000 fc8f 	bl	8005eda <USBD_GetEpDesc>
 80055bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d002      	beq.n	80055ca <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	2210      	movs	r2, #16
 80055c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d006      	beq.n	80055de <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055d8:	711a      	strb	r2, [r3, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d006      	beq.n	80055f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055ec:	711a      	strb	r2, [r3, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2243      	movs	r2, #67	; 0x43
 80055f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80055f8:	4b02      	ldr	r3, [pc, #8]	; (8005604 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3718      	adds	r7, #24
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	20000050 	.word	0x20000050

08005608 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	220a      	movs	r2, #10
 8005614:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005616:	4b03      	ldr	r3, [pc, #12]	; (8005624 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005618:	4618      	mov	r0, r3
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr
 8005624:	2000000c 	.word	0x2000000c

08005628 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005638:	2303      	movs	r3, #3
 800563a:	e009      	b.n	8005650 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	33b0      	adds	r3, #176	; 0xb0
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	4413      	add	r3, r2
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	32b0      	adds	r2, #176	; 0xb0
 8005672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005676:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800567e:	2303      	movs	r3, #3
 8005680:	e008      	b.n	8005694 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	371c      	adds	r7, #28
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	32b0      	adds	r2, #176	; 0xb0
 80056b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e004      	b.n	80056ce <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
	...

080056dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	32b0      	adds	r2, #176	; 0xb0
 80056ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056f2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	32b0      	adds	r2, #176	; 0xb0
 80056fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005706:	2303      	movs	r3, #3
 8005708:	e018      	b.n	800573c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	7c1b      	ldrb	r3, [r3, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10a      	bne.n	8005728 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005712:	4b0c      	ldr	r3, [pc, #48]	; (8005744 <USBD_CDC_ReceivePacket+0x68>)
 8005714:	7819      	ldrb	r1, [r3, #0]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800571c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f001 ffd9 	bl	80076d8 <USBD_LL_PrepareReceive>
 8005726:	e008      	b.n	800573a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005728:	4b06      	ldr	r3, [pc, #24]	; (8005744 <USBD_CDC_ReceivePacket+0x68>)
 800572a:	7819      	ldrb	r1, [r3, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005732:	2340      	movs	r3, #64	; 0x40
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f001 ffcf 	bl	80076d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	20000094 	.word	0x20000094

08005748 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	4613      	mov	r3, r2
 8005754:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800575c:	2303      	movs	r3, #3
 800575e:	e01f      	b.n	80057a0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	79fa      	ldrb	r2, [r7, #7]
 8005792:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f001 fe49 	bl	800742c <USBD_LL_Init>
 800579a:	4603      	mov	r3, r0
 800579c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800579e:	7dfb      	ldrb	r3, [r7, #23]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3718      	adds	r7, #24
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80057bc:	2303      	movs	r3, #3
 80057be:	e025      	b.n	800580c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	32ae      	adds	r2, #174	; 0xae
 80057d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00f      	beq.n	80057fc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	32ae      	adds	r2, #174	; 0xae
 80057e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ec:	f107 020e 	add.w	r2, r7, #14
 80057f0:	4610      	mov	r0, r2
 80057f2:	4798      	blx	r3
 80057f4:	4602      	mov	r2, r0
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005802:	1c5a      	adds	r2, r3, #1
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f001 fe51 	bl	80074c4 <USBD_LL_Start>
 8005822:	4603      	mov	r3, r0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005834:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005836:	4618      	mov	r0, r3
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b084      	sub	sp, #16
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
 800584a:	460b      	mov	r3, r1
 800584c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800584e:	2300      	movs	r3, #0
 8005850:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005858:	2b00      	cmp	r3, #0
 800585a:	d009      	beq.n	8005870 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	78fa      	ldrb	r2, [r7, #3]
 8005866:	4611      	mov	r1, r2
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	4798      	blx	r3
 800586c:	4603      	mov	r3, r0
 800586e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005870:	7bfb      	ldrb	r3, [r7, #15]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b084      	sub	sp, #16
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	460b      	mov	r3, r1
 8005884:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005886:	2300      	movs	r3, #0
 8005888:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	78fa      	ldrb	r2, [r7, #3]
 8005894:	4611      	mov	r1, r2
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	4798      	blx	r3
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80058a0:	2303      	movs	r3, #3
 80058a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b084      	sub	sp, #16
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
 80058b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80058be:	6839      	ldr	r1, [r7, #0]
 80058c0:	4618      	mov	r0, r3
 80058c2:	f001 f932 	bl	8006b2a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80058d4:	461a      	mov	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80058e2:	f003 031f 	and.w	r3, r3, #31
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d01a      	beq.n	8005920 <USBD_LL_SetupStage+0x72>
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d822      	bhi.n	8005934 <USBD_LL_SetupStage+0x86>
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d002      	beq.n	80058f8 <USBD_LL_SetupStage+0x4a>
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d00a      	beq.n	800590c <USBD_LL_SetupStage+0x5e>
 80058f6:	e01d      	b.n	8005934 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80058fe:	4619      	mov	r1, r3
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fb5f 	bl	8005fc4 <USBD_StdDevReq>
 8005906:	4603      	mov	r3, r0
 8005908:	73fb      	strb	r3, [r7, #15]
      break;
 800590a:	e020      	b.n	800594e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005912:	4619      	mov	r1, r3
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 fbc7 	bl	80060a8 <USBD_StdItfReq>
 800591a:	4603      	mov	r3, r0
 800591c:	73fb      	strb	r3, [r7, #15]
      break;
 800591e:	e016      	b.n	800594e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005926:	4619      	mov	r1, r3
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 fc29 	bl	8006180 <USBD_StdEPReq>
 800592e:	4603      	mov	r3, r0
 8005930:	73fb      	strb	r3, [r7, #15]
      break;
 8005932:	e00c      	b.n	800594e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800593a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800593e:	b2db      	uxtb	r3, r3
 8005940:	4619      	mov	r1, r3
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f001 fe1e 	bl	8007584 <USBD_LL_StallEP>
 8005948:	4603      	mov	r3, r0
 800594a:	73fb      	strb	r3, [r7, #15]
      break;
 800594c:	bf00      	nop
  }

  return ret;
 800594e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	460b      	mov	r3, r1
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005966:	2300      	movs	r3, #0
 8005968:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800596a:	7afb      	ldrb	r3, [r7, #11]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d16e      	bne.n	8005a4e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005976:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800597e:	2b03      	cmp	r3, #3
 8005980:	f040 8098 	bne.w	8005ab4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	429a      	cmp	r2, r3
 800598e:	d913      	bls.n	80059b8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	689a      	ldr	r2, [r3, #8]
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	1ad2      	subs	r2, r2, r3
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	68da      	ldr	r2, [r3, #12]
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	4293      	cmp	r3, r2
 80059a8:	bf28      	it	cs
 80059aa:	4613      	movcs	r3, r2
 80059ac:	461a      	mov	r2, r3
 80059ae:	6879      	ldr	r1, [r7, #4]
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f001 f9ae 	bl	8006d12 <USBD_CtlContinueRx>
 80059b6:	e07d      	b.n	8005ab4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80059be:	f003 031f 	and.w	r3, r3, #31
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d014      	beq.n	80059f0 <USBD_LL_DataOutStage+0x98>
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d81d      	bhi.n	8005a06 <USBD_LL_DataOutStage+0xae>
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d002      	beq.n	80059d4 <USBD_LL_DataOutStage+0x7c>
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d003      	beq.n	80059da <USBD_LL_DataOutStage+0x82>
 80059d2:	e018      	b.n	8005a06 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	75bb      	strb	r3, [r7, #22]
            break;
 80059d8:	e018      	b.n	8005a0c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	4619      	mov	r1, r3
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f000 fa5e 	bl	8005ea6 <USBD_CoreFindIF>
 80059ea:	4603      	mov	r3, r0
 80059ec:	75bb      	strb	r3, [r7, #22]
            break;
 80059ee:	e00d      	b.n	8005a0c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	4619      	mov	r1, r3
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f000 fa60 	bl	8005ec0 <USBD_CoreFindEP>
 8005a00:	4603      	mov	r3, r0
 8005a02:	75bb      	strb	r3, [r7, #22]
            break;
 8005a04:	e002      	b.n	8005a0c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005a06:	2300      	movs	r3, #0
 8005a08:	75bb      	strb	r3, [r7, #22]
            break;
 8005a0a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005a0c:	7dbb      	ldrb	r3, [r7, #22]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d119      	bne.n	8005a46 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b03      	cmp	r3, #3
 8005a1c:	d113      	bne.n	8005a46 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005a1e:	7dba      	ldrb	r2, [r7, #22]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	32ae      	adds	r2, #174	; 0xae
 8005a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00b      	beq.n	8005a46 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005a2e:	7dba      	ldrb	r2, [r7, #22]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005a36:	7dba      	ldrb	r2, [r7, #22]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	32ae      	adds	r2, #174	; 0xae
 8005a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	f001 f974 	bl	8006d34 <USBD_CtlSendStatus>
 8005a4c:	e032      	b.n	8005ab4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005a4e:	7afb      	ldrb	r3, [r7, #11]
 8005a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	4619      	mov	r1, r3
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f000 fa31 	bl	8005ec0 <USBD_CoreFindEP>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a62:	7dbb      	ldrb	r3, [r7, #22]
 8005a64:	2bff      	cmp	r3, #255	; 0xff
 8005a66:	d025      	beq.n	8005ab4 <USBD_LL_DataOutStage+0x15c>
 8005a68:	7dbb      	ldrb	r3, [r7, #22]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d122      	bne.n	8005ab4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b03      	cmp	r3, #3
 8005a78:	d117      	bne.n	8005aaa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005a7a:	7dba      	ldrb	r2, [r7, #22]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	32ae      	adds	r2, #174	; 0xae
 8005a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00f      	beq.n	8005aaa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005a8a:	7dba      	ldrb	r2, [r7, #22]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005a92:	7dba      	ldrb	r2, [r7, #22]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	32ae      	adds	r2, #174	; 0xae
 8005a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	7afa      	ldrb	r2, [r7, #11]
 8005aa0:	4611      	mov	r1, r2
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	4798      	blx	r3
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005aaa:	7dfb      	ldrb	r3, [r7, #23]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d001      	beq.n	8005ab4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005ab0:	7dfb      	ldrb	r3, [r7, #23]
 8005ab2:	e000      	b.n	8005ab6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3718      	adds	r7, #24
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b086      	sub	sp, #24
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	60f8      	str	r0, [r7, #12]
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	607a      	str	r2, [r7, #4]
 8005aca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005acc:	7afb      	ldrb	r3, [r7, #11]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d16f      	bne.n	8005bb2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	3314      	adds	r3, #20
 8005ad6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d15a      	bne.n	8005b98 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	689a      	ldr	r2, [r3, #8]
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d914      	bls.n	8005b18 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	689a      	ldr	r2, [r3, #8]
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	1ad2      	subs	r2, r2, r3
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	461a      	mov	r2, r3
 8005b02:	6879      	ldr	r1, [r7, #4]
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f001 f8d6 	bl	8006cb6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	2100      	movs	r1, #0
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f001 fde1 	bl	80076d8 <USBD_LL_PrepareReceive>
 8005b16:	e03f      	b.n	8005b98 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	68da      	ldr	r2, [r3, #12]
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d11c      	bne.n	8005b5e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d316      	bcc.n	8005b5e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d20f      	bcs.n	8005b5e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005b3e:	2200      	movs	r2, #0
 8005b40:	2100      	movs	r1, #0
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f001 f8b7 	bl	8006cb6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b50:	2300      	movs	r3, #0
 8005b52:	2200      	movs	r2, #0
 8005b54:	2100      	movs	r1, #0
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f001 fdbe 	bl	80076d8 <USBD_LL_PrepareReceive>
 8005b5c:	e01c      	b.n	8005b98 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b03      	cmp	r3, #3
 8005b68:	d10f      	bne.n	8005b8a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d009      	beq.n	8005b8a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b8a:	2180      	movs	r1, #128	; 0x80
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f001 fcf9 	bl	8007584 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f001 f8e1 	bl	8006d5a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d03a      	beq.n	8005c18 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f7ff fe42 	bl	800582c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005bb0:	e032      	b.n	8005c18 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005bb2:	7afb      	ldrb	r3, [r7, #11]
 8005bb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	4619      	mov	r1, r3
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f000 f97f 	bl	8005ec0 <USBD_CoreFindEP>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005bc6:	7dfb      	ldrb	r3, [r7, #23]
 8005bc8:	2bff      	cmp	r3, #255	; 0xff
 8005bca:	d025      	beq.n	8005c18 <USBD_LL_DataInStage+0x15a>
 8005bcc:	7dfb      	ldrb	r3, [r7, #23]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d122      	bne.n	8005c18 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b03      	cmp	r3, #3
 8005bdc:	d11c      	bne.n	8005c18 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005bde:	7dfa      	ldrb	r2, [r7, #23]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	32ae      	adds	r2, #174	; 0xae
 8005be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d014      	beq.n	8005c18 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005bee:	7dfa      	ldrb	r2, [r7, #23]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005bf6:	7dfa      	ldrb	r2, [r7, #23]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	32ae      	adds	r2, #174	; 0xae
 8005bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	7afa      	ldrb	r2, [r7, #11]
 8005c04:	4611      	mov	r1, r2
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	4798      	blx	r3
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005c0e:	7dbb      	ldrb	r3, [r7, #22]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d001      	beq.n	8005c18 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005c14:	7dbb      	ldrb	r3, [r7, #22]
 8005c16:	e000      	b.n	8005c1a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3718      	adds	r7, #24
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b084      	sub	sp, #16
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d014      	beq.n	8005c88 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00e      	beq.n	8005c88 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	6852      	ldr	r2, [r2, #4]
 8005c76:	b2d2      	uxtb	r2, r2
 8005c78:	4611      	mov	r1, r2
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	4798      	blx	r3
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d001      	beq.n	8005c88 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005c84:	2303      	movs	r3, #3
 8005c86:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c88:	2340      	movs	r3, #64	; 0x40
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f001 fc33 	bl	80074fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2240      	movs	r2, #64	; 0x40
 8005ca0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ca4:	2340      	movs	r3, #64	; 0x40
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	2180      	movs	r1, #128	; 0x80
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f001 fc25 	bl	80074fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2240      	movs	r2, #64	; 0x40
 8005cba:	621a      	str	r2, [r3, #32]

  return ret;
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	460b      	mov	r3, r1
 8005cd0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	78fa      	ldrb	r2, [r7, #3]
 8005cd6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr

08005ce6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b083      	sub	sp, #12
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2204      	movs	r2, #4
 8005d00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b083      	sub	sp, #12
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b04      	cmp	r3, #4
 8005d24:	d106      	bne.n	8005d34 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b082      	sub	sp, #8
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b03      	cmp	r3, #3
 8005d54:	d110      	bne.n	8005d78 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00b      	beq.n	8005d78 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d66:	69db      	ldr	r3, [r3, #28]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d005      	beq.n	8005d78 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d72:	69db      	ldr	r3, [r3, #28]
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b082      	sub	sp, #8
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	32ae      	adds	r2, #174	; 0xae
 8005d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e01c      	b.n	8005dde <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d115      	bne.n	8005ddc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	32ae      	adds	r2, #174	; 0xae
 8005dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00b      	beq.n	8005ddc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	32ae      	adds	r2, #174	; 0xae
 8005dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	78fa      	ldrb	r2, [r7, #3]
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3708      	adds	r7, #8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b082      	sub	sp, #8
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
 8005dee:	460b      	mov	r3, r1
 8005df0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	32ae      	adds	r2, #174	; 0xae
 8005dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e01c      	b.n	8005e42 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b03      	cmp	r3, #3
 8005e12:	d115      	bne.n	8005e40 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	32ae      	adds	r2, #174	; 0xae
 8005e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00b      	beq.n	8005e40 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	32ae      	adds	r2, #174	; 0xae
 8005e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	78fa      	ldrb	r2, [r7, #3]
 8005e3a:	4611      	mov	r1, r2
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b083      	sub	sp, #12
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00e      	beq.n	8005e9c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	6852      	ldr	r2, [r2, #4]
 8005e8a:	b2d2      	uxtb	r2, r2
 8005e8c:	4611      	mov	r1, r2
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	4798      	blx	r3
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d001      	beq.n	8005e9c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
 8005eae:	460b      	mov	r3, r1
 8005eb0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005eb2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	460b      	mov	r3, r1
 8005eca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005ecc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b086      	sub	sp, #24
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	885b      	ldrh	r3, [r3, #2]
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d920      	bls.n	8005f44 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005f0a:	e013      	b.n	8005f34 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005f0c:	f107 030a 	add.w	r3, r7, #10
 8005f10:	4619      	mov	r1, r3
 8005f12:	6978      	ldr	r0, [r7, #20]
 8005f14:	f000 f81b 	bl	8005f4e <USBD_GetNextDesc>
 8005f18:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	785b      	ldrb	r3, [r3, #1]
 8005f1e:	2b05      	cmp	r3, #5
 8005f20:	d108      	bne.n	8005f34 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	789b      	ldrb	r3, [r3, #2]
 8005f2a:	78fa      	ldrb	r2, [r7, #3]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d008      	beq.n	8005f42 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005f30:	2300      	movs	r3, #0
 8005f32:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	885b      	ldrh	r3, [r3, #2]
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	897b      	ldrh	r3, [r7, #10]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d8e5      	bhi.n	8005f0c <USBD_GetEpDesc+0x32>
 8005f40:	e000      	b.n	8005f44 <USBD_GetEpDesc+0x6a>
          break;
 8005f42:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005f44:	693b      	ldr	r3, [r7, #16]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3718      	adds	r7, #24
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b085      	sub	sp, #20
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
 8005f56:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	881a      	ldrh	r2, [r3, #0]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	4413      	add	r3, r2
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	461a      	mov	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4413      	add	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b087      	sub	sp, #28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005fa6:	8a3b      	ldrh	r3, [r7, #16]
 8005fa8:	021b      	lsls	r3, r3, #8
 8005faa:	b21a      	sxth	r2, r3
 8005fac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	b21b      	sxth	r3, r3
 8005fb4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005fb6:	89fb      	ldrh	r3, [r7, #14]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	371c      	adds	r7, #28
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fda:	2b40      	cmp	r3, #64	; 0x40
 8005fdc:	d005      	beq.n	8005fea <USBD_StdDevReq+0x26>
 8005fde:	2b40      	cmp	r3, #64	; 0x40
 8005fe0:	d857      	bhi.n	8006092 <USBD_StdDevReq+0xce>
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00f      	beq.n	8006006 <USBD_StdDevReq+0x42>
 8005fe6:	2b20      	cmp	r3, #32
 8005fe8:	d153      	bne.n	8006092 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	32ae      	adds	r2, #174	; 0xae
 8005ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	6839      	ldr	r1, [r7, #0]
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	4798      	blx	r3
 8006000:	4603      	mov	r3, r0
 8006002:	73fb      	strb	r3, [r7, #15]
      break;
 8006004:	e04a      	b.n	800609c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	785b      	ldrb	r3, [r3, #1]
 800600a:	2b09      	cmp	r3, #9
 800600c:	d83b      	bhi.n	8006086 <USBD_StdDevReq+0xc2>
 800600e:	a201      	add	r2, pc, #4	; (adr r2, 8006014 <USBD_StdDevReq+0x50>)
 8006010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006014:	08006069 	.word	0x08006069
 8006018:	0800607d 	.word	0x0800607d
 800601c:	08006087 	.word	0x08006087
 8006020:	08006073 	.word	0x08006073
 8006024:	08006087 	.word	0x08006087
 8006028:	08006047 	.word	0x08006047
 800602c:	0800603d 	.word	0x0800603d
 8006030:	08006087 	.word	0x08006087
 8006034:	0800605f 	.word	0x0800605f
 8006038:	08006051 	.word	0x08006051
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800603c:	6839      	ldr	r1, [r7, #0]
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 fa3c 	bl	80064bc <USBD_GetDescriptor>
          break;
 8006044:	e024      	b.n	8006090 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006046:	6839      	ldr	r1, [r7, #0]
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fbcb 	bl	80067e4 <USBD_SetAddress>
          break;
 800604e:	e01f      	b.n	8006090 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006050:	6839      	ldr	r1, [r7, #0]
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fc0a 	bl	800686c <USBD_SetConfig>
 8006058:	4603      	mov	r3, r0
 800605a:	73fb      	strb	r3, [r7, #15]
          break;
 800605c:	e018      	b.n	8006090 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800605e:	6839      	ldr	r1, [r7, #0]
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 fcad 	bl	80069c0 <USBD_GetConfig>
          break;
 8006066:	e013      	b.n	8006090 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006068:	6839      	ldr	r1, [r7, #0]
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 fcde 	bl	8006a2c <USBD_GetStatus>
          break;
 8006070:	e00e      	b.n	8006090 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006072:	6839      	ldr	r1, [r7, #0]
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 fd0d 	bl	8006a94 <USBD_SetFeature>
          break;
 800607a:	e009      	b.n	8006090 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800607c:	6839      	ldr	r1, [r7, #0]
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fd31 	bl	8006ae6 <USBD_ClrFeature>
          break;
 8006084:	e004      	b.n	8006090 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006086:	6839      	ldr	r1, [r7, #0]
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 fd88 	bl	8006b9e <USBD_CtlError>
          break;
 800608e:	bf00      	nop
      }
      break;
 8006090:	e004      	b.n	800609c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006092:	6839      	ldr	r1, [r7, #0]
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 fd82 	bl	8006b9e <USBD_CtlError>
      break;
 800609a:	bf00      	nop
  }

  return ret;
 800609c:	7bfb      	ldrb	r3, [r7, #15]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop

080060a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80060b2:	2300      	movs	r3, #0
 80060b4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060be:	2b40      	cmp	r3, #64	; 0x40
 80060c0:	d005      	beq.n	80060ce <USBD_StdItfReq+0x26>
 80060c2:	2b40      	cmp	r3, #64	; 0x40
 80060c4:	d852      	bhi.n	800616c <USBD_StdItfReq+0xc4>
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d001      	beq.n	80060ce <USBD_StdItfReq+0x26>
 80060ca:	2b20      	cmp	r3, #32
 80060cc:	d14e      	bne.n	800616c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	3b01      	subs	r3, #1
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d840      	bhi.n	800615e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	889b      	ldrh	r3, [r3, #4]
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d836      	bhi.n	8006154 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	889b      	ldrh	r3, [r3, #4]
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	4619      	mov	r1, r3
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7ff fed9 	bl	8005ea6 <USBD_CoreFindIF>
 80060f4:	4603      	mov	r3, r0
 80060f6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80060f8:	7bbb      	ldrb	r3, [r7, #14]
 80060fa:	2bff      	cmp	r3, #255	; 0xff
 80060fc:	d01d      	beq.n	800613a <USBD_StdItfReq+0x92>
 80060fe:	7bbb      	ldrb	r3, [r7, #14]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d11a      	bne.n	800613a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006104:	7bba      	ldrb	r2, [r7, #14]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	32ae      	adds	r2, #174	; 0xae
 800610a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00f      	beq.n	8006134 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006114:	7bba      	ldrb	r2, [r7, #14]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800611c:	7bba      	ldrb	r2, [r7, #14]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	32ae      	adds	r2, #174	; 0xae
 8006122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	6839      	ldr	r1, [r7, #0]
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	4798      	blx	r3
 800612e:	4603      	mov	r3, r0
 8006130:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006132:	e004      	b.n	800613e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006134:	2303      	movs	r3, #3
 8006136:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006138:	e001      	b.n	800613e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800613a:	2303      	movs	r3, #3
 800613c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	88db      	ldrh	r3, [r3, #6]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d110      	bne.n	8006168 <USBD_StdItfReq+0xc0>
 8006146:	7bfb      	ldrb	r3, [r7, #15]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10d      	bne.n	8006168 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 fdf1 	bl	8006d34 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006152:	e009      	b.n	8006168 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006154:	6839      	ldr	r1, [r7, #0]
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fd21 	bl	8006b9e <USBD_CtlError>
          break;
 800615c:	e004      	b.n	8006168 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800615e:	6839      	ldr	r1, [r7, #0]
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 fd1c 	bl	8006b9e <USBD_CtlError>
          break;
 8006166:	e000      	b.n	800616a <USBD_StdItfReq+0xc2>
          break;
 8006168:	bf00      	nop
      }
      break;
 800616a:	e004      	b.n	8006176 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800616c:	6839      	ldr	r1, [r7, #0]
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fd15 	bl	8006b9e <USBD_CtlError>
      break;
 8006174:	bf00      	nop
  }

  return ret;
 8006176:	7bfb      	ldrb	r3, [r7, #15]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800618a:	2300      	movs	r3, #0
 800618c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	889b      	ldrh	r3, [r3, #4]
 8006192:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800619c:	2b40      	cmp	r3, #64	; 0x40
 800619e:	d007      	beq.n	80061b0 <USBD_StdEPReq+0x30>
 80061a0:	2b40      	cmp	r3, #64	; 0x40
 80061a2:	f200 817f 	bhi.w	80064a4 <USBD_StdEPReq+0x324>
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d02a      	beq.n	8006200 <USBD_StdEPReq+0x80>
 80061aa:	2b20      	cmp	r3, #32
 80061ac:	f040 817a 	bne.w	80064a4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80061b0:	7bbb      	ldrb	r3, [r7, #14]
 80061b2:	4619      	mov	r1, r3
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f7ff fe83 	bl	8005ec0 <USBD_CoreFindEP>
 80061ba:	4603      	mov	r3, r0
 80061bc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80061be:	7b7b      	ldrb	r3, [r7, #13]
 80061c0:	2bff      	cmp	r3, #255	; 0xff
 80061c2:	f000 8174 	beq.w	80064ae <USBD_StdEPReq+0x32e>
 80061c6:	7b7b      	ldrb	r3, [r7, #13]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f040 8170 	bne.w	80064ae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80061ce:	7b7a      	ldrb	r2, [r7, #13]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80061d6:	7b7a      	ldrb	r2, [r7, #13]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	32ae      	adds	r2, #174	; 0xae
 80061dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f000 8163 	beq.w	80064ae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80061e8:	7b7a      	ldrb	r2, [r7, #13]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	32ae      	adds	r2, #174	; 0xae
 80061ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	6839      	ldr	r1, [r7, #0]
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	4798      	blx	r3
 80061fa:	4603      	mov	r3, r0
 80061fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80061fe:	e156      	b.n	80064ae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	785b      	ldrb	r3, [r3, #1]
 8006204:	2b03      	cmp	r3, #3
 8006206:	d008      	beq.n	800621a <USBD_StdEPReq+0x9a>
 8006208:	2b03      	cmp	r3, #3
 800620a:	f300 8145 	bgt.w	8006498 <USBD_StdEPReq+0x318>
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 809b 	beq.w	800634a <USBD_StdEPReq+0x1ca>
 8006214:	2b01      	cmp	r3, #1
 8006216:	d03c      	beq.n	8006292 <USBD_StdEPReq+0x112>
 8006218:	e13e      	b.n	8006498 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b02      	cmp	r3, #2
 8006224:	d002      	beq.n	800622c <USBD_StdEPReq+0xac>
 8006226:	2b03      	cmp	r3, #3
 8006228:	d016      	beq.n	8006258 <USBD_StdEPReq+0xd8>
 800622a:	e02c      	b.n	8006286 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800622c:	7bbb      	ldrb	r3, [r7, #14]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00d      	beq.n	800624e <USBD_StdEPReq+0xce>
 8006232:	7bbb      	ldrb	r3, [r7, #14]
 8006234:	2b80      	cmp	r3, #128	; 0x80
 8006236:	d00a      	beq.n	800624e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006238:	7bbb      	ldrb	r3, [r7, #14]
 800623a:	4619      	mov	r1, r3
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f001 f9a1 	bl	8007584 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006242:	2180      	movs	r1, #128	; 0x80
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f001 f99d 	bl	8007584 <USBD_LL_StallEP>
 800624a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800624c:	e020      	b.n	8006290 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800624e:	6839      	ldr	r1, [r7, #0]
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fca4 	bl	8006b9e <USBD_CtlError>
              break;
 8006256:	e01b      	b.n	8006290 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	885b      	ldrh	r3, [r3, #2]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10e      	bne.n	800627e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006260:	7bbb      	ldrb	r3, [r7, #14]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00b      	beq.n	800627e <USBD_StdEPReq+0xfe>
 8006266:	7bbb      	ldrb	r3, [r7, #14]
 8006268:	2b80      	cmp	r3, #128	; 0x80
 800626a:	d008      	beq.n	800627e <USBD_StdEPReq+0xfe>
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	88db      	ldrh	r3, [r3, #6]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d104      	bne.n	800627e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006274:	7bbb      	ldrb	r3, [r7, #14]
 8006276:	4619      	mov	r1, r3
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f001 f983 	bl	8007584 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 fd58 	bl	8006d34 <USBD_CtlSendStatus>

              break;
 8006284:	e004      	b.n	8006290 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006286:	6839      	ldr	r1, [r7, #0]
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 fc88 	bl	8006b9e <USBD_CtlError>
              break;
 800628e:	bf00      	nop
          }
          break;
 8006290:	e107      	b.n	80064a2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b02      	cmp	r3, #2
 800629c:	d002      	beq.n	80062a4 <USBD_StdEPReq+0x124>
 800629e:	2b03      	cmp	r3, #3
 80062a0:	d016      	beq.n	80062d0 <USBD_StdEPReq+0x150>
 80062a2:	e04b      	b.n	800633c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062a4:	7bbb      	ldrb	r3, [r7, #14]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00d      	beq.n	80062c6 <USBD_StdEPReq+0x146>
 80062aa:	7bbb      	ldrb	r3, [r7, #14]
 80062ac:	2b80      	cmp	r3, #128	; 0x80
 80062ae:	d00a      	beq.n	80062c6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80062b0:	7bbb      	ldrb	r3, [r7, #14]
 80062b2:	4619      	mov	r1, r3
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f001 f965 	bl	8007584 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80062ba:	2180      	movs	r1, #128	; 0x80
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f001 f961 	bl	8007584 <USBD_LL_StallEP>
 80062c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80062c4:	e040      	b.n	8006348 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80062c6:	6839      	ldr	r1, [r7, #0]
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 fc68 	bl	8006b9e <USBD_CtlError>
              break;
 80062ce:	e03b      	b.n	8006348 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	885b      	ldrh	r3, [r3, #2]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d136      	bne.n	8006346 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80062d8:	7bbb      	ldrb	r3, [r7, #14]
 80062da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d004      	beq.n	80062ec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80062e2:	7bbb      	ldrb	r3, [r7, #14]
 80062e4:	4619      	mov	r1, r3
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f001 f96b 	bl	80075c2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 fd21 	bl	8006d34 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80062f2:	7bbb      	ldrb	r3, [r7, #14]
 80062f4:	4619      	mov	r1, r3
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7ff fde2 	bl	8005ec0 <USBD_CoreFindEP>
 80062fc:	4603      	mov	r3, r0
 80062fe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006300:	7b7b      	ldrb	r3, [r7, #13]
 8006302:	2bff      	cmp	r3, #255	; 0xff
 8006304:	d01f      	beq.n	8006346 <USBD_StdEPReq+0x1c6>
 8006306:	7b7b      	ldrb	r3, [r7, #13]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d11c      	bne.n	8006346 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800630c:	7b7a      	ldrb	r2, [r7, #13]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006314:	7b7a      	ldrb	r2, [r7, #13]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	32ae      	adds	r2, #174	; 0xae
 800631a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d010      	beq.n	8006346 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006324:	7b7a      	ldrb	r2, [r7, #13]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	32ae      	adds	r2, #174	; 0xae
 800632a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	6839      	ldr	r1, [r7, #0]
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	4798      	blx	r3
 8006336:	4603      	mov	r3, r0
 8006338:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800633a:	e004      	b.n	8006346 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800633c:	6839      	ldr	r1, [r7, #0]
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fc2d 	bl	8006b9e <USBD_CtlError>
              break;
 8006344:	e000      	b.n	8006348 <USBD_StdEPReq+0x1c8>
              break;
 8006346:	bf00      	nop
          }
          break;
 8006348:	e0ab      	b.n	80064a2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b02      	cmp	r3, #2
 8006354:	d002      	beq.n	800635c <USBD_StdEPReq+0x1dc>
 8006356:	2b03      	cmp	r3, #3
 8006358:	d032      	beq.n	80063c0 <USBD_StdEPReq+0x240>
 800635a:	e097      	b.n	800648c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800635c:	7bbb      	ldrb	r3, [r7, #14]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d007      	beq.n	8006372 <USBD_StdEPReq+0x1f2>
 8006362:	7bbb      	ldrb	r3, [r7, #14]
 8006364:	2b80      	cmp	r3, #128	; 0x80
 8006366:	d004      	beq.n	8006372 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006368:	6839      	ldr	r1, [r7, #0]
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fc17 	bl	8006b9e <USBD_CtlError>
                break;
 8006370:	e091      	b.n	8006496 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006372:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006376:	2b00      	cmp	r3, #0
 8006378:	da0b      	bge.n	8006392 <USBD_StdEPReq+0x212>
 800637a:	7bbb      	ldrb	r3, [r7, #14]
 800637c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006380:	4613      	mov	r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4413      	add	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	3310      	adds	r3, #16
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	4413      	add	r3, r2
 800638e:	3304      	adds	r3, #4
 8006390:	e00b      	b.n	80063aa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006392:	7bbb      	ldrb	r3, [r7, #14]
 8006394:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006398:	4613      	mov	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	4413      	add	r3, r2
 80063a8:	3304      	adds	r3, #4
 80063aa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	2200      	movs	r2, #0
 80063b0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	2202      	movs	r2, #2
 80063b6:	4619      	mov	r1, r3
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 fc61 	bl	8006c80 <USBD_CtlSendData>
              break;
 80063be:	e06a      	b.n	8006496 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80063c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	da11      	bge.n	80063ec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80063c8:	7bbb      	ldrb	r3, [r7, #14]
 80063ca:	f003 020f 	and.w	r2, r3, #15
 80063ce:	6879      	ldr	r1, [r7, #4]
 80063d0:	4613      	mov	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4413      	add	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	440b      	add	r3, r1
 80063da:	3324      	adds	r3, #36	; 0x24
 80063dc:	881b      	ldrh	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d117      	bne.n	8006412 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80063e2:	6839      	ldr	r1, [r7, #0]
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fbda 	bl	8006b9e <USBD_CtlError>
                  break;
 80063ea:	e054      	b.n	8006496 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80063ec:	7bbb      	ldrb	r3, [r7, #14]
 80063ee:	f003 020f 	and.w	r2, r3, #15
 80063f2:	6879      	ldr	r1, [r7, #4]
 80063f4:	4613      	mov	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	440b      	add	r3, r1
 80063fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006402:	881b      	ldrh	r3, [r3, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d104      	bne.n	8006412 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006408:	6839      	ldr	r1, [r7, #0]
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fbc7 	bl	8006b9e <USBD_CtlError>
                  break;
 8006410:	e041      	b.n	8006496 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006412:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006416:	2b00      	cmp	r3, #0
 8006418:	da0b      	bge.n	8006432 <USBD_StdEPReq+0x2b2>
 800641a:	7bbb      	ldrb	r3, [r7, #14]
 800641c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006420:	4613      	mov	r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	4413      	add	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	3310      	adds	r3, #16
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	4413      	add	r3, r2
 800642e:	3304      	adds	r3, #4
 8006430:	e00b      	b.n	800644a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006432:	7bbb      	ldrb	r3, [r7, #14]
 8006434:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006438:	4613      	mov	r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	4413      	add	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	4413      	add	r3, r2
 8006448:	3304      	adds	r3, #4
 800644a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800644c:	7bbb      	ldrb	r3, [r7, #14]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <USBD_StdEPReq+0x2d8>
 8006452:	7bbb      	ldrb	r3, [r7, #14]
 8006454:	2b80      	cmp	r3, #128	; 0x80
 8006456:	d103      	bne.n	8006460 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	2200      	movs	r2, #0
 800645c:	601a      	str	r2, [r3, #0]
 800645e:	e00e      	b.n	800647e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006460:	7bbb      	ldrb	r3, [r7, #14]
 8006462:	4619      	mov	r1, r3
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f001 f8cb 	bl	8007600 <USBD_LL_IsStallEP>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d003      	beq.n	8006478 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	2201      	movs	r2, #1
 8006474:	601a      	str	r2, [r3, #0]
 8006476:	e002      	b.n	800647e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	2200      	movs	r2, #0
 800647c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	2202      	movs	r2, #2
 8006482:	4619      	mov	r1, r3
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 fbfb 	bl	8006c80 <USBD_CtlSendData>
              break;
 800648a:	e004      	b.n	8006496 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800648c:	6839      	ldr	r1, [r7, #0]
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 fb85 	bl	8006b9e <USBD_CtlError>
              break;
 8006494:	bf00      	nop
          }
          break;
 8006496:	e004      	b.n	80064a2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006498:	6839      	ldr	r1, [r7, #0]
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fb7f 	bl	8006b9e <USBD_CtlError>
          break;
 80064a0:	bf00      	nop
      }
      break;
 80064a2:	e005      	b.n	80064b0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80064a4:	6839      	ldr	r1, [r7, #0]
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fb79 	bl	8006b9e <USBD_CtlError>
      break;
 80064ac:	e000      	b.n	80064b0 <USBD_StdEPReq+0x330>
      break;
 80064ae:	bf00      	nop
  }

  return ret;
 80064b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
	...

080064bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80064c6:	2300      	movs	r3, #0
 80064c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80064ca:	2300      	movs	r3, #0
 80064cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	885b      	ldrh	r3, [r3, #2]
 80064d6:	0a1b      	lsrs	r3, r3, #8
 80064d8:	b29b      	uxth	r3, r3
 80064da:	3b01      	subs	r3, #1
 80064dc:	2b0e      	cmp	r3, #14
 80064de:	f200 8152 	bhi.w	8006786 <USBD_GetDescriptor+0x2ca>
 80064e2:	a201      	add	r2, pc, #4	; (adr r2, 80064e8 <USBD_GetDescriptor+0x2c>)
 80064e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e8:	08006559 	.word	0x08006559
 80064ec:	08006571 	.word	0x08006571
 80064f0:	080065b1 	.word	0x080065b1
 80064f4:	08006787 	.word	0x08006787
 80064f8:	08006787 	.word	0x08006787
 80064fc:	08006727 	.word	0x08006727
 8006500:	08006753 	.word	0x08006753
 8006504:	08006787 	.word	0x08006787
 8006508:	08006787 	.word	0x08006787
 800650c:	08006787 	.word	0x08006787
 8006510:	08006787 	.word	0x08006787
 8006514:	08006787 	.word	0x08006787
 8006518:	08006787 	.word	0x08006787
 800651c:	08006787 	.word	0x08006787
 8006520:	08006525 	.word	0x08006525
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800652a:	69db      	ldr	r3, [r3, #28]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00b      	beq.n	8006548 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006536:	69db      	ldr	r3, [r3, #28]
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	7c12      	ldrb	r2, [r2, #16]
 800653c:	f107 0108 	add.w	r1, r7, #8
 8006540:	4610      	mov	r0, r2
 8006542:	4798      	blx	r3
 8006544:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006546:	e126      	b.n	8006796 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006548:	6839      	ldr	r1, [r7, #0]
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fb27 	bl	8006b9e <USBD_CtlError>
        err++;
 8006550:	7afb      	ldrb	r3, [r7, #11]
 8006552:	3301      	adds	r3, #1
 8006554:	72fb      	strb	r3, [r7, #11]
      break;
 8006556:	e11e      	b.n	8006796 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	7c12      	ldrb	r2, [r2, #16]
 8006564:	f107 0108 	add.w	r1, r7, #8
 8006568:	4610      	mov	r0, r2
 800656a:	4798      	blx	r3
 800656c:	60f8      	str	r0, [r7, #12]
      break;
 800656e:	e112      	b.n	8006796 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	7c1b      	ldrb	r3, [r3, #16]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10d      	bne.n	8006594 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800657e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006580:	f107 0208 	add.w	r2, r7, #8
 8006584:	4610      	mov	r0, r2
 8006586:	4798      	blx	r3
 8006588:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	3301      	adds	r3, #1
 800658e:	2202      	movs	r2, #2
 8006590:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006592:	e100      	b.n	8006796 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800659a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659c:	f107 0208 	add.w	r2, r7, #8
 80065a0:	4610      	mov	r0, r2
 80065a2:	4798      	blx	r3
 80065a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	3301      	adds	r3, #1
 80065aa:	2202      	movs	r2, #2
 80065ac:	701a      	strb	r2, [r3, #0]
      break;
 80065ae:	e0f2      	b.n	8006796 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	885b      	ldrh	r3, [r3, #2]
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b05      	cmp	r3, #5
 80065b8:	f200 80ac 	bhi.w	8006714 <USBD_GetDescriptor+0x258>
 80065bc:	a201      	add	r2, pc, #4	; (adr r2, 80065c4 <USBD_GetDescriptor+0x108>)
 80065be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c2:	bf00      	nop
 80065c4:	080065dd 	.word	0x080065dd
 80065c8:	08006611 	.word	0x08006611
 80065cc:	08006645 	.word	0x08006645
 80065d0:	08006679 	.word	0x08006679
 80065d4:	080066ad 	.word	0x080066ad
 80065d8:	080066e1 	.word	0x080066e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00b      	beq.n	8006600 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	7c12      	ldrb	r2, [r2, #16]
 80065f4:	f107 0108 	add.w	r1, r7, #8
 80065f8:	4610      	mov	r0, r2
 80065fa:	4798      	blx	r3
 80065fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065fe:	e091      	b.n	8006724 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006600:	6839      	ldr	r1, [r7, #0]
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 facb 	bl	8006b9e <USBD_CtlError>
            err++;
 8006608:	7afb      	ldrb	r3, [r7, #11]
 800660a:	3301      	adds	r3, #1
 800660c:	72fb      	strb	r3, [r7, #11]
          break;
 800660e:	e089      	b.n	8006724 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00b      	beq.n	8006634 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	7c12      	ldrb	r2, [r2, #16]
 8006628:	f107 0108 	add.w	r1, r7, #8
 800662c:	4610      	mov	r0, r2
 800662e:	4798      	blx	r3
 8006630:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006632:	e077      	b.n	8006724 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006634:	6839      	ldr	r1, [r7, #0]
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 fab1 	bl	8006b9e <USBD_CtlError>
            err++;
 800663c:	7afb      	ldrb	r3, [r7, #11]
 800663e:	3301      	adds	r3, #1
 8006640:	72fb      	strb	r3, [r7, #11]
          break;
 8006642:	e06f      	b.n	8006724 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00b      	beq.n	8006668 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	7c12      	ldrb	r2, [r2, #16]
 800665c:	f107 0108 	add.w	r1, r7, #8
 8006660:	4610      	mov	r0, r2
 8006662:	4798      	blx	r3
 8006664:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006666:	e05d      	b.n	8006724 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006668:	6839      	ldr	r1, [r7, #0]
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 fa97 	bl	8006b9e <USBD_CtlError>
            err++;
 8006670:	7afb      	ldrb	r3, [r7, #11]
 8006672:	3301      	adds	r3, #1
 8006674:	72fb      	strb	r3, [r7, #11]
          break;
 8006676:	e055      	b.n	8006724 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00b      	beq.n	800669c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	7c12      	ldrb	r2, [r2, #16]
 8006690:	f107 0108 	add.w	r1, r7, #8
 8006694:	4610      	mov	r0, r2
 8006696:	4798      	blx	r3
 8006698:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800669a:	e043      	b.n	8006724 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800669c:	6839      	ldr	r1, [r7, #0]
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fa7d 	bl	8006b9e <USBD_CtlError>
            err++;
 80066a4:	7afb      	ldrb	r3, [r7, #11]
 80066a6:	3301      	adds	r3, #1
 80066a8:	72fb      	strb	r3, [r7, #11]
          break;
 80066aa:	e03b      	b.n	8006724 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00b      	beq.n	80066d0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	7c12      	ldrb	r2, [r2, #16]
 80066c4:	f107 0108 	add.w	r1, r7, #8
 80066c8:	4610      	mov	r0, r2
 80066ca:	4798      	blx	r3
 80066cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066ce:	e029      	b.n	8006724 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80066d0:	6839      	ldr	r1, [r7, #0]
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fa63 	bl	8006b9e <USBD_CtlError>
            err++;
 80066d8:	7afb      	ldrb	r3, [r7, #11]
 80066da:	3301      	adds	r3, #1
 80066dc:	72fb      	strb	r3, [r7, #11]
          break;
 80066de:	e021      	b.n	8006724 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00b      	beq.n	8006704 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	7c12      	ldrb	r2, [r2, #16]
 80066f8:	f107 0108 	add.w	r1, r7, #8
 80066fc:	4610      	mov	r0, r2
 80066fe:	4798      	blx	r3
 8006700:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006702:	e00f      	b.n	8006724 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006704:	6839      	ldr	r1, [r7, #0]
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 fa49 	bl	8006b9e <USBD_CtlError>
            err++;
 800670c:	7afb      	ldrb	r3, [r7, #11]
 800670e:	3301      	adds	r3, #1
 8006710:	72fb      	strb	r3, [r7, #11]
          break;
 8006712:	e007      	b.n	8006724 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006714:	6839      	ldr	r1, [r7, #0]
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fa41 	bl	8006b9e <USBD_CtlError>
          err++;
 800671c:	7afb      	ldrb	r3, [r7, #11]
 800671e:	3301      	adds	r3, #1
 8006720:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006722:	bf00      	nop
      }
      break;
 8006724:	e037      	b.n	8006796 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	7c1b      	ldrb	r3, [r3, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d109      	bne.n	8006742 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006736:	f107 0208 	add.w	r2, r7, #8
 800673a:	4610      	mov	r0, r2
 800673c:	4798      	blx	r3
 800673e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006740:	e029      	b.n	8006796 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006742:	6839      	ldr	r1, [r7, #0]
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 fa2a 	bl	8006b9e <USBD_CtlError>
        err++;
 800674a:	7afb      	ldrb	r3, [r7, #11]
 800674c:	3301      	adds	r3, #1
 800674e:	72fb      	strb	r3, [r7, #11]
      break;
 8006750:	e021      	b.n	8006796 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	7c1b      	ldrb	r3, [r3, #16]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10d      	bne.n	8006776 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006762:	f107 0208 	add.w	r2, r7, #8
 8006766:	4610      	mov	r0, r2
 8006768:	4798      	blx	r3
 800676a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	3301      	adds	r3, #1
 8006770:	2207      	movs	r2, #7
 8006772:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006774:	e00f      	b.n	8006796 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006776:	6839      	ldr	r1, [r7, #0]
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 fa10 	bl	8006b9e <USBD_CtlError>
        err++;
 800677e:	7afb      	ldrb	r3, [r7, #11]
 8006780:	3301      	adds	r3, #1
 8006782:	72fb      	strb	r3, [r7, #11]
      break;
 8006784:	e007      	b.n	8006796 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006786:	6839      	ldr	r1, [r7, #0]
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 fa08 	bl	8006b9e <USBD_CtlError>
      err++;
 800678e:	7afb      	ldrb	r3, [r7, #11]
 8006790:	3301      	adds	r3, #1
 8006792:	72fb      	strb	r3, [r7, #11]
      break;
 8006794:	bf00      	nop
  }

  if (err != 0U)
 8006796:	7afb      	ldrb	r3, [r7, #11]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d11e      	bne.n	80067da <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	88db      	ldrh	r3, [r3, #6]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d016      	beq.n	80067d2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80067a4:	893b      	ldrh	r3, [r7, #8]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00e      	beq.n	80067c8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	88da      	ldrh	r2, [r3, #6]
 80067ae:	893b      	ldrh	r3, [r7, #8]
 80067b0:	4293      	cmp	r3, r2
 80067b2:	bf28      	it	cs
 80067b4:	4613      	movcs	r3, r2
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80067ba:	893b      	ldrh	r3, [r7, #8]
 80067bc:	461a      	mov	r2, r3
 80067be:	68f9      	ldr	r1, [r7, #12]
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 fa5d 	bl	8006c80 <USBD_CtlSendData>
 80067c6:	e009      	b.n	80067dc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80067c8:	6839      	ldr	r1, [r7, #0]
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f9e7 	bl	8006b9e <USBD_CtlError>
 80067d0:	e004      	b.n	80067dc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 faae 	bl	8006d34 <USBD_CtlSendStatus>
 80067d8:	e000      	b.n	80067dc <USBD_GetDescriptor+0x320>
    return;
 80067da:	bf00      	nop
  }
}
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop

080067e4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	889b      	ldrh	r3, [r3, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d131      	bne.n	800685a <USBD_SetAddress+0x76>
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	88db      	ldrh	r3, [r3, #6]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d12d      	bne.n	800685a <USBD_SetAddress+0x76>
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	885b      	ldrh	r3, [r3, #2]
 8006802:	2b7f      	cmp	r3, #127	; 0x7f
 8006804:	d829      	bhi.n	800685a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	885b      	ldrh	r3, [r3, #2]
 800680a:	b2db      	uxtb	r3, r3
 800680c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006810:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b03      	cmp	r3, #3
 800681c:	d104      	bne.n	8006828 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f9bc 	bl	8006b9e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006826:	e01d      	b.n	8006864 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	7bfa      	ldrb	r2, [r7, #15]
 800682c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006830:	7bfb      	ldrb	r3, [r7, #15]
 8006832:	4619      	mov	r1, r3
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 ff0f 	bl	8007658 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fa7a 	bl	8006d34 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006840:	7bfb      	ldrb	r3, [r7, #15]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d004      	beq.n	8006850 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2202      	movs	r2, #2
 800684a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800684e:	e009      	b.n	8006864 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006858:	e004      	b.n	8006864 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800685a:	6839      	ldr	r1, [r7, #0]
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 f99e 	bl	8006b9e <USBD_CtlError>
  }
}
 8006862:	bf00      	nop
 8006864:	bf00      	nop
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006876:	2300      	movs	r3, #0
 8006878:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	885b      	ldrh	r3, [r3, #2]
 800687e:	b2da      	uxtb	r2, r3
 8006880:	4b4e      	ldr	r3, [pc, #312]	; (80069bc <USBD_SetConfig+0x150>)
 8006882:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006884:	4b4d      	ldr	r3, [pc, #308]	; (80069bc <USBD_SetConfig+0x150>)
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d905      	bls.n	8006898 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800688c:	6839      	ldr	r1, [r7, #0]
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f985 	bl	8006b9e <USBD_CtlError>
    return USBD_FAIL;
 8006894:	2303      	movs	r3, #3
 8006896:	e08c      	b.n	80069b2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d002      	beq.n	80068aa <USBD_SetConfig+0x3e>
 80068a4:	2b03      	cmp	r3, #3
 80068a6:	d029      	beq.n	80068fc <USBD_SetConfig+0x90>
 80068a8:	e075      	b.n	8006996 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80068aa:	4b44      	ldr	r3, [pc, #272]	; (80069bc <USBD_SetConfig+0x150>)
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d020      	beq.n	80068f4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80068b2:	4b42      	ldr	r3, [pc, #264]	; (80069bc <USBD_SetConfig+0x150>)
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	461a      	mov	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80068bc:	4b3f      	ldr	r3, [pc, #252]	; (80069bc <USBD_SetConfig+0x150>)
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	4619      	mov	r1, r3
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7fe ffbd 	bl	8005842 <USBD_SetClassConfig>
 80068c8:	4603      	mov	r3, r0
 80068ca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d008      	beq.n	80068e4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80068d2:	6839      	ldr	r1, [r7, #0]
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f962 	bl	8006b9e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2202      	movs	r2, #2
 80068de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80068e2:	e065      	b.n	80069b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fa25 	bl	8006d34 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2203      	movs	r2, #3
 80068ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80068f2:	e05d      	b.n	80069b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 fa1d 	bl	8006d34 <USBD_CtlSendStatus>
      break;
 80068fa:	e059      	b.n	80069b0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80068fc:	4b2f      	ldr	r3, [pc, #188]	; (80069bc <USBD_SetConfig+0x150>)
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d112      	bne.n	800692a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2202      	movs	r2, #2
 8006908:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800690c:	4b2b      	ldr	r3, [pc, #172]	; (80069bc <USBD_SetConfig+0x150>)
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	461a      	mov	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006916:	4b29      	ldr	r3, [pc, #164]	; (80069bc <USBD_SetConfig+0x150>)
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	4619      	mov	r1, r3
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f7fe ffac 	bl	800587a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 fa06 	bl	8006d34 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006928:	e042      	b.n	80069b0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800692a:	4b24      	ldr	r3, [pc, #144]	; (80069bc <USBD_SetConfig+0x150>)
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	461a      	mov	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	429a      	cmp	r2, r3
 8006936:	d02a      	beq.n	800698e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	b2db      	uxtb	r3, r3
 800693e:	4619      	mov	r1, r3
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7fe ff9a 	bl	800587a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006946:	4b1d      	ldr	r3, [pc, #116]	; (80069bc <USBD_SetConfig+0x150>)
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	461a      	mov	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006950:	4b1a      	ldr	r3, [pc, #104]	; (80069bc <USBD_SetConfig+0x150>)
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	4619      	mov	r1, r3
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7fe ff73 	bl	8005842 <USBD_SetClassConfig>
 800695c:	4603      	mov	r3, r0
 800695e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006960:	7bfb      	ldrb	r3, [r7, #15]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00f      	beq.n	8006986 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006966:	6839      	ldr	r1, [r7, #0]
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 f918 	bl	8006b9e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	b2db      	uxtb	r3, r3
 8006974:	4619      	mov	r1, r3
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7fe ff7f 	bl	800587a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2202      	movs	r2, #2
 8006980:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006984:	e014      	b.n	80069b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f9d4 	bl	8006d34 <USBD_CtlSendStatus>
      break;
 800698c:	e010      	b.n	80069b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 f9d0 	bl	8006d34 <USBD_CtlSendStatus>
      break;
 8006994:	e00c      	b.n	80069b0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006996:	6839      	ldr	r1, [r7, #0]
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 f900 	bl	8006b9e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800699e:	4b07      	ldr	r3, [pc, #28]	; (80069bc <USBD_SetConfig+0x150>)
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	4619      	mov	r1, r3
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f7fe ff68 	bl	800587a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80069aa:	2303      	movs	r3, #3
 80069ac:	73fb      	strb	r3, [r7, #15]
      break;
 80069ae:	bf00      	nop
  }

  return ret;
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	20000180 	.word	0x20000180

080069c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	88db      	ldrh	r3, [r3, #6]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d004      	beq.n	80069dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80069d2:	6839      	ldr	r1, [r7, #0]
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 f8e2 	bl	8006b9e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80069da:	e023      	b.n	8006a24 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	dc02      	bgt.n	80069ee <USBD_GetConfig+0x2e>
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	dc03      	bgt.n	80069f4 <USBD_GetConfig+0x34>
 80069ec:	e015      	b.n	8006a1a <USBD_GetConfig+0x5a>
 80069ee:	2b03      	cmp	r3, #3
 80069f0:	d00b      	beq.n	8006a0a <USBD_GetConfig+0x4a>
 80069f2:	e012      	b.n	8006a1a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	3308      	adds	r3, #8
 80069fe:	2201      	movs	r2, #1
 8006a00:	4619      	mov	r1, r3
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f93c 	bl	8006c80 <USBD_CtlSendData>
        break;
 8006a08:	e00c      	b.n	8006a24 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	2201      	movs	r2, #1
 8006a10:	4619      	mov	r1, r3
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f934 	bl	8006c80 <USBD_CtlSendData>
        break;
 8006a18:	e004      	b.n	8006a24 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006a1a:	6839      	ldr	r1, [r7, #0]
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 f8be 	bl	8006b9e <USBD_CtlError>
        break;
 8006a22:	bf00      	nop
}
 8006a24:	bf00      	nop
 8006a26:	3708      	adds	r7, #8
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d81e      	bhi.n	8006a82 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	88db      	ldrh	r3, [r3, #6]
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d004      	beq.n	8006a56 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006a4c:	6839      	ldr	r1, [r7, #0]
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f8a5 	bl	8006b9e <USBD_CtlError>
        break;
 8006a54:	e01a      	b.n	8006a8c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d005      	beq.n	8006a72 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	f043 0202 	orr.w	r2, r3, #2
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	330c      	adds	r3, #12
 8006a76:	2202      	movs	r2, #2
 8006a78:	4619      	mov	r1, r3
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 f900 	bl	8006c80 <USBD_CtlSendData>
      break;
 8006a80:	e004      	b.n	8006a8c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006a82:	6839      	ldr	r1, [r7, #0]
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f88a 	bl	8006b9e <USBD_CtlError>
      break;
 8006a8a:	bf00      	nop
  }
}
 8006a8c:	bf00      	nop
 8006a8e:	3708      	adds	r7, #8
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	885b      	ldrh	r3, [r3, #2]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d107      	bne.n	8006ab6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f940 	bl	8006d34 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006ab4:	e013      	b.n	8006ade <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	885b      	ldrh	r3, [r3, #2]
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d10b      	bne.n	8006ad6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	889b      	ldrh	r3, [r3, #4]
 8006ac2:	0a1b      	lsrs	r3, r3, #8
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f930 	bl	8006d34 <USBD_CtlSendStatus>
}
 8006ad4:	e003      	b.n	8006ade <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006ad6:	6839      	ldr	r1, [r7, #0]
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 f860 	bl	8006b9e <USBD_CtlError>
}
 8006ade:	bf00      	nop
 8006ae0:	3708      	adds	r7, #8
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b082      	sub	sp, #8
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
 8006aee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	3b01      	subs	r3, #1
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d80b      	bhi.n	8006b16 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	885b      	ldrh	r3, [r3, #2]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d10c      	bne.n	8006b20 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f910 	bl	8006d34 <USBD_CtlSendStatus>
      }
      break;
 8006b14:	e004      	b.n	8006b20 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006b16:	6839      	ldr	r1, [r7, #0]
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f840 	bl	8006b9e <USBD_CtlError>
      break;
 8006b1e:	e000      	b.n	8006b22 <USBD_ClrFeature+0x3c>
      break;
 8006b20:	bf00      	nop
  }
}
 8006b22:	bf00      	nop
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b084      	sub	sp, #16
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	781a      	ldrb	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	3301      	adds	r3, #1
 8006b44:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	781a      	ldrb	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3301      	adds	r3, #1
 8006b52:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f7ff fa17 	bl	8005f88 <SWAPBYTE>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	3301      	adds	r3, #1
 8006b66:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f7ff fa0a 	bl	8005f88 <SWAPBYTE>
 8006b74:	4603      	mov	r3, r0
 8006b76:	461a      	mov	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	3301      	adds	r3, #1
 8006b80:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	3301      	adds	r3, #1
 8006b86:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f7ff f9fd 	bl	8005f88 <SWAPBYTE>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	461a      	mov	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	80da      	strh	r2, [r3, #6]
}
 8006b96:	bf00      	nop
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b082      	sub	sp, #8
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
 8006ba6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ba8:	2180      	movs	r1, #128	; 0x80
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fcea 	bl	8007584 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fce6 	bl	8007584 <USBD_LL_StallEP>
}
 8006bb8:	bf00      	nop
 8006bba:	3708      	adds	r7, #8
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b086      	sub	sp, #24
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d036      	beq.n	8006c44 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006bda:	6938      	ldr	r0, [r7, #16]
 8006bdc:	f000 f836 	bl	8006c4c <USBD_GetLen>
 8006be0:	4603      	mov	r3, r0
 8006be2:	3301      	adds	r3, #1
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	005b      	lsls	r3, r3, #1
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006bee:	7dfb      	ldrb	r3, [r7, #23]
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	7812      	ldrb	r2, [r2, #0]
 8006bf8:	701a      	strb	r2, [r3, #0]
  idx++;
 8006bfa:	7dfb      	ldrb	r3, [r7, #23]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006c00:	7dfb      	ldrb	r3, [r7, #23]
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	4413      	add	r3, r2
 8006c06:	2203      	movs	r2, #3
 8006c08:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c0a:	7dfb      	ldrb	r3, [r7, #23]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006c10:	e013      	b.n	8006c3a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006c12:	7dfb      	ldrb	r3, [r7, #23]
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	4413      	add	r3, r2
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	7812      	ldrb	r2, [r2, #0]
 8006c1c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	3301      	adds	r3, #1
 8006c22:	613b      	str	r3, [r7, #16]
    idx++;
 8006c24:	7dfb      	ldrb	r3, [r7, #23]
 8006c26:	3301      	adds	r3, #1
 8006c28:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006c2a:	7dfb      	ldrb	r3, [r7, #23]
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	4413      	add	r3, r2
 8006c30:	2200      	movs	r2, #0
 8006c32:	701a      	strb	r2, [r3, #0]
    idx++;
 8006c34:	7dfb      	ldrb	r3, [r7, #23]
 8006c36:	3301      	adds	r3, #1
 8006c38:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1e7      	bne.n	8006c12 <USBD_GetString+0x52>
 8006c42:	e000      	b.n	8006c46 <USBD_GetString+0x86>
    return;
 8006c44:	bf00      	nop
  }
}
 8006c46:	3718      	adds	r7, #24
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006c54:	2300      	movs	r3, #0
 8006c56:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006c5c:	e005      	b.n	8006c6a <USBD_GetLen+0x1e>
  {
    len++;
 8006c5e:	7bfb      	ldrb	r3, [r7, #15]
 8006c60:	3301      	adds	r3, #1
 8006c62:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	3301      	adds	r3, #1
 8006c68:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1f5      	bne.n	8006c5e <USBD_GetLen+0x12>
  }

  return len;
 8006c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2202      	movs	r2, #2
 8006c90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f000 fcf5 	bl	8007696 <USBD_LL_Transmit>

  return USBD_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b084      	sub	sp, #16
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	60f8      	str	r0, [r7, #12]
 8006cbe:	60b9      	str	r1, [r7, #8]
 8006cc0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	2100      	movs	r1, #0
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 fce4 	bl	8007696 <USBD_LL_Transmit>

  return USBD_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2203      	movs	r2, #3
 8006ce8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	2100      	movs	r1, #0
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f000 fce8 	bl	80076d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b084      	sub	sp, #16
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	60f8      	str	r0, [r7, #12]
 8006d1a:	60b9      	str	r1, [r7, #8]
 8006d1c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	2100      	movs	r1, #0
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f000 fcd7 	bl	80076d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2204      	movs	r2, #4
 8006d40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006d44:	2300      	movs	r3, #0
 8006d46:	2200      	movs	r2, #0
 8006d48:	2100      	movs	r1, #0
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fca3 	bl	8007696 <USBD_LL_Transmit>

  return USBD_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b082      	sub	sp, #8
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2205      	movs	r2, #5
 8006d66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	2100      	movs	r1, #0
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fcb1 	bl	80076d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006d84:	2200      	movs	r2, #0
 8006d86:	4912      	ldr	r1, [pc, #72]	; (8006dd0 <MX_USB_DEVICE_Init+0x50>)
 8006d88:	4812      	ldr	r0, [pc, #72]	; (8006dd4 <MX_USB_DEVICE_Init+0x54>)
 8006d8a:	f7fe fcdd 	bl	8005748 <USBD_Init>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d001      	beq.n	8006d98 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006d94:	f7f9 fc54 	bl	8000640 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006d98:	490f      	ldr	r1, [pc, #60]	; (8006dd8 <MX_USB_DEVICE_Init+0x58>)
 8006d9a:	480e      	ldr	r0, [pc, #56]	; (8006dd4 <MX_USB_DEVICE_Init+0x54>)
 8006d9c:	f7fe fd04 	bl	80057a8 <USBD_RegisterClass>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d001      	beq.n	8006daa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006da6:	f7f9 fc4b 	bl	8000640 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006daa:	490c      	ldr	r1, [pc, #48]	; (8006ddc <MX_USB_DEVICE_Init+0x5c>)
 8006dac:	4809      	ldr	r0, [pc, #36]	; (8006dd4 <MX_USB_DEVICE_Init+0x54>)
 8006dae:	f7fe fc3b 	bl	8005628 <USBD_CDC_RegisterInterface>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d001      	beq.n	8006dbc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006db8:	f7f9 fc42 	bl	8000640 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006dbc:	4805      	ldr	r0, [pc, #20]	; (8006dd4 <MX_USB_DEVICE_Init+0x54>)
 8006dbe:	f7fe fd29 	bl	8005814 <USBD_Start>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d001      	beq.n	8006dcc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006dc8:	f7f9 fc3a 	bl	8000640 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006dcc:	bf00      	nop
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	200000ac 	.word	0x200000ac
 8006dd4:	20000184 	.word	0x20000184
 8006dd8:	20000018 	.word	0x20000018
 8006ddc:	20000098 	.word	0x20000098

08006de0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006de4:	2200      	movs	r2, #0
 8006de6:	4905      	ldr	r1, [pc, #20]	; (8006dfc <CDC_Init_FS+0x1c>)
 8006de8:	4805      	ldr	r0, [pc, #20]	; (8006e00 <CDC_Init_FS+0x20>)
 8006dea:	f7fe fc37 	bl	800565c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006dee:	4905      	ldr	r1, [pc, #20]	; (8006e04 <CDC_Init_FS+0x24>)
 8006df0:	4803      	ldr	r0, [pc, #12]	; (8006e00 <CDC_Init_FS+0x20>)
 8006df2:	f7fe fc55 	bl	80056a0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006df6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	20000c60 	.word	0x20000c60
 8006e00:	20000184 	.word	0x20000184
 8006e04:	20000460 	.word	0x20000460

08006e08 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006e0c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	4603      	mov	r3, r0
 8006e20:	6039      	str	r1, [r7, #0]
 8006e22:	71fb      	strb	r3, [r7, #7]
 8006e24:	4613      	mov	r3, r2
 8006e26:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006e28:	79fb      	ldrb	r3, [r7, #7]
 8006e2a:	2b23      	cmp	r3, #35	; 0x23
 8006e2c:	d84a      	bhi.n	8006ec4 <CDC_Control_FS+0xac>
 8006e2e:	a201      	add	r2, pc, #4	; (adr r2, 8006e34 <CDC_Control_FS+0x1c>)
 8006e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e34:	08006ec5 	.word	0x08006ec5
 8006e38:	08006ec5 	.word	0x08006ec5
 8006e3c:	08006ec5 	.word	0x08006ec5
 8006e40:	08006ec5 	.word	0x08006ec5
 8006e44:	08006ec5 	.word	0x08006ec5
 8006e48:	08006ec5 	.word	0x08006ec5
 8006e4c:	08006ec5 	.word	0x08006ec5
 8006e50:	08006ec5 	.word	0x08006ec5
 8006e54:	08006ec5 	.word	0x08006ec5
 8006e58:	08006ec5 	.word	0x08006ec5
 8006e5c:	08006ec5 	.word	0x08006ec5
 8006e60:	08006ec5 	.word	0x08006ec5
 8006e64:	08006ec5 	.word	0x08006ec5
 8006e68:	08006ec5 	.word	0x08006ec5
 8006e6c:	08006ec5 	.word	0x08006ec5
 8006e70:	08006ec5 	.word	0x08006ec5
 8006e74:	08006ec5 	.word	0x08006ec5
 8006e78:	08006ec5 	.word	0x08006ec5
 8006e7c:	08006ec5 	.word	0x08006ec5
 8006e80:	08006ec5 	.word	0x08006ec5
 8006e84:	08006ec5 	.word	0x08006ec5
 8006e88:	08006ec5 	.word	0x08006ec5
 8006e8c:	08006ec5 	.word	0x08006ec5
 8006e90:	08006ec5 	.word	0x08006ec5
 8006e94:	08006ec5 	.word	0x08006ec5
 8006e98:	08006ec5 	.word	0x08006ec5
 8006e9c:	08006ec5 	.word	0x08006ec5
 8006ea0:	08006ec5 	.word	0x08006ec5
 8006ea4:	08006ec5 	.word	0x08006ec5
 8006ea8:	08006ec5 	.word	0x08006ec5
 8006eac:	08006ec5 	.word	0x08006ec5
 8006eb0:	08006ec5 	.word	0x08006ec5
 8006eb4:	08006ec5 	.word	0x08006ec5
 8006eb8:	08006ec5 	.word	0x08006ec5
 8006ebc:	08006ec5 	.word	0x08006ec5
 8006ec0:	08006ec5 	.word	0x08006ec5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006ec4:	bf00      	nop
  }

  return (USBD_OK);
 8006ec6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006ede:	6879      	ldr	r1, [r7, #4]
 8006ee0:	4805      	ldr	r0, [pc, #20]	; (8006ef8 <CDC_Receive_FS+0x24>)
 8006ee2:	f7fe fbdd 	bl	80056a0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006ee6:	4804      	ldr	r0, [pc, #16]	; (8006ef8 <CDC_Receive_FS+0x24>)
 8006ee8:	f7fe fbf8 	bl	80056dc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006eec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	20000184 	.word	0x20000184

08006efc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	4613      	mov	r3, r2
 8006f08:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006f0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	371c      	adds	r7, #28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
	...

08006f20 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	4603      	mov	r3, r0
 8006f28:	6039      	str	r1, [r7, #0]
 8006f2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	2212      	movs	r2, #18
 8006f30:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006f32:	4b03      	ldr	r3, [pc, #12]	; (8006f40 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	200000cc 	.word	0x200000cc

08006f44 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	6039      	str	r1, [r7, #0]
 8006f4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	2204      	movs	r2, #4
 8006f54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006f56:	4b03      	ldr	r3, [pc, #12]	; (8006f64 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	200000ec 	.word	0x200000ec

08006f68 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	4603      	mov	r3, r0
 8006f70:	6039      	str	r1, [r7, #0]
 8006f72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f74:	79fb      	ldrb	r3, [r7, #7]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d105      	bne.n	8006f86 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f7a:	683a      	ldr	r2, [r7, #0]
 8006f7c:	4907      	ldr	r1, [pc, #28]	; (8006f9c <USBD_FS_ProductStrDescriptor+0x34>)
 8006f7e:	4808      	ldr	r0, [pc, #32]	; (8006fa0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f80:	f7ff fe1e 	bl	8006bc0 <USBD_GetString>
 8006f84:	e004      	b.n	8006f90 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	4904      	ldr	r1, [pc, #16]	; (8006f9c <USBD_FS_ProductStrDescriptor+0x34>)
 8006f8a:	4805      	ldr	r0, [pc, #20]	; (8006fa0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f8c:	f7ff fe18 	bl	8006bc0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f90:	4b02      	ldr	r3, [pc, #8]	; (8006f9c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3708      	adds	r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	20001460 	.word	0x20001460
 8006fa0:	08007af0 	.word	0x08007af0

08006fa4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	4603      	mov	r3, r0
 8006fac:	6039      	str	r1, [r7, #0]
 8006fae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006fb0:	683a      	ldr	r2, [r7, #0]
 8006fb2:	4904      	ldr	r1, [pc, #16]	; (8006fc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006fb4:	4804      	ldr	r0, [pc, #16]	; (8006fc8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006fb6:	f7ff fe03 	bl	8006bc0 <USBD_GetString>
  return USBD_StrDesc;
 8006fba:	4b02      	ldr	r3, [pc, #8]	; (8006fc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	20001460 	.word	0x20001460
 8006fc8:	08007b00 	.word	0x08007b00

08006fcc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	6039      	str	r1, [r7, #0]
 8006fd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	221a      	movs	r2, #26
 8006fdc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006fde:	f000 f855 	bl	800708c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006fe2:	4b02      	ldr	r3, [pc, #8]	; (8006fec <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	200000f0 	.word	0x200000f0

08006ff0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	6039      	str	r1, [r7, #0]
 8006ffa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006ffc:	79fb      	ldrb	r3, [r7, #7]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d105      	bne.n	800700e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007002:	683a      	ldr	r2, [r7, #0]
 8007004:	4907      	ldr	r1, [pc, #28]	; (8007024 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007006:	4808      	ldr	r0, [pc, #32]	; (8007028 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007008:	f7ff fdda 	bl	8006bc0 <USBD_GetString>
 800700c:	e004      	b.n	8007018 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	4904      	ldr	r1, [pc, #16]	; (8007024 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007012:	4805      	ldr	r0, [pc, #20]	; (8007028 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007014:	f7ff fdd4 	bl	8006bc0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007018:	4b02      	ldr	r3, [pc, #8]	; (8007024 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800701a:	4618      	mov	r0, r3
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	20001460 	.word	0x20001460
 8007028:	08007b14 	.word	0x08007b14

0800702c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	4603      	mov	r3, r0
 8007034:	6039      	str	r1, [r7, #0]
 8007036:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007038:	79fb      	ldrb	r3, [r7, #7]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d105      	bne.n	800704a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	4907      	ldr	r1, [pc, #28]	; (8007060 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007042:	4808      	ldr	r0, [pc, #32]	; (8007064 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007044:	f7ff fdbc 	bl	8006bc0 <USBD_GetString>
 8007048:	e004      	b.n	8007054 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	4904      	ldr	r1, [pc, #16]	; (8007060 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800704e:	4805      	ldr	r0, [pc, #20]	; (8007064 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007050:	f7ff fdb6 	bl	8006bc0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007054:	4b02      	ldr	r3, [pc, #8]	; (8007060 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007056:	4618      	mov	r0, r3
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	20001460 	.word	0x20001460
 8007064:	08007b20 	.word	0x08007b20

08007068 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	4603      	mov	r3, r0
 8007070:	6039      	str	r1, [r7, #0]
 8007072:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	220c      	movs	r2, #12
 8007078:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800707a:	4b03      	ldr	r3, [pc, #12]	; (8007088 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800707c:	4618      	mov	r0, r3
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr
 8007088:	200000e0 	.word	0x200000e0

0800708c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007092:	4b0f      	ldr	r3, [pc, #60]	; (80070d0 <Get_SerialNum+0x44>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007098:	4b0e      	ldr	r3, [pc, #56]	; (80070d4 <Get_SerialNum+0x48>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800709e:	4b0e      	ldr	r3, [pc, #56]	; (80070d8 <Get_SerialNum+0x4c>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4413      	add	r3, r2
 80070aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d009      	beq.n	80070c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80070b2:	2208      	movs	r2, #8
 80070b4:	4909      	ldr	r1, [pc, #36]	; (80070dc <Get_SerialNum+0x50>)
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f000 f814 	bl	80070e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80070bc:	2204      	movs	r2, #4
 80070be:	4908      	ldr	r1, [pc, #32]	; (80070e0 <Get_SerialNum+0x54>)
 80070c0:	68b8      	ldr	r0, [r7, #8]
 80070c2:	f000 f80f 	bl	80070e4 <IntToUnicode>
  }
}
 80070c6:	bf00      	nop
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	1ff0f420 	.word	0x1ff0f420
 80070d4:	1ff0f424 	.word	0x1ff0f424
 80070d8:	1ff0f428 	.word	0x1ff0f428
 80070dc:	200000f2 	.word	0x200000f2
 80070e0:	20000102 	.word	0x20000102

080070e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b087      	sub	sp, #28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	4613      	mov	r3, r2
 80070f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80070f2:	2300      	movs	r3, #0
 80070f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80070f6:	2300      	movs	r3, #0
 80070f8:	75fb      	strb	r3, [r7, #23]
 80070fa:	e027      	b.n	800714c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	0f1b      	lsrs	r3, r3, #28
 8007100:	2b09      	cmp	r3, #9
 8007102:	d80b      	bhi.n	800711c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	0f1b      	lsrs	r3, r3, #28
 8007108:	b2da      	uxtb	r2, r3
 800710a:	7dfb      	ldrb	r3, [r7, #23]
 800710c:	005b      	lsls	r3, r3, #1
 800710e:	4619      	mov	r1, r3
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	440b      	add	r3, r1
 8007114:	3230      	adds	r2, #48	; 0x30
 8007116:	b2d2      	uxtb	r2, r2
 8007118:	701a      	strb	r2, [r3, #0]
 800711a:	e00a      	b.n	8007132 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	0f1b      	lsrs	r3, r3, #28
 8007120:	b2da      	uxtb	r2, r3
 8007122:	7dfb      	ldrb	r3, [r7, #23]
 8007124:	005b      	lsls	r3, r3, #1
 8007126:	4619      	mov	r1, r3
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	440b      	add	r3, r1
 800712c:	3237      	adds	r2, #55	; 0x37
 800712e:	b2d2      	uxtb	r2, r2
 8007130:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	011b      	lsls	r3, r3, #4
 8007136:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007138:	7dfb      	ldrb	r3, [r7, #23]
 800713a:	005b      	lsls	r3, r3, #1
 800713c:	3301      	adds	r3, #1
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	4413      	add	r3, r2
 8007142:	2200      	movs	r2, #0
 8007144:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007146:	7dfb      	ldrb	r3, [r7, #23]
 8007148:	3301      	adds	r3, #1
 800714a:	75fb      	strb	r3, [r7, #23]
 800714c:	7dfa      	ldrb	r2, [r7, #23]
 800714e:	79fb      	ldrb	r3, [r7, #7]
 8007150:	429a      	cmp	r2, r3
 8007152:	d3d3      	bcc.n	80070fc <IntToUnicode+0x18>
  }
}
 8007154:	bf00      	nop
 8007156:	bf00      	nop
 8007158:	371c      	adds	r7, #28
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
	...

08007164 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b0ac      	sub	sp, #176	; 0xb0
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800716c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007170:	2200      	movs	r2, #0
 8007172:	601a      	str	r2, [r3, #0]
 8007174:	605a      	str	r2, [r3, #4]
 8007176:	609a      	str	r2, [r3, #8]
 8007178:	60da      	str	r2, [r3, #12]
 800717a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800717c:	f107 0318 	add.w	r3, r7, #24
 8007180:	2284      	movs	r2, #132	; 0x84
 8007182:	2100      	movs	r1, #0
 8007184:	4618      	mov	r0, r3
 8007186:	f000 fc17 	bl	80079b8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007192:	d151      	bne.n	8007238 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8007194:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007198:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800719a:	2300      	movs	r3, #0
 800719c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80071a0:	f107 0318 	add.w	r3, r7, #24
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7fb fe03 	bl	8002db0 <HAL_RCCEx_PeriphCLKConfig>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d001      	beq.n	80071b4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80071b0:	f7f9 fa46 	bl	8000640 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071b4:	4b22      	ldr	r3, [pc, #136]	; (8007240 <HAL_PCD_MspInit+0xdc>)
 80071b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b8:	4a21      	ldr	r2, [pc, #132]	; (8007240 <HAL_PCD_MspInit+0xdc>)
 80071ba:	f043 0301 	orr.w	r3, r3, #1
 80071be:	6313      	str	r3, [r2, #48]	; 0x30
 80071c0:	4b1f      	ldr	r3, [pc, #124]	; (8007240 <HAL_PCD_MspInit+0xdc>)
 80071c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c4:	f003 0301 	and.w	r3, r3, #1
 80071c8:	617b      	str	r3, [r7, #20]
 80071ca:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80071cc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80071d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071d4:	2302      	movs	r3, #2
 80071d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071da:	2300      	movs	r3, #0
 80071dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071e0:	2303      	movs	r3, #3
 80071e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80071e6:	230a      	movs	r3, #10
 80071e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80071f0:	4619      	mov	r1, r3
 80071f2:	4814      	ldr	r0, [pc, #80]	; (8007244 <HAL_PCD_MspInit+0xe0>)
 80071f4:	f7f9 fc86 	bl	8000b04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80071f8:	4b11      	ldr	r3, [pc, #68]	; (8007240 <HAL_PCD_MspInit+0xdc>)
 80071fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071fc:	4a10      	ldr	r2, [pc, #64]	; (8007240 <HAL_PCD_MspInit+0xdc>)
 80071fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007202:	6353      	str	r3, [r2, #52]	; 0x34
 8007204:	4b0e      	ldr	r3, [pc, #56]	; (8007240 <HAL_PCD_MspInit+0xdc>)
 8007206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800720c:	613b      	str	r3, [r7, #16]
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	4b0b      	ldr	r3, [pc, #44]	; (8007240 <HAL_PCD_MspInit+0xdc>)
 8007212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007214:	4a0a      	ldr	r2, [pc, #40]	; (8007240 <HAL_PCD_MspInit+0xdc>)
 8007216:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800721a:	6453      	str	r3, [r2, #68]	; 0x44
 800721c:	4b08      	ldr	r3, [pc, #32]	; (8007240 <HAL_PCD_MspInit+0xdc>)
 800721e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007224:	60fb      	str	r3, [r7, #12]
 8007226:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007228:	2200      	movs	r2, #0
 800722a:	2100      	movs	r1, #0
 800722c:	2043      	movs	r0, #67	; 0x43
 800722e:	f7f9 fc32 	bl	8000a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007232:	2043      	movs	r0, #67	; 0x43
 8007234:	f7f9 fc4b 	bl	8000ace <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007238:	bf00      	nop
 800723a:	37b0      	adds	r7, #176	; 0xb0
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	40023800 	.word	0x40023800
 8007244:	40020000 	.word	0x40020000

08007248 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800725c:	4619      	mov	r1, r3
 800725e:	4610      	mov	r0, r2
 8007260:	f7fe fb25 	bl	80058ae <USBD_LL_SetupStage>
}
 8007264:	bf00      	nop
 8007266:	3708      	adds	r7, #8
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	460b      	mov	r3, r1
 8007276:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800727e:	78fa      	ldrb	r2, [r7, #3]
 8007280:	6879      	ldr	r1, [r7, #4]
 8007282:	4613      	mov	r3, r2
 8007284:	00db      	lsls	r3, r3, #3
 8007286:	4413      	add	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	440b      	add	r3, r1
 800728c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	78fb      	ldrb	r3, [r7, #3]
 8007294:	4619      	mov	r1, r3
 8007296:	f7fe fb5f 	bl	8005958 <USBD_LL_DataOutStage>
}
 800729a:	bf00      	nop
 800729c:	3708      	adds	r7, #8
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b082      	sub	sp, #8
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
 80072aa:	460b      	mov	r3, r1
 80072ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 80072b4:	78fa      	ldrb	r2, [r7, #3]
 80072b6:	6879      	ldr	r1, [r7, #4]
 80072b8:	4613      	mov	r3, r2
 80072ba:	00db      	lsls	r3, r3, #3
 80072bc:	4413      	add	r3, r2
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	440b      	add	r3, r1
 80072c2:	334c      	adds	r3, #76	; 0x4c
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	78fb      	ldrb	r3, [r7, #3]
 80072c8:	4619      	mov	r1, r3
 80072ca:	f7fe fbf8 	bl	8005abe <USBD_LL_DataInStage>
}
 80072ce:	bf00      	nop
 80072d0:	3708      	adds	r7, #8
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b082      	sub	sp, #8
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7fe fd2c 	bl	8005d42 <USBD_LL_SOF>
}
 80072ea:	bf00      	nop
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b084      	sub	sp, #16
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80072fa:	2301      	movs	r3, #1
 80072fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d102      	bne.n	800730c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007306:	2300      	movs	r3, #0
 8007308:	73fb      	strb	r3, [r7, #15]
 800730a:	e008      	b.n	800731e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	2b02      	cmp	r3, #2
 8007312:	d102      	bne.n	800731a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007314:	2301      	movs	r3, #1
 8007316:	73fb      	strb	r3, [r7, #15]
 8007318:	e001      	b.n	800731e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800731a:	f7f9 f991 	bl	8000640 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007324:	7bfa      	ldrb	r2, [r7, #15]
 8007326:	4611      	mov	r1, r2
 8007328:	4618      	mov	r0, r3
 800732a:	f7fe fccc 	bl	8005cc6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007334:	4618      	mov	r0, r3
 8007336:	f7fe fc74 	bl	8005c22 <USBD_LL_Reset>
}
 800733a:	bf00      	nop
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
	...

08007344 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007352:	4618      	mov	r0, r3
 8007354:	f7fe fcc7 	bl	8005ce6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	6812      	ldr	r2, [r2, #0]
 8007366:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800736a:	f043 0301 	orr.w	r3, r3, #1
 800736e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a1b      	ldr	r3, [r3, #32]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d005      	beq.n	8007384 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007378:	4b04      	ldr	r3, [pc, #16]	; (800738c <HAL_PCD_SuspendCallback+0x48>)
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	4a03      	ldr	r2, [pc, #12]	; (800738c <HAL_PCD_SuspendCallback+0x48>)
 800737e:	f043 0306 	orr.w	r3, r3, #6
 8007382:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007384:	bf00      	nop
 8007386:	3708      	adds	r7, #8
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	e000ed00 	.word	0xe000ed00

08007390 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800739e:	4618      	mov	r0, r3
 80073a0:	f7fe fcb7 	bl	8005d12 <USBD_LL_Resume>
}
 80073a4:	bf00      	nop
 80073a6:	3708      	adds	r7, #8
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	460b      	mov	r3, r1
 80073b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80073be:	78fa      	ldrb	r2, [r7, #3]
 80073c0:	4611      	mov	r1, r2
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7fe fd0f 	bl	8005de6 <USBD_LL_IsoOUTIncomplete>
}
 80073c8:	bf00      	nop
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	460b      	mov	r3, r1
 80073da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80073e2:	78fa      	ldrb	r2, [r7, #3]
 80073e4:	4611      	mov	r1, r2
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7fe fccb 	bl	8005d82 <USBD_LL_IsoINIncomplete>
}
 80073ec:	bf00      	nop
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007402:	4618      	mov	r0, r3
 8007404:	f7fe fd21 	bl	8005e4a <USBD_LL_DevConnected>
}
 8007408:	bf00      	nop
 800740a:	3708      	adds	r7, #8
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800741e:	4618      	mov	r0, r3
 8007420:	f7fe fd1e 	bl	8005e60 <USBD_LL_DevDisconnected>
}
 8007424:	bf00      	nop
 8007426:	3708      	adds	r7, #8
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d13c      	bne.n	80074b6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800743c:	4a20      	ldr	r2, [pc, #128]	; (80074c0 <USBD_LL_Init+0x94>)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a1e      	ldr	r2, [pc, #120]	; (80074c0 <USBD_LL_Init+0x94>)
 8007448:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800744c:	4b1c      	ldr	r3, [pc, #112]	; (80074c0 <USBD_LL_Init+0x94>)
 800744e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007452:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007454:	4b1a      	ldr	r3, [pc, #104]	; (80074c0 <USBD_LL_Init+0x94>)
 8007456:	2206      	movs	r2, #6
 8007458:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800745a:	4b19      	ldr	r3, [pc, #100]	; (80074c0 <USBD_LL_Init+0x94>)
 800745c:	2202      	movs	r2, #2
 800745e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007460:	4b17      	ldr	r3, [pc, #92]	; (80074c0 <USBD_LL_Init+0x94>)
 8007462:	2200      	movs	r2, #0
 8007464:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007466:	4b16      	ldr	r3, [pc, #88]	; (80074c0 <USBD_LL_Init+0x94>)
 8007468:	2202      	movs	r2, #2
 800746a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800746c:	4b14      	ldr	r3, [pc, #80]	; (80074c0 <USBD_LL_Init+0x94>)
 800746e:	2200      	movs	r2, #0
 8007470:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007472:	4b13      	ldr	r3, [pc, #76]	; (80074c0 <USBD_LL_Init+0x94>)
 8007474:	2200      	movs	r2, #0
 8007476:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007478:	4b11      	ldr	r3, [pc, #68]	; (80074c0 <USBD_LL_Init+0x94>)
 800747a:	2200      	movs	r2, #0
 800747c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800747e:	4b10      	ldr	r3, [pc, #64]	; (80074c0 <USBD_LL_Init+0x94>)
 8007480:	2200      	movs	r2, #0
 8007482:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007484:	4b0e      	ldr	r3, [pc, #56]	; (80074c0 <USBD_LL_Init+0x94>)
 8007486:	2200      	movs	r2, #0
 8007488:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800748a:	480d      	ldr	r0, [pc, #52]	; (80074c0 <USBD_LL_Init+0x94>)
 800748c:	f7f9 fce6 	bl	8000e5c <HAL_PCD_Init>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d001      	beq.n	800749a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007496:	f7f9 f8d3 	bl	8000640 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800749a:	2180      	movs	r1, #128	; 0x80
 800749c:	4808      	ldr	r0, [pc, #32]	; (80074c0 <USBD_LL_Init+0x94>)
 800749e:	f7fa ff60 	bl	8002362 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80074a2:	2240      	movs	r2, #64	; 0x40
 80074a4:	2100      	movs	r1, #0
 80074a6:	4806      	ldr	r0, [pc, #24]	; (80074c0 <USBD_LL_Init+0x94>)
 80074a8:	f7fa ff14 	bl	80022d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80074ac:	2280      	movs	r2, #128	; 0x80
 80074ae:	2101      	movs	r1, #1
 80074b0:	4803      	ldr	r0, [pc, #12]	; (80074c0 <USBD_LL_Init+0x94>)
 80074b2:	f7fa ff0f 	bl	80022d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	20001660 	.word	0x20001660

080074c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074cc:	2300      	movs	r3, #0
 80074ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074d0:	2300      	movs	r3, #0
 80074d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80074da:	4618      	mov	r0, r3
 80074dc:	f7f9 fde2 	bl	80010a4 <HAL_PCD_Start>
 80074e0:	4603      	mov	r3, r0
 80074e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074e4:	7bfb      	ldrb	r3, [r7, #15]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 f97e 	bl	80077e8 <USBD_Get_USB_Status>
 80074ec:	4603      	mov	r3, r0
 80074ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b084      	sub	sp, #16
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
 8007502:	4608      	mov	r0, r1
 8007504:	4611      	mov	r1, r2
 8007506:	461a      	mov	r2, r3
 8007508:	4603      	mov	r3, r0
 800750a:	70fb      	strb	r3, [r7, #3]
 800750c:	460b      	mov	r3, r1
 800750e:	70bb      	strb	r3, [r7, #2]
 8007510:	4613      	mov	r3, r2
 8007512:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007514:	2300      	movs	r3, #0
 8007516:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007518:	2300      	movs	r3, #0
 800751a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007522:	78bb      	ldrb	r3, [r7, #2]
 8007524:	883a      	ldrh	r2, [r7, #0]
 8007526:	78f9      	ldrb	r1, [r7, #3]
 8007528:	f7fa facf 	bl	8001aca <HAL_PCD_EP_Open>
 800752c:	4603      	mov	r3, r0
 800752e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007530:	7bfb      	ldrb	r3, [r7, #15]
 8007532:	4618      	mov	r0, r3
 8007534:	f000 f958 	bl	80077e8 <USBD_Get_USB_Status>
 8007538:	4603      	mov	r3, r0
 800753a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800753c:	7bbb      	ldrb	r3, [r7, #14]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b084      	sub	sp, #16
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	460b      	mov	r3, r1
 8007550:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007552:	2300      	movs	r3, #0
 8007554:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007560:	78fa      	ldrb	r2, [r7, #3]
 8007562:	4611      	mov	r1, r2
 8007564:	4618      	mov	r0, r3
 8007566:	f7fa fb18 	bl	8001b9a <HAL_PCD_EP_Close>
 800756a:	4603      	mov	r3, r0
 800756c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800756e:	7bfb      	ldrb	r3, [r7, #15]
 8007570:	4618      	mov	r0, r3
 8007572:	f000 f939 	bl	80077e8 <USBD_Get_USB_Status>
 8007576:	4603      	mov	r3, r0
 8007578:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800757a:	7bbb      	ldrb	r3, [r7, #14]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	460b      	mov	r3, r1
 800758e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007590:	2300      	movs	r3, #0
 8007592:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007594:	2300      	movs	r3, #0
 8007596:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800759e:	78fa      	ldrb	r2, [r7, #3]
 80075a0:	4611      	mov	r1, r2
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fa fbf0 	bl	8001d88 <HAL_PCD_EP_SetStall>
 80075a8:	4603      	mov	r3, r0
 80075aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
 80075ae:	4618      	mov	r0, r3
 80075b0:	f000 f91a 	bl	80077e8 <USBD_Get_USB_Status>
 80075b4:	4603      	mov	r3, r0
 80075b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b084      	sub	sp, #16
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	460b      	mov	r3, r1
 80075cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075ce:	2300      	movs	r3, #0
 80075d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075d2:	2300      	movs	r3, #0
 80075d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80075dc:	78fa      	ldrb	r2, [r7, #3]
 80075de:	4611      	mov	r1, r2
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7fa fc35 	bl	8001e50 <HAL_PCD_EP_ClrStall>
 80075e6:	4603      	mov	r3, r0
 80075e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075ea:	7bfb      	ldrb	r3, [r7, #15]
 80075ec:	4618      	mov	r0, r3
 80075ee:	f000 f8fb 	bl	80077e8 <USBD_Get_USB_Status>
 80075f2:	4603      	mov	r3, r0
 80075f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3710      	adds	r7, #16
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	460b      	mov	r3, r1
 800760a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007612:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007614:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007618:	2b00      	cmp	r3, #0
 800761a:	da0b      	bge.n	8007634 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800761c:	78fb      	ldrb	r3, [r7, #3]
 800761e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007622:	68f9      	ldr	r1, [r7, #12]
 8007624:	4613      	mov	r3, r2
 8007626:	00db      	lsls	r3, r3, #3
 8007628:	4413      	add	r3, r2
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	440b      	add	r3, r1
 800762e:	333e      	adds	r3, #62	; 0x3e
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	e00b      	b.n	800764c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007634:	78fb      	ldrb	r3, [r7, #3]
 8007636:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800763a:	68f9      	ldr	r1, [r7, #12]
 800763c:	4613      	mov	r3, r2
 800763e:	00db      	lsls	r3, r3, #3
 8007640:	4413      	add	r3, r2
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	440b      	add	r3, r1
 8007646:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800764a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800764c:	4618      	mov	r0, r3
 800764e:	3714      	adds	r7, #20
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	460b      	mov	r3, r1
 8007662:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007664:	2300      	movs	r3, #0
 8007666:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007668:	2300      	movs	r3, #0
 800766a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007672:	78fa      	ldrb	r2, [r7, #3]
 8007674:	4611      	mov	r1, r2
 8007676:	4618      	mov	r0, r3
 8007678:	f7fa fa02 	bl	8001a80 <HAL_PCD_SetAddress>
 800767c:	4603      	mov	r3, r0
 800767e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007680:	7bfb      	ldrb	r3, [r7, #15]
 8007682:	4618      	mov	r0, r3
 8007684:	f000 f8b0 	bl	80077e8 <USBD_Get_USB_Status>
 8007688:	4603      	mov	r3, r0
 800768a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800768c:	7bbb      	ldrb	r3, [r7, #14]
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b086      	sub	sp, #24
 800769a:	af00      	add	r7, sp, #0
 800769c:	60f8      	str	r0, [r7, #12]
 800769e:	607a      	str	r2, [r7, #4]
 80076a0:	603b      	str	r3, [r7, #0]
 80076a2:	460b      	mov	r3, r1
 80076a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076a6:	2300      	movs	r3, #0
 80076a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076aa:	2300      	movs	r3, #0
 80076ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80076b4:	7af9      	ldrb	r1, [r7, #11]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	f7fa fb1b 	bl	8001cf4 <HAL_PCD_EP_Transmit>
 80076be:	4603      	mov	r3, r0
 80076c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076c2:	7dfb      	ldrb	r3, [r7, #23]
 80076c4:	4618      	mov	r0, r3
 80076c6:	f000 f88f 	bl	80077e8 <USBD_Get_USB_Status>
 80076ca:	4603      	mov	r3, r0
 80076cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80076ce:	7dbb      	ldrb	r3, [r7, #22]
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3718      	adds	r7, #24
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b086      	sub	sp, #24
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	607a      	str	r2, [r7, #4]
 80076e2:	603b      	str	r3, [r7, #0]
 80076e4:	460b      	mov	r3, r1
 80076e6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076e8:	2300      	movs	r3, #0
 80076ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076ec:	2300      	movs	r3, #0
 80076ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80076f6:	7af9      	ldrb	r1, [r7, #11]
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	f7fa fa97 	bl	8001c2e <HAL_PCD_EP_Receive>
 8007700:	4603      	mov	r3, r0
 8007702:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007704:	7dfb      	ldrb	r3, [r7, #23]
 8007706:	4618      	mov	r0, r3
 8007708:	f000 f86e 	bl	80077e8 <USBD_Get_USB_Status>
 800770c:	4603      	mov	r3, r0
 800770e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007710:	7dbb      	ldrb	r3, [r7, #22]
}
 8007712:	4618      	mov	r0, r3
 8007714:	3718      	adds	r7, #24
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b082      	sub	sp, #8
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
 8007722:	460b      	mov	r3, r1
 8007724:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800772c:	78fa      	ldrb	r2, [r7, #3]
 800772e:	4611      	mov	r1, r2
 8007730:	4618      	mov	r0, r3
 8007732:	f7fa fac7 	bl	8001cc4 <HAL_PCD_EP_GetRxCount>
 8007736:	4603      	mov	r3, r0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3708      	adds	r7, #8
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	460b      	mov	r3, r1
 800774a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800774c:	78fb      	ldrb	r3, [r7, #3]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d002      	beq.n	8007758 <HAL_PCDEx_LPM_Callback+0x18>
 8007752:	2b01      	cmp	r3, #1
 8007754:	d01f      	beq.n	8007796 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007756:	e03b      	b.n	80077d0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a1b      	ldr	r3, [r3, #32]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d007      	beq.n	8007770 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007760:	f000 f83c 	bl	80077dc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007764:	4b1c      	ldr	r3, [pc, #112]	; (80077d8 <HAL_PCDEx_LPM_Callback+0x98>)
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	4a1b      	ldr	r2, [pc, #108]	; (80077d8 <HAL_PCDEx_LPM_Callback+0x98>)
 800776a:	f023 0306 	bic.w	r3, r3, #6
 800776e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	6812      	ldr	r2, [r2, #0]
 800777e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007782:	f023 0301 	bic.w	r3, r3, #1
 8007786:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800778e:	4618      	mov	r0, r3
 8007790:	f7fe fabf 	bl	8005d12 <USBD_LL_Resume>
    break;
 8007794:	e01c      	b.n	80077d0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	6812      	ldr	r2, [r2, #0]
 80077a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077a8:	f043 0301 	orr.w	r3, r3, #1
 80077ac:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7fe fa96 	bl	8005ce6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a1b      	ldr	r3, [r3, #32]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d005      	beq.n	80077ce <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80077c2:	4b05      	ldr	r3, [pc, #20]	; (80077d8 <HAL_PCDEx_LPM_Callback+0x98>)
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	4a04      	ldr	r2, [pc, #16]	; (80077d8 <HAL_PCDEx_LPM_Callback+0x98>)
 80077c8:	f043 0306 	orr.w	r3, r3, #6
 80077cc:	6113      	str	r3, [r2, #16]
    break;
 80077ce:	bf00      	nop
}
 80077d0:	bf00      	nop
 80077d2:	3708      	adds	r7, #8
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	e000ed00 	.word	0xe000ed00

080077dc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80077e0:	f7f8 fe9c 	bl	800051c <SystemClock_Config>
}
 80077e4:	bf00      	nop
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	4603      	mov	r3, r0
 80077f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80077f6:	79fb      	ldrb	r3, [r7, #7]
 80077f8:	2b03      	cmp	r3, #3
 80077fa:	d817      	bhi.n	800782c <USBD_Get_USB_Status+0x44>
 80077fc:	a201      	add	r2, pc, #4	; (adr r2, 8007804 <USBD_Get_USB_Status+0x1c>)
 80077fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007802:	bf00      	nop
 8007804:	08007815 	.word	0x08007815
 8007808:	0800781b 	.word	0x0800781b
 800780c:	08007821 	.word	0x08007821
 8007810:	08007827 	.word	0x08007827
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007814:	2300      	movs	r3, #0
 8007816:	73fb      	strb	r3, [r7, #15]
    break;
 8007818:	e00b      	b.n	8007832 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800781a:	2303      	movs	r3, #3
 800781c:	73fb      	strb	r3, [r7, #15]
    break;
 800781e:	e008      	b.n	8007832 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007820:	2301      	movs	r3, #1
 8007822:	73fb      	strb	r3, [r7, #15]
    break;
 8007824:	e005      	b.n	8007832 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007826:	2303      	movs	r3, #3
 8007828:	73fb      	strb	r3, [r7, #15]
    break;
 800782a:	e002      	b.n	8007832 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800782c:	2303      	movs	r3, #3
 800782e:	73fb      	strb	r3, [r7, #15]
    break;
 8007830:	bf00      	nop
  }
  return usb_status;
 8007832:	7bfb      	ldrb	r3, [r7, #15]
}
 8007834:	4618      	mov	r0, r3
 8007836:	3714      	adds	r7, #20
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <malloc>:
 8007840:	4b02      	ldr	r3, [pc, #8]	; (800784c <malloc+0xc>)
 8007842:	4601      	mov	r1, r0
 8007844:	6818      	ldr	r0, [r3, #0]
 8007846:	f000 b82b 	b.w	80078a0 <_malloc_r>
 800784a:	bf00      	nop
 800784c:	20000158 	.word	0x20000158

08007850 <free>:
 8007850:	4b02      	ldr	r3, [pc, #8]	; (800785c <free+0xc>)
 8007852:	4601      	mov	r1, r0
 8007854:	6818      	ldr	r0, [r3, #0]
 8007856:	f000 b8f3 	b.w	8007a40 <_free_r>
 800785a:	bf00      	nop
 800785c:	20000158 	.word	0x20000158

08007860 <sbrk_aligned>:
 8007860:	b570      	push	{r4, r5, r6, lr}
 8007862:	4e0e      	ldr	r6, [pc, #56]	; (800789c <sbrk_aligned+0x3c>)
 8007864:	460c      	mov	r4, r1
 8007866:	6831      	ldr	r1, [r6, #0]
 8007868:	4605      	mov	r5, r0
 800786a:	b911      	cbnz	r1, 8007872 <sbrk_aligned+0x12>
 800786c:	f000 f8ac 	bl	80079c8 <_sbrk_r>
 8007870:	6030      	str	r0, [r6, #0]
 8007872:	4621      	mov	r1, r4
 8007874:	4628      	mov	r0, r5
 8007876:	f000 f8a7 	bl	80079c8 <_sbrk_r>
 800787a:	1c43      	adds	r3, r0, #1
 800787c:	d00a      	beq.n	8007894 <sbrk_aligned+0x34>
 800787e:	1cc4      	adds	r4, r0, #3
 8007880:	f024 0403 	bic.w	r4, r4, #3
 8007884:	42a0      	cmp	r0, r4
 8007886:	d007      	beq.n	8007898 <sbrk_aligned+0x38>
 8007888:	1a21      	subs	r1, r4, r0
 800788a:	4628      	mov	r0, r5
 800788c:	f000 f89c 	bl	80079c8 <_sbrk_r>
 8007890:	3001      	adds	r0, #1
 8007892:	d101      	bne.n	8007898 <sbrk_aligned+0x38>
 8007894:	f04f 34ff 	mov.w	r4, #4294967295
 8007898:	4620      	mov	r0, r4
 800789a:	bd70      	pop	{r4, r5, r6, pc}
 800789c:	20001b6c 	.word	0x20001b6c

080078a0 <_malloc_r>:
 80078a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078a4:	1ccd      	adds	r5, r1, #3
 80078a6:	f025 0503 	bic.w	r5, r5, #3
 80078aa:	3508      	adds	r5, #8
 80078ac:	2d0c      	cmp	r5, #12
 80078ae:	bf38      	it	cc
 80078b0:	250c      	movcc	r5, #12
 80078b2:	2d00      	cmp	r5, #0
 80078b4:	4607      	mov	r7, r0
 80078b6:	db01      	blt.n	80078bc <_malloc_r+0x1c>
 80078b8:	42a9      	cmp	r1, r5
 80078ba:	d905      	bls.n	80078c8 <_malloc_r+0x28>
 80078bc:	230c      	movs	r3, #12
 80078be:	603b      	str	r3, [r7, #0]
 80078c0:	2600      	movs	r6, #0
 80078c2:	4630      	mov	r0, r6
 80078c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800799c <_malloc_r+0xfc>
 80078cc:	f000 f868 	bl	80079a0 <__malloc_lock>
 80078d0:	f8d8 3000 	ldr.w	r3, [r8]
 80078d4:	461c      	mov	r4, r3
 80078d6:	bb5c      	cbnz	r4, 8007930 <_malloc_r+0x90>
 80078d8:	4629      	mov	r1, r5
 80078da:	4638      	mov	r0, r7
 80078dc:	f7ff ffc0 	bl	8007860 <sbrk_aligned>
 80078e0:	1c43      	adds	r3, r0, #1
 80078e2:	4604      	mov	r4, r0
 80078e4:	d155      	bne.n	8007992 <_malloc_r+0xf2>
 80078e6:	f8d8 4000 	ldr.w	r4, [r8]
 80078ea:	4626      	mov	r6, r4
 80078ec:	2e00      	cmp	r6, #0
 80078ee:	d145      	bne.n	800797c <_malloc_r+0xdc>
 80078f0:	2c00      	cmp	r4, #0
 80078f2:	d048      	beq.n	8007986 <_malloc_r+0xe6>
 80078f4:	6823      	ldr	r3, [r4, #0]
 80078f6:	4631      	mov	r1, r6
 80078f8:	4638      	mov	r0, r7
 80078fa:	eb04 0903 	add.w	r9, r4, r3
 80078fe:	f000 f863 	bl	80079c8 <_sbrk_r>
 8007902:	4581      	cmp	r9, r0
 8007904:	d13f      	bne.n	8007986 <_malloc_r+0xe6>
 8007906:	6821      	ldr	r1, [r4, #0]
 8007908:	1a6d      	subs	r5, r5, r1
 800790a:	4629      	mov	r1, r5
 800790c:	4638      	mov	r0, r7
 800790e:	f7ff ffa7 	bl	8007860 <sbrk_aligned>
 8007912:	3001      	adds	r0, #1
 8007914:	d037      	beq.n	8007986 <_malloc_r+0xe6>
 8007916:	6823      	ldr	r3, [r4, #0]
 8007918:	442b      	add	r3, r5
 800791a:	6023      	str	r3, [r4, #0]
 800791c:	f8d8 3000 	ldr.w	r3, [r8]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d038      	beq.n	8007996 <_malloc_r+0xf6>
 8007924:	685a      	ldr	r2, [r3, #4]
 8007926:	42a2      	cmp	r2, r4
 8007928:	d12b      	bne.n	8007982 <_malloc_r+0xe2>
 800792a:	2200      	movs	r2, #0
 800792c:	605a      	str	r2, [r3, #4]
 800792e:	e00f      	b.n	8007950 <_malloc_r+0xb0>
 8007930:	6822      	ldr	r2, [r4, #0]
 8007932:	1b52      	subs	r2, r2, r5
 8007934:	d41f      	bmi.n	8007976 <_malloc_r+0xd6>
 8007936:	2a0b      	cmp	r2, #11
 8007938:	d917      	bls.n	800796a <_malloc_r+0xca>
 800793a:	1961      	adds	r1, r4, r5
 800793c:	42a3      	cmp	r3, r4
 800793e:	6025      	str	r5, [r4, #0]
 8007940:	bf18      	it	ne
 8007942:	6059      	strne	r1, [r3, #4]
 8007944:	6863      	ldr	r3, [r4, #4]
 8007946:	bf08      	it	eq
 8007948:	f8c8 1000 	streq.w	r1, [r8]
 800794c:	5162      	str	r2, [r4, r5]
 800794e:	604b      	str	r3, [r1, #4]
 8007950:	4638      	mov	r0, r7
 8007952:	f104 060b 	add.w	r6, r4, #11
 8007956:	f000 f829 	bl	80079ac <__malloc_unlock>
 800795a:	f026 0607 	bic.w	r6, r6, #7
 800795e:	1d23      	adds	r3, r4, #4
 8007960:	1af2      	subs	r2, r6, r3
 8007962:	d0ae      	beq.n	80078c2 <_malloc_r+0x22>
 8007964:	1b9b      	subs	r3, r3, r6
 8007966:	50a3      	str	r3, [r4, r2]
 8007968:	e7ab      	b.n	80078c2 <_malloc_r+0x22>
 800796a:	42a3      	cmp	r3, r4
 800796c:	6862      	ldr	r2, [r4, #4]
 800796e:	d1dd      	bne.n	800792c <_malloc_r+0x8c>
 8007970:	f8c8 2000 	str.w	r2, [r8]
 8007974:	e7ec      	b.n	8007950 <_malloc_r+0xb0>
 8007976:	4623      	mov	r3, r4
 8007978:	6864      	ldr	r4, [r4, #4]
 800797a:	e7ac      	b.n	80078d6 <_malloc_r+0x36>
 800797c:	4634      	mov	r4, r6
 800797e:	6876      	ldr	r6, [r6, #4]
 8007980:	e7b4      	b.n	80078ec <_malloc_r+0x4c>
 8007982:	4613      	mov	r3, r2
 8007984:	e7cc      	b.n	8007920 <_malloc_r+0x80>
 8007986:	230c      	movs	r3, #12
 8007988:	603b      	str	r3, [r7, #0]
 800798a:	4638      	mov	r0, r7
 800798c:	f000 f80e 	bl	80079ac <__malloc_unlock>
 8007990:	e797      	b.n	80078c2 <_malloc_r+0x22>
 8007992:	6025      	str	r5, [r4, #0]
 8007994:	e7dc      	b.n	8007950 <_malloc_r+0xb0>
 8007996:	605b      	str	r3, [r3, #4]
 8007998:	deff      	udf	#255	; 0xff
 800799a:	bf00      	nop
 800799c:	20001b68 	.word	0x20001b68

080079a0 <__malloc_lock>:
 80079a0:	4801      	ldr	r0, [pc, #4]	; (80079a8 <__malloc_lock+0x8>)
 80079a2:	f000 b84b 	b.w	8007a3c <__retarget_lock_acquire_recursive>
 80079a6:	bf00      	nop
 80079a8:	20001cac 	.word	0x20001cac

080079ac <__malloc_unlock>:
 80079ac:	4801      	ldr	r0, [pc, #4]	; (80079b4 <__malloc_unlock+0x8>)
 80079ae:	f000 b846 	b.w	8007a3e <__retarget_lock_release_recursive>
 80079b2:	bf00      	nop
 80079b4:	20001cac 	.word	0x20001cac

080079b8 <memset>:
 80079b8:	4402      	add	r2, r0
 80079ba:	4603      	mov	r3, r0
 80079bc:	4293      	cmp	r3, r2
 80079be:	d100      	bne.n	80079c2 <memset+0xa>
 80079c0:	4770      	bx	lr
 80079c2:	f803 1b01 	strb.w	r1, [r3], #1
 80079c6:	e7f9      	b.n	80079bc <memset+0x4>

080079c8 <_sbrk_r>:
 80079c8:	b538      	push	{r3, r4, r5, lr}
 80079ca:	4d06      	ldr	r5, [pc, #24]	; (80079e4 <_sbrk_r+0x1c>)
 80079cc:	2300      	movs	r3, #0
 80079ce:	4604      	mov	r4, r0
 80079d0:	4608      	mov	r0, r1
 80079d2:	602b      	str	r3, [r5, #0]
 80079d4:	f7f8 fe92 	bl	80006fc <_sbrk>
 80079d8:	1c43      	adds	r3, r0, #1
 80079da:	d102      	bne.n	80079e2 <_sbrk_r+0x1a>
 80079dc:	682b      	ldr	r3, [r5, #0]
 80079de:	b103      	cbz	r3, 80079e2 <_sbrk_r+0x1a>
 80079e0:	6023      	str	r3, [r4, #0]
 80079e2:	bd38      	pop	{r3, r4, r5, pc}
 80079e4:	20001ca8 	.word	0x20001ca8

080079e8 <__errno>:
 80079e8:	4b01      	ldr	r3, [pc, #4]	; (80079f0 <__errno+0x8>)
 80079ea:	6818      	ldr	r0, [r3, #0]
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	20000158 	.word	0x20000158

080079f4 <__libc_init_array>:
 80079f4:	b570      	push	{r4, r5, r6, lr}
 80079f6:	4d0d      	ldr	r5, [pc, #52]	; (8007a2c <__libc_init_array+0x38>)
 80079f8:	4c0d      	ldr	r4, [pc, #52]	; (8007a30 <__libc_init_array+0x3c>)
 80079fa:	1b64      	subs	r4, r4, r5
 80079fc:	10a4      	asrs	r4, r4, #2
 80079fe:	2600      	movs	r6, #0
 8007a00:	42a6      	cmp	r6, r4
 8007a02:	d109      	bne.n	8007a18 <__libc_init_array+0x24>
 8007a04:	4d0b      	ldr	r5, [pc, #44]	; (8007a34 <__libc_init_array+0x40>)
 8007a06:	4c0c      	ldr	r4, [pc, #48]	; (8007a38 <__libc_init_array+0x44>)
 8007a08:	f000 f866 	bl	8007ad8 <_init>
 8007a0c:	1b64      	subs	r4, r4, r5
 8007a0e:	10a4      	asrs	r4, r4, #2
 8007a10:	2600      	movs	r6, #0
 8007a12:	42a6      	cmp	r6, r4
 8007a14:	d105      	bne.n	8007a22 <__libc_init_array+0x2e>
 8007a16:	bd70      	pop	{r4, r5, r6, pc}
 8007a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a1c:	4798      	blx	r3
 8007a1e:	3601      	adds	r6, #1
 8007a20:	e7ee      	b.n	8007a00 <__libc_init_array+0xc>
 8007a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a26:	4798      	blx	r3
 8007a28:	3601      	adds	r6, #1
 8007a2a:	e7f2      	b.n	8007a12 <__libc_init_array+0x1e>
 8007a2c:	08007b48 	.word	0x08007b48
 8007a30:	08007b48 	.word	0x08007b48
 8007a34:	08007b48 	.word	0x08007b48
 8007a38:	08007b4c 	.word	0x08007b4c

08007a3c <__retarget_lock_acquire_recursive>:
 8007a3c:	4770      	bx	lr

08007a3e <__retarget_lock_release_recursive>:
 8007a3e:	4770      	bx	lr

08007a40 <_free_r>:
 8007a40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a42:	2900      	cmp	r1, #0
 8007a44:	d044      	beq.n	8007ad0 <_free_r+0x90>
 8007a46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a4a:	9001      	str	r0, [sp, #4]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f1a1 0404 	sub.w	r4, r1, #4
 8007a52:	bfb8      	it	lt
 8007a54:	18e4      	addlt	r4, r4, r3
 8007a56:	f7ff ffa3 	bl	80079a0 <__malloc_lock>
 8007a5a:	4a1e      	ldr	r2, [pc, #120]	; (8007ad4 <_free_r+0x94>)
 8007a5c:	9801      	ldr	r0, [sp, #4]
 8007a5e:	6813      	ldr	r3, [r2, #0]
 8007a60:	b933      	cbnz	r3, 8007a70 <_free_r+0x30>
 8007a62:	6063      	str	r3, [r4, #4]
 8007a64:	6014      	str	r4, [r2, #0]
 8007a66:	b003      	add	sp, #12
 8007a68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a6c:	f7ff bf9e 	b.w	80079ac <__malloc_unlock>
 8007a70:	42a3      	cmp	r3, r4
 8007a72:	d908      	bls.n	8007a86 <_free_r+0x46>
 8007a74:	6825      	ldr	r5, [r4, #0]
 8007a76:	1961      	adds	r1, r4, r5
 8007a78:	428b      	cmp	r3, r1
 8007a7a:	bf01      	itttt	eq
 8007a7c:	6819      	ldreq	r1, [r3, #0]
 8007a7e:	685b      	ldreq	r3, [r3, #4]
 8007a80:	1949      	addeq	r1, r1, r5
 8007a82:	6021      	streq	r1, [r4, #0]
 8007a84:	e7ed      	b.n	8007a62 <_free_r+0x22>
 8007a86:	461a      	mov	r2, r3
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	b10b      	cbz	r3, 8007a90 <_free_r+0x50>
 8007a8c:	42a3      	cmp	r3, r4
 8007a8e:	d9fa      	bls.n	8007a86 <_free_r+0x46>
 8007a90:	6811      	ldr	r1, [r2, #0]
 8007a92:	1855      	adds	r5, r2, r1
 8007a94:	42a5      	cmp	r5, r4
 8007a96:	d10b      	bne.n	8007ab0 <_free_r+0x70>
 8007a98:	6824      	ldr	r4, [r4, #0]
 8007a9a:	4421      	add	r1, r4
 8007a9c:	1854      	adds	r4, r2, r1
 8007a9e:	42a3      	cmp	r3, r4
 8007aa0:	6011      	str	r1, [r2, #0]
 8007aa2:	d1e0      	bne.n	8007a66 <_free_r+0x26>
 8007aa4:	681c      	ldr	r4, [r3, #0]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	6053      	str	r3, [r2, #4]
 8007aaa:	440c      	add	r4, r1
 8007aac:	6014      	str	r4, [r2, #0]
 8007aae:	e7da      	b.n	8007a66 <_free_r+0x26>
 8007ab0:	d902      	bls.n	8007ab8 <_free_r+0x78>
 8007ab2:	230c      	movs	r3, #12
 8007ab4:	6003      	str	r3, [r0, #0]
 8007ab6:	e7d6      	b.n	8007a66 <_free_r+0x26>
 8007ab8:	6825      	ldr	r5, [r4, #0]
 8007aba:	1961      	adds	r1, r4, r5
 8007abc:	428b      	cmp	r3, r1
 8007abe:	bf04      	itt	eq
 8007ac0:	6819      	ldreq	r1, [r3, #0]
 8007ac2:	685b      	ldreq	r3, [r3, #4]
 8007ac4:	6063      	str	r3, [r4, #4]
 8007ac6:	bf04      	itt	eq
 8007ac8:	1949      	addeq	r1, r1, r5
 8007aca:	6021      	streq	r1, [r4, #0]
 8007acc:	6054      	str	r4, [r2, #4]
 8007ace:	e7ca      	b.n	8007a66 <_free_r+0x26>
 8007ad0:	b003      	add	sp, #12
 8007ad2:	bd30      	pop	{r4, r5, pc}
 8007ad4:	20001b68 	.word	0x20001b68

08007ad8 <_init>:
 8007ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ada:	bf00      	nop
 8007adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ade:	bc08      	pop	{r3}
 8007ae0:	469e      	mov	lr, r3
 8007ae2:	4770      	bx	lr

08007ae4 <_fini>:
 8007ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ae6:	bf00      	nop
 8007ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aea:	bc08      	pop	{r3}
 8007aec:	469e      	mov	lr, r3
 8007aee:	4770      	bx	lr
