
Blue_Pill_STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007090  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800719c  0800719c  0001719c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007208  08007208  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08007208  08007208  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007208  08007208  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007208  08007208  00017208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800720c  0800720c  0001720c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08007210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011f8  2000017c  0800738c  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001374  0800738c  00021374  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bc3b  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027ec  00000000  00000000  0002be23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a18  00000000  00000000  0002e610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000759  00000000  00000000  0002f028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af1e  00000000  00000000  0002f781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dc12  00000000  00000000  0004a69f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000863f4  00000000  00000000  000582b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000269c  00000000  00000000  000de6a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000e0d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08007184 	.word	0x08007184

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08007184 	.word	0x08007184

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f928 	bl	80003a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f805 	bl	8000162 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f86c 	bl	8000234 <_ZL12MX_GPIO_Initv>
  MX_USB_DEVICE_Init();
 800015c:	f006 fb70 	bl	8006840 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000160:	e7fe      	b.n	8000160 <main+0x14>

08000162 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000162:	b580      	push	{r7, lr}
 8000164:	b094      	sub	sp, #80	; 0x50
 8000166:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000168:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800016c:	2228      	movs	r2, #40	; 0x28
 800016e:	2100      	movs	r1, #0
 8000170:	4618      	mov	r0, r3
 8000172:	f006 ffdb 	bl	800712c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000176:	f107 0314 	add.w	r3, r7, #20
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
 800017e:	605a      	str	r2, [r3, #4]
 8000180:	609a      	str	r2, [r3, #8]
 8000182:	60da      	str	r2, [r3, #12]
 8000184:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000186:	1d3b      	adds	r3, r7, #4
 8000188:	2200      	movs	r2, #0
 800018a:	601a      	str	r2, [r3, #0]
 800018c:	605a      	str	r2, [r3, #4]
 800018e:	609a      	str	r2, [r3, #8]
 8000190:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000192:	2301      	movs	r3, #1
 8000194:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000196:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800019a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800019c:	2300      	movs	r3, #0
 800019e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a0:	2301      	movs	r3, #1
 80001a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a4:	2302      	movs	r3, #2
 80001a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001b8:	4618      	mov	r0, r3
 80001ba:	f001 ffd1 	bl	8002160 <HAL_RCC_OscConfig>
 80001be:	4603      	mov	r3, r0
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	bf14      	ite	ne
 80001c4:	2301      	movne	r3, #1
 80001c6:	2300      	moveq	r3, #0
 80001c8:	b2db      	uxtb	r3, r3
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d001      	beq.n	80001d2 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 80001ce:	f000 f853 	bl	8000278 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d2:	230f      	movs	r3, #15
 80001d4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d6:	2302      	movs	r3, #2
 80001d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001da:	2300      	movs	r3, #0
 80001dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e4:	2300      	movs	r3, #0
 80001e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e8:	f107 0314 	add.w	r3, r7, #20
 80001ec:	2102      	movs	r1, #2
 80001ee:	4618      	mov	r0, r3
 80001f0:	f002 fa38 	bl	8002664 <HAL_RCC_ClockConfig>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	bf14      	ite	ne
 80001fa:	2301      	movne	r3, #1
 80001fc:	2300      	moveq	r3, #0
 80001fe:	b2db      	uxtb	r3, r3
 8000200:	2b00      	cmp	r3, #0
 8000202:	d001      	beq.n	8000208 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8000204:	f000 f838 	bl	8000278 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000208:	2310      	movs	r3, #16
 800020a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800020c:	2300      	movs	r3, #0
 800020e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000210:	1d3b      	adds	r3, r7, #4
 8000212:	4618      	mov	r0, r3
 8000214:	f002 fb82 	bl	800291c <HAL_RCCEx_PeriphCLKConfig>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	bf14      	ite	ne
 800021e:	2301      	movne	r3, #1
 8000220:	2300      	moveq	r3, #0
 8000222:	b2db      	uxtb	r3, r3
 8000224:	2b00      	cmp	r3, #0
 8000226:	d001      	beq.n	800022c <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 8000228:	f000 f826 	bl	8000278 <Error_Handler>
  }
}
 800022c:	bf00      	nop
 800022e:	3750      	adds	r7, #80	; 0x50
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}

08000234 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800023a:	4b0e      	ldr	r3, [pc, #56]	; (8000274 <_ZL12MX_GPIO_Initv+0x40>)
 800023c:	699b      	ldr	r3, [r3, #24]
 800023e:	4a0d      	ldr	r2, [pc, #52]	; (8000274 <_ZL12MX_GPIO_Initv+0x40>)
 8000240:	f043 0320 	orr.w	r3, r3, #32
 8000244:	6193      	str	r3, [r2, #24]
 8000246:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <_ZL12MX_GPIO_Initv+0x40>)
 8000248:	699b      	ldr	r3, [r3, #24]
 800024a:	f003 0320 	and.w	r3, r3, #32
 800024e:	607b      	str	r3, [r7, #4]
 8000250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000252:	4b08      	ldr	r3, [pc, #32]	; (8000274 <_ZL12MX_GPIO_Initv+0x40>)
 8000254:	699b      	ldr	r3, [r3, #24]
 8000256:	4a07      	ldr	r2, [pc, #28]	; (8000274 <_ZL12MX_GPIO_Initv+0x40>)
 8000258:	f043 0304 	orr.w	r3, r3, #4
 800025c:	6193      	str	r3, [r2, #24]
 800025e:	4b05      	ldr	r3, [pc, #20]	; (8000274 <_ZL12MX_GPIO_Initv+0x40>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	f003 0304 	and.w	r3, r3, #4
 8000266:	603b      	str	r3, [r7, #0]
 8000268:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800026a:	bf00      	nop
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr
 8000274:	40021000 	.word	0x40021000

08000278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800027c:	b672      	cpsid	i
}
 800027e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000280:	e7fe      	b.n	8000280 <Error_Handler+0x8>
	...

08000284 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000284:	b480      	push	{r7}
 8000286:	b085      	sub	sp, #20
 8000288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800028a:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <HAL_MspInit+0x5c>)
 800028c:	699b      	ldr	r3, [r3, #24]
 800028e:	4a14      	ldr	r2, [pc, #80]	; (80002e0 <HAL_MspInit+0x5c>)
 8000290:	f043 0301 	orr.w	r3, r3, #1
 8000294:	6193      	str	r3, [r2, #24]
 8000296:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <HAL_MspInit+0x5c>)
 8000298:	699b      	ldr	r3, [r3, #24]
 800029a:	f003 0301 	and.w	r3, r3, #1
 800029e:	60bb      	str	r3, [r7, #8]
 80002a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002a2:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <HAL_MspInit+0x5c>)
 80002a4:	69db      	ldr	r3, [r3, #28]
 80002a6:	4a0e      	ldr	r2, [pc, #56]	; (80002e0 <HAL_MspInit+0x5c>)
 80002a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002ac:	61d3      	str	r3, [r2, #28]
 80002ae:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <HAL_MspInit+0x5c>)
 80002b0:	69db      	ldr	r3, [r3, #28]
 80002b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002b6:	607b      	str	r3, [r7, #4]
 80002b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80002ba:	4b0a      	ldr	r3, [pc, #40]	; (80002e4 <HAL_MspInit+0x60>)
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	60fb      	str	r3, [r7, #12]
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80002c6:	60fb      	str	r3, [r7, #12]
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002ce:	60fb      	str	r3, [r7, #12]
 80002d0:	4a04      	ldr	r2, [pc, #16]	; (80002e4 <HAL_MspInit+0x60>)
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002d6:	bf00      	nop
 80002d8:	3714      	adds	r7, #20
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr
 80002e0:	40021000 	.word	0x40021000
 80002e4:	40010000 	.word	0x40010000

080002e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002ec:	e7fe      	b.n	80002ec <NMI_Handler+0x4>

080002ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002ee:	b480      	push	{r7}
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002f2:	e7fe      	b.n	80002f2 <HardFault_Handler+0x4>

080002f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002f8:	e7fe      	b.n	80002f8 <MemManage_Handler+0x4>

080002fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002fa:	b480      	push	{r7}
 80002fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002fe:	e7fe      	b.n	80002fe <BusFault_Handler+0x4>

08000300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000304:	e7fe      	b.n	8000304 <UsageFault_Handler+0x4>

08000306 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000306:	b480      	push	{r7}
 8000308:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr

08000312 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000312:	b480      	push	{r7}
 8000314:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000316:	bf00      	nop
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr

0800031e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800031e:	b480      	push	{r7}
 8000320:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000322:	bf00      	nop
 8000324:	46bd      	mov	sp, r7
 8000326:	bc80      	pop	{r7}
 8000328:	4770      	bx	lr

0800032a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800032a:	b580      	push	{r7, lr}
 800032c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800032e:	f000 f87f 	bl	8000430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
	...

08000338 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800033c:	4802      	ldr	r0, [pc, #8]	; (8000348 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800033e:	f000 fac5 	bl	80008cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	20000e64 	.word	0x20000e64

0800034c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr

08000358 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000358:	f7ff fff8 	bl	800034c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800035c:	480b      	ldr	r0, [pc, #44]	; (800038c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800035e:	490c      	ldr	r1, [pc, #48]	; (8000390 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000360:	4a0c      	ldr	r2, [pc, #48]	; (8000394 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000364:	e002      	b.n	800036c <LoopCopyDataInit>

08000366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036a:	3304      	adds	r3, #4

0800036c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800036c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000370:	d3f9      	bcc.n	8000366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000372:	4a09      	ldr	r2, [pc, #36]	; (8000398 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000374:	4c09      	ldr	r4, [pc, #36]	; (800039c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000378:	e001      	b.n	800037e <LoopFillZerobss>

0800037a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800037c:	3204      	adds	r2, #4

0800037e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000380:	d3fb      	bcc.n	800037a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000382:	f006 fedb 	bl	800713c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000386:	f7ff fee1 	bl	800014c <main>
  bx lr
 800038a:	4770      	bx	lr
  ldr r0, =_sdata
 800038c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000390:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000394:	08007210 	.word	0x08007210
  ldr r2, =_sbss
 8000398:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 800039c:	20001374 	.word	0x20001374

080003a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a0:	e7fe      	b.n	80003a0 <ADC1_2_IRQHandler>
	...

080003a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003a8:	4b08      	ldr	r3, [pc, #32]	; (80003cc <HAL_Init+0x28>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a07      	ldr	r2, [pc, #28]	; (80003cc <HAL_Init+0x28>)
 80003ae:	f043 0310 	orr.w	r3, r3, #16
 80003b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003b4:	2003      	movs	r0, #3
 80003b6:	f000 f923 	bl	8000600 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80003ba:	200f      	movs	r0, #15
 80003bc:	f000 f808 	bl	80003d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80003c0:	f7ff ff60 	bl	8000284 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80003c4:	2300      	movs	r3, #0
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40022000 	.word	0x40022000

080003d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003d8:	4b12      	ldr	r3, [pc, #72]	; (8000424 <HAL_InitTick+0x54>)
 80003da:	681a      	ldr	r2, [r3, #0]
 80003dc:	4b12      	ldr	r3, [pc, #72]	; (8000428 <HAL_InitTick+0x58>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	4619      	mov	r1, r3
 80003e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80003ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80003ee:	4618      	mov	r0, r3
 80003f0:	f000 f93b 	bl	800066a <HAL_SYSTICK_Config>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80003fa:	2301      	movs	r3, #1
 80003fc:	e00e      	b.n	800041c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	2b0f      	cmp	r3, #15
 8000402:	d80a      	bhi.n	800041a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000404:	2200      	movs	r2, #0
 8000406:	6879      	ldr	r1, [r7, #4]
 8000408:	f04f 30ff 	mov.w	r0, #4294967295
 800040c:	f000 f903 	bl	8000616 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000410:	4a06      	ldr	r2, [pc, #24]	; (800042c <HAL_InitTick+0x5c>)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000416:	2300      	movs	r3, #0
 8000418:	e000      	b.n	800041c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800041a:	2301      	movs	r3, #1
}
 800041c:	4618      	mov	r0, r3
 800041e:	3708      	adds	r7, #8
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20000000 	.word	0x20000000
 8000428:	20000008 	.word	0x20000008
 800042c:	20000004 	.word	0x20000004

08000430 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000434:	4b05      	ldr	r3, [pc, #20]	; (800044c <HAL_IncTick+0x1c>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	461a      	mov	r2, r3
 800043a:	4b05      	ldr	r3, [pc, #20]	; (8000450 <HAL_IncTick+0x20>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4413      	add	r3, r2
 8000440:	4a03      	ldr	r2, [pc, #12]	; (8000450 <HAL_IncTick+0x20>)
 8000442:	6013      	str	r3, [r2, #0]
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	20000008 	.word	0x20000008
 8000450:	20000198 	.word	0x20000198

08000454 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  return uwTick;
 8000458:	4b02      	ldr	r3, [pc, #8]	; (8000464 <HAL_GetTick+0x10>)
 800045a:	681b      	ldr	r3, [r3, #0]
}
 800045c:	4618      	mov	r0, r3
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr
 8000464:	20000198 	.word	0x20000198

08000468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	f003 0307 	and.w	r3, r3, #7
 8000476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000478:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <__NVIC_SetPriorityGrouping+0x44>)
 800047a:	68db      	ldr	r3, [r3, #12]
 800047c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800047e:	68ba      	ldr	r2, [r7, #8]
 8000480:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000484:	4013      	ands	r3, r2
 8000486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000490:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800049a:	4a04      	ldr	r2, [pc, #16]	; (80004ac <__NVIC_SetPriorityGrouping+0x44>)
 800049c:	68bb      	ldr	r3, [r7, #8]
 800049e:	60d3      	str	r3, [r2, #12]
}
 80004a0:	bf00      	nop
 80004a2:	3714      	adds	r7, #20
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc80      	pop	{r7}
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	e000ed00 	.word	0xe000ed00

080004b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004b4:	4b04      	ldr	r3, [pc, #16]	; (80004c8 <__NVIC_GetPriorityGrouping+0x18>)
 80004b6:	68db      	ldr	r3, [r3, #12]
 80004b8:	0a1b      	lsrs	r3, r3, #8
 80004ba:	f003 0307 	and.w	r3, r3, #7
}
 80004be:	4618      	mov	r0, r3
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	e000ed00 	.word	0xe000ed00

080004cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	db0b      	blt.n	80004f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	f003 021f 	and.w	r2, r3, #31
 80004e4:	4906      	ldr	r1, [pc, #24]	; (8000500 <__NVIC_EnableIRQ+0x34>)
 80004e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ea:	095b      	lsrs	r3, r3, #5
 80004ec:	2001      	movs	r0, #1
 80004ee:	fa00 f202 	lsl.w	r2, r0, r2
 80004f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr
 8000500:	e000e100 	.word	0xe000e100

08000504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	6039      	str	r1, [r7, #0]
 800050e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000514:	2b00      	cmp	r3, #0
 8000516:	db0a      	blt.n	800052e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	b2da      	uxtb	r2, r3
 800051c:	490c      	ldr	r1, [pc, #48]	; (8000550 <__NVIC_SetPriority+0x4c>)
 800051e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000522:	0112      	lsls	r2, r2, #4
 8000524:	b2d2      	uxtb	r2, r2
 8000526:	440b      	add	r3, r1
 8000528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800052c:	e00a      	b.n	8000544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	b2da      	uxtb	r2, r3
 8000532:	4908      	ldr	r1, [pc, #32]	; (8000554 <__NVIC_SetPriority+0x50>)
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	f003 030f 	and.w	r3, r3, #15
 800053a:	3b04      	subs	r3, #4
 800053c:	0112      	lsls	r2, r2, #4
 800053e:	b2d2      	uxtb	r2, r2
 8000540:	440b      	add	r3, r1
 8000542:	761a      	strb	r2, [r3, #24]
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	e000e100 	.word	0xe000e100
 8000554:	e000ed00 	.word	0xe000ed00

08000558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000558:	b480      	push	{r7}
 800055a:	b089      	sub	sp, #36	; 0x24
 800055c:	af00      	add	r7, sp, #0
 800055e:	60f8      	str	r0, [r7, #12]
 8000560:	60b9      	str	r1, [r7, #8]
 8000562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	f003 0307 	and.w	r3, r3, #7
 800056a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800056c:	69fb      	ldr	r3, [r7, #28]
 800056e:	f1c3 0307 	rsb	r3, r3, #7
 8000572:	2b04      	cmp	r3, #4
 8000574:	bf28      	it	cs
 8000576:	2304      	movcs	r3, #4
 8000578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800057a:	69fb      	ldr	r3, [r7, #28]
 800057c:	3304      	adds	r3, #4
 800057e:	2b06      	cmp	r3, #6
 8000580:	d902      	bls.n	8000588 <NVIC_EncodePriority+0x30>
 8000582:	69fb      	ldr	r3, [r7, #28]
 8000584:	3b03      	subs	r3, #3
 8000586:	e000      	b.n	800058a <NVIC_EncodePriority+0x32>
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800058c:	f04f 32ff 	mov.w	r2, #4294967295
 8000590:	69bb      	ldr	r3, [r7, #24]
 8000592:	fa02 f303 	lsl.w	r3, r2, r3
 8000596:	43da      	mvns	r2, r3
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	401a      	ands	r2, r3
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005a0:	f04f 31ff 	mov.w	r1, #4294967295
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	fa01 f303 	lsl.w	r3, r1, r3
 80005aa:	43d9      	mvns	r1, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b0:	4313      	orrs	r3, r2
         );
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3724      	adds	r7, #36	; 0x24
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr

080005bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	3b01      	subs	r3, #1
 80005c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80005cc:	d301      	bcc.n	80005d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005ce:	2301      	movs	r3, #1
 80005d0:	e00f      	b.n	80005f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005d2:	4a0a      	ldr	r2, [pc, #40]	; (80005fc <SysTick_Config+0x40>)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	3b01      	subs	r3, #1
 80005d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005da:	210f      	movs	r1, #15
 80005dc:	f04f 30ff 	mov.w	r0, #4294967295
 80005e0:	f7ff ff90 	bl	8000504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005e4:	4b05      	ldr	r3, [pc, #20]	; (80005fc <SysTick_Config+0x40>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005ea:	4b04      	ldr	r3, [pc, #16]	; (80005fc <SysTick_Config+0x40>)
 80005ec:	2207      	movs	r2, #7
 80005ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005f0:	2300      	movs	r3, #0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	e000e010 	.word	0xe000e010

08000600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f7ff ff2d 	bl	8000468 <__NVIC_SetPriorityGrouping>
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000616:	b580      	push	{r7, lr}
 8000618:	b086      	sub	sp, #24
 800061a:	af00      	add	r7, sp, #0
 800061c:	4603      	mov	r3, r0
 800061e:	60b9      	str	r1, [r7, #8]
 8000620:	607a      	str	r2, [r7, #4]
 8000622:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000628:	f7ff ff42 	bl	80004b0 <__NVIC_GetPriorityGrouping>
 800062c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	68b9      	ldr	r1, [r7, #8]
 8000632:	6978      	ldr	r0, [r7, #20]
 8000634:	f7ff ff90 	bl	8000558 <NVIC_EncodePriority>
 8000638:	4602      	mov	r2, r0
 800063a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800063e:	4611      	mov	r1, r2
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ff5f 	bl	8000504 <__NVIC_SetPriority>
}
 8000646:	bf00      	nop
 8000648:	3718      	adds	r7, #24
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	b082      	sub	sp, #8
 8000652:	af00      	add	r7, sp, #0
 8000654:	4603      	mov	r3, r0
 8000656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ff35 	bl	80004cc <__NVIC_EnableIRQ>
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b082      	sub	sp, #8
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f7ff ffa2 	bl	80005bc <SysTick_Config>
 8000678:	4603      	mov	r3, r0
}
 800067a:	4618      	mov	r0, r3
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000682:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000684:	b08b      	sub	sp, #44	; 0x2c
 8000686:	af06      	add	r7, sp, #24
 8000688:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d101      	bne.n	8000694 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000690:	2301      	movs	r3, #1
 8000692:	e0f1      	b.n	8000878 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800069a:	b2db      	uxtb	r3, r3
 800069c:	2b00      	cmp	r3, #0
 800069e:	d106      	bne.n	80006ae <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2200      	movs	r2, #0
 80006a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f006 fa95 	bl	8006bd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2203      	movs	r2, #3
 80006b2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f002 fa0a 	bl	8002ad4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	687e      	ldr	r6, [r7, #4]
 80006c8:	466d      	mov	r5, sp
 80006ca:	f106 0410 	add.w	r4, r6, #16
 80006ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006d2:	6823      	ldr	r3, [r4, #0]
 80006d4:	602b      	str	r3, [r5, #0]
 80006d6:	1d33      	adds	r3, r6, #4
 80006d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006da:	6838      	ldr	r0, [r7, #0]
 80006dc:	f002 f9d4 	bl	8002a88 <USB_CoreInit>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d005      	beq.n	80006f2 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2202      	movs	r2, #2
 80006ea:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80006ee:	2301      	movs	r3, #1
 80006f0:	e0c2      	b.n	8000878 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 fa05 	bl	8002b08 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80006fe:	2300      	movs	r3, #0
 8000700:	73fb      	strb	r3, [r7, #15]
 8000702:	e040      	b.n	8000786 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	1c5a      	adds	r2, r3, #1
 800070a:	4613      	mov	r3, r2
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	4413      	add	r3, r2
 8000710:	00db      	lsls	r3, r3, #3
 8000712:	440b      	add	r3, r1
 8000714:	3301      	adds	r3, #1
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800071a:	7bfb      	ldrb	r3, [r7, #15]
 800071c:	6879      	ldr	r1, [r7, #4]
 800071e:	1c5a      	adds	r2, r3, #1
 8000720:	4613      	mov	r3, r2
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	4413      	add	r3, r2
 8000726:	00db      	lsls	r3, r3, #3
 8000728:	440b      	add	r3, r1
 800072a:	7bfa      	ldrb	r2, [r7, #15]
 800072c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	6879      	ldr	r1, [r7, #4]
 8000732:	1c5a      	adds	r2, r3, #1
 8000734:	4613      	mov	r3, r2
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	4413      	add	r3, r2
 800073a:	00db      	lsls	r3, r3, #3
 800073c:	440b      	add	r3, r1
 800073e:	3303      	adds	r3, #3
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000744:	7bfa      	ldrb	r2, [r7, #15]
 8000746:	6879      	ldr	r1, [r7, #4]
 8000748:	4613      	mov	r3, r2
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	4413      	add	r3, r2
 800074e:	00db      	lsls	r3, r3, #3
 8000750:	440b      	add	r3, r1
 8000752:	3338      	adds	r3, #56	; 0x38
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000758:	7bfa      	ldrb	r2, [r7, #15]
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	4613      	mov	r3, r2
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	4413      	add	r3, r2
 8000762:	00db      	lsls	r3, r3, #3
 8000764:	440b      	add	r3, r1
 8000766:	333c      	adds	r3, #60	; 0x3c
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800076c:	7bfa      	ldrb	r2, [r7, #15]
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	4613      	mov	r3, r2
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	4413      	add	r3, r2
 8000776:	00db      	lsls	r3, r3, #3
 8000778:	440b      	add	r3, r1
 800077a:	3340      	adds	r3, #64	; 0x40
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	3301      	adds	r3, #1
 8000784:	73fb      	strb	r3, [r7, #15]
 8000786:	7bfa      	ldrb	r2, [r7, #15]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	429a      	cmp	r2, r3
 800078e:	d3b9      	bcc.n	8000704 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000790:	2300      	movs	r3, #0
 8000792:	73fb      	strb	r3, [r7, #15]
 8000794:	e044      	b.n	8000820 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000796:	7bfa      	ldrb	r2, [r7, #15]
 8000798:	6879      	ldr	r1, [r7, #4]
 800079a:	4613      	mov	r3, r2
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	4413      	add	r3, r2
 80007a0:	00db      	lsls	r3, r3, #3
 80007a2:	440b      	add	r3, r1
 80007a4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80007ac:	7bfa      	ldrb	r2, [r7, #15]
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	4613      	mov	r3, r2
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	4413      	add	r3, r2
 80007b6:	00db      	lsls	r3, r3, #3
 80007b8:	440b      	add	r3, r1
 80007ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80007be:	7bfa      	ldrb	r2, [r7, #15]
 80007c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80007c2:	7bfa      	ldrb	r2, [r7, #15]
 80007c4:	6879      	ldr	r1, [r7, #4]
 80007c6:	4613      	mov	r3, r2
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	4413      	add	r3, r2
 80007cc:	00db      	lsls	r3, r3, #3
 80007ce:	440b      	add	r3, r1
 80007d0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80007d8:	7bfa      	ldrb	r2, [r7, #15]
 80007da:	6879      	ldr	r1, [r7, #4]
 80007dc:	4613      	mov	r3, r2
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	4413      	add	r3, r2
 80007e2:	00db      	lsls	r3, r3, #3
 80007e4:	440b      	add	r3, r1
 80007e6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80007ee:	7bfa      	ldrb	r2, [r7, #15]
 80007f0:	6879      	ldr	r1, [r7, #4]
 80007f2:	4613      	mov	r3, r2
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	4413      	add	r3, r2
 80007f8:	00db      	lsls	r3, r3, #3
 80007fa:	440b      	add	r3, r1
 80007fc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000804:	7bfa      	ldrb	r2, [r7, #15]
 8000806:	6879      	ldr	r1, [r7, #4]
 8000808:	4613      	mov	r3, r2
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	4413      	add	r3, r2
 800080e:	00db      	lsls	r3, r3, #3
 8000810:	440b      	add	r3, r1
 8000812:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800081a:	7bfb      	ldrb	r3, [r7, #15]
 800081c:	3301      	adds	r3, #1
 800081e:	73fb      	strb	r3, [r7, #15]
 8000820:	7bfa      	ldrb	r2, [r7, #15]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	429a      	cmp	r2, r3
 8000828:	d3b5      	bcc.n	8000796 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	687e      	ldr	r6, [r7, #4]
 8000832:	466d      	mov	r5, sp
 8000834:	f106 0410 	add.w	r4, r6, #16
 8000838:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800083a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800083c:	6823      	ldr	r3, [r4, #0]
 800083e:	602b      	str	r3, [r5, #0]
 8000840:	1d33      	adds	r3, r6, #4
 8000842:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000844:	6838      	ldr	r0, [r7, #0]
 8000846:	f002 f96b 	bl	8002b20 <USB_DevInit>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d005      	beq.n	800085c <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2202      	movs	r2, #2
 8000854:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000858:	2301      	movs	r3, #1
 800085a:	e00d      	b.n	8000878 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2200      	movs	r2, #0
 8000860:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2201      	movs	r2, #1
 8000868:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4618      	mov	r0, r3
 8000872:	f004 fbec 	bl	800504e <USB_DevDisconnect>

  return HAL_OK;
 8000876:	2300      	movs	r3, #0
}
 8000878:	4618      	mov	r0, r3
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000880 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800088e:	2b01      	cmp	r3, #1
 8000890:	d101      	bne.n	8000896 <HAL_PCD_Start+0x16>
 8000892:	2302      	movs	r3, #2
 8000894:	e016      	b.n	80008c4 <HAL_PCD_Start+0x44>
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2201      	movs	r2, #1
 800089a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f002 f900 	bl	8002aa8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80008a8:	2101      	movs	r1, #1
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f006 fc07 	bl	80070be <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f004 fbc0 	bl	800503a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2200      	movs	r2, #0
 80008be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80008c2:	2300      	movs	r3, #0
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b088      	sub	sp, #32
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f004 fbc2 	bl	8005062 <USB_ReadInterrupts>
 80008de:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80008e0:	69bb      	ldr	r3, [r7, #24]
 80008e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d003      	beq.n	80008f2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f000 fb1b 	bl	8000f26 <PCD_EP_ISR_Handler>

    return;
 80008f0:	e119      	b.n	8000b26 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80008f2:	69bb      	ldr	r3, [r7, #24]
 80008f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d013      	beq.n	8000924 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000904:	b29a      	uxth	r2, r3
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800090e:	b292      	uxth	r2, r2
 8000910:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f006 f9da 	bl	8006cce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800091a:	2100      	movs	r1, #0
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f000 f905 	bl	8000b2c <HAL_PCD_SetAddress>

    return;
 8000922:	e100      	b.n	8000b26 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800092a:	2b00      	cmp	r3, #0
 800092c:	d00c      	beq.n	8000948 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000936:	b29a      	uxth	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000940:	b292      	uxth	r2, r2
 8000942:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000946:	e0ee      	b.n	8000b26 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800094e:	2b00      	cmp	r3, #0
 8000950:	d00c      	beq.n	800096c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800095a:	b29a      	uxth	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000964:	b292      	uxth	r2, r2
 8000966:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800096a:	e0dc      	b.n	8000b26 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000972:	2b00      	cmp	r3, #0
 8000974:	d027      	beq.n	80009c6 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800097e:	b29a      	uxth	r2, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f022 0204 	bic.w	r2, r2, #4
 8000988:	b292      	uxth	r2, r2
 800098a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000996:	b29a      	uxth	r2, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f022 0208 	bic.w	r2, r2, #8
 80009a0:	b292      	uxth	r2, r2
 80009a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f006 f9ca 	bl	8006d40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80009be:	b292      	uxth	r2, r2
 80009c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80009c4:	e0af      	b.n	8000b26 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80009c6:	69bb      	ldr	r3, [r7, #24]
 80009c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	f000 8083 	beq.w	8000ad8 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80009d2:	2300      	movs	r3, #0
 80009d4:	77fb      	strb	r3, [r7, #31]
 80009d6:	e010      	b.n	80009fa <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	7ffb      	ldrb	r3, [r7, #31]
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	441a      	add	r2, r3
 80009e4:	7ffb      	ldrb	r3, [r7, #31]
 80009e6:	8812      	ldrh	r2, [r2, #0]
 80009e8:	b292      	uxth	r2, r2
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	3320      	adds	r3, #32
 80009ee:	443b      	add	r3, r7
 80009f0:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80009f4:	7ffb      	ldrb	r3, [r7, #31]
 80009f6:	3301      	adds	r3, #1
 80009f8:	77fb      	strb	r3, [r7, #31]
 80009fa:	7ffb      	ldrb	r3, [r7, #31]
 80009fc:	2b07      	cmp	r3, #7
 80009fe:	d9eb      	bls.n	80009d8 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f042 0201 	orr.w	r2, r2, #1
 8000a12:	b292      	uxth	r2, r2
 8000a14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f022 0201 	bic.w	r2, r2, #1
 8000a2a:	b292      	uxth	r2, r2
 8000a2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000a30:	bf00      	nop
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d0f6      	beq.n	8000a32 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a56:	b292      	uxth	r2, r2
 8000a58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	77fb      	strb	r3, [r7, #31]
 8000a60:	e00f      	b.n	8000a82 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000a62:	7ffb      	ldrb	r3, [r7, #31]
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	6812      	ldr	r2, [r2, #0]
 8000a68:	4611      	mov	r1, r2
 8000a6a:	7ffa      	ldrb	r2, [r7, #31]
 8000a6c:	0092      	lsls	r2, r2, #2
 8000a6e:	440a      	add	r2, r1
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	3320      	adds	r3, #32
 8000a74:	443b      	add	r3, r7
 8000a76:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000a7a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000a7c:	7ffb      	ldrb	r3, [r7, #31]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	77fb      	strb	r3, [r7, #31]
 8000a82:	7ffb      	ldrb	r3, [r7, #31]
 8000a84:	2b07      	cmp	r3, #7
 8000a86:	d9ec      	bls.n	8000a62 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f042 0208 	orr.w	r2, r2, #8
 8000a9a:	b292      	uxth	r2, r2
 8000a9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ab2:	b292      	uxth	r2, r2
 8000ab4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f042 0204 	orr.w	r2, r2, #4
 8000aca:	b292      	uxth	r2, r2
 8000acc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f006 f91b 	bl	8006d0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000ad6:	e026      	b.n	8000b26 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d00f      	beq.n	8000b02 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000af4:	b292      	uxth	r2, r2
 8000af6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f006 f8d9 	bl	8006cb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000b00:	e011      	b.n	8000b26 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d00c      	beq.n	8000b26 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b14:	b29a      	uxth	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b1e:	b292      	uxth	r2, r2
 8000b20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000b24:	bf00      	nop
  }
}
 8000b26:	3720      	adds	r7, #32
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	460b      	mov	r3, r1
 8000b36:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d101      	bne.n	8000b46 <HAL_PCD_SetAddress+0x1a>
 8000b42:	2302      	movs	r3, #2
 8000b44:	e013      	b.n	8000b6e <HAL_PCD_SetAddress+0x42>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	78fa      	ldrb	r2, [r7, #3]
 8000b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	78fa      	ldrb	r2, [r7, #3]
 8000b5c:	4611      	mov	r1, r2
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f004 fa58 	bl	8005014 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2200      	movs	r2, #0
 8000b68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b084      	sub	sp, #16
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
 8000b7e:	4608      	mov	r0, r1
 8000b80:	4611      	mov	r1, r2
 8000b82:	461a      	mov	r2, r3
 8000b84:	4603      	mov	r3, r0
 8000b86:	70fb      	strb	r3, [r7, #3]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	803b      	strh	r3, [r7, #0]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000b90:	2300      	movs	r3, #0
 8000b92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000b94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	da0e      	bge.n	8000bba <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000b9c:	78fb      	ldrb	r3, [r7, #3]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	1c5a      	adds	r2, r3, #1
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	4413      	add	r3, r2
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	4413      	add	r3, r2
 8000bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	705a      	strb	r2, [r3, #1]
 8000bb8:	e00e      	b.n	8000bd8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000bba:	78fb      	ldrb	r3, [r7, #3]
 8000bbc:	f003 0207 	and.w	r2, r3, #7
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	4413      	add	r3, r2
 8000bc6:	00db      	lsls	r3, r3, #3
 8000bc8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	4413      	add	r3, r2
 8000bd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000bd8:	78fb      	ldrb	r3, [r7, #3]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000be4:	883a      	ldrh	r2, [r7, #0]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	78ba      	ldrb	r2, [r7, #2]
 8000bee:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000bf0:	78bb      	ldrb	r3, [r7, #2]
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d102      	bne.n	8000bfc <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d101      	bne.n	8000c0a <HAL_PCD_EP_Open+0x94>
 8000c06:	2302      	movs	r3, #2
 8000c08:	e00e      	b.n	8000c28 <HAL_PCD_EP_Open+0xb2>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	68f9      	ldr	r1, [r7, #12]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f001 ffa1 	bl	8002b60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2200      	movs	r2, #0
 8000c22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8000c26:	7afb      	ldrb	r3, [r7, #11]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000c3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	da0e      	bge.n	8000c62 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c44:	78fb      	ldrb	r3, [r7, #3]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	1c5a      	adds	r2, r3, #1
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	4413      	add	r3, r2
 8000c52:	00db      	lsls	r3, r3, #3
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	4413      	add	r3, r2
 8000c58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	705a      	strb	r2, [r3, #1]
 8000c60:	e00e      	b.n	8000c80 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c62:	78fb      	ldrb	r3, [r7, #3]
 8000c64:	f003 0207 	and.w	r2, r3, #7
 8000c68:	4613      	mov	r3, r2
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4413      	add	r3, r2
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	4413      	add	r3, r2
 8000c78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8000c80:	78fb      	ldrb	r3, [r7, #3]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d101      	bne.n	8000c9a <HAL_PCD_EP_Close+0x6a>
 8000c96:	2302      	movs	r3, #2
 8000c98:	e00e      	b.n	8000cb8 <HAL_PCD_EP_Close+0x88>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	68f9      	ldr	r1, [r7, #12]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f002 fb19 	bl	80032e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8000cb6:	2300      	movs	r3, #0
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	607a      	str	r2, [r7, #4]
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000cd0:	7afb      	ldrb	r3, [r7, #11]
 8000cd2:	f003 0207 	and.w	r2, r3, #7
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	4413      	add	r3, r2
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	683a      	ldr	r2, [r7, #0]
 8000cf2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d00:	7afb      	ldrb	r3, [r7, #11]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	6979      	ldr	r1, [r7, #20]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f002 fcd0 	bl	80036b8 <USB_EPStartXfer>

  return HAL_OK;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000d2e:	78fb      	ldrb	r3, [r7, #3]
 8000d30:	f003 0207 	and.w	r2, r3, #7
 8000d34:	6879      	ldr	r1, [r7, #4]
 8000d36:	4613      	mov	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	440b      	add	r3, r1
 8000d40:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000d44:	681b      	ldr	r3, [r3, #0]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	607a      	str	r2, [r7, #4]
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d60:	7afb      	ldrb	r3, [r7, #11]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	1c5a      	adds	r2, r3, #1
 8000d68:	4613      	mov	r3, r2
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	4413      	add	r3, r2
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	68fa      	ldr	r2, [r7, #12]
 8000d72:	4413      	add	r3, r2
 8000d74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	683a      	ldr	r2, [r7, #0]
 8000d80:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	2201      	movs	r2, #1
 8000d86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	683a      	ldr	r2, [r7, #0]
 8000d8e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	2201      	movs	r2, #1
 8000d9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d9c:	7afb      	ldrb	r3, [r7, #11]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6979      	ldr	r1, [r7, #20]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f002 fc82 	bl	80036b8 <USB_EPStartXfer>

  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b084      	sub	sp, #16
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000dca:	78fb      	ldrb	r3, [r7, #3]
 8000dcc:	f003 0207 	and.w	r2, r3, #7
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d901      	bls.n	8000ddc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e04c      	b.n	8000e76 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000ddc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	da0e      	bge.n	8000e02 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000de4:	78fb      	ldrb	r3, [r7, #3]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	1c5a      	adds	r2, r3, #1
 8000dec:	4613      	mov	r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	4413      	add	r3, r2
 8000df2:	00db      	lsls	r3, r3, #3
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	4413      	add	r3, r2
 8000df8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	705a      	strb	r2, [r3, #1]
 8000e00:	e00c      	b.n	8000e1c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000e02:	78fa      	ldrb	r2, [r7, #3]
 8000e04:	4613      	mov	r3, r2
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	4413      	add	r3, r2
 8000e0a:	00db      	lsls	r3, r3, #3
 8000e0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	4413      	add	r3, r2
 8000e14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2201      	movs	r2, #1
 8000e20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e22:	78fb      	ldrb	r3, [r7, #3]
 8000e24:	f003 0307 	and.w	r3, r3, #7
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d101      	bne.n	8000e3c <HAL_PCD_EP_SetStall+0x7e>
 8000e38:	2302      	movs	r3, #2
 8000e3a:	e01c      	b.n	8000e76 <HAL_PCD_EP_SetStall+0xb8>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	68f9      	ldr	r1, [r7, #12]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f003 ffe5 	bl	8004e1a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000e50:	78fb      	ldrb	r3, [r7, #3]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d108      	bne.n	8000e6c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8000e64:	4619      	mov	r1, r3
 8000e66:	4610      	mov	r0, r2
 8000e68:	f004 f90a 	bl	8005080 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b084      	sub	sp, #16
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
 8000e86:	460b      	mov	r3, r1
 8000e88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000e8a:	78fb      	ldrb	r3, [r7, #3]
 8000e8c:	f003 020f 	and.w	r2, r3, #15
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d901      	bls.n	8000e9c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e040      	b.n	8000f1e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000e9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	da0e      	bge.n	8000ec2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000ea4:	78fb      	ldrb	r3, [r7, #3]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	1c5a      	adds	r2, r3, #1
 8000eac:	4613      	mov	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	00db      	lsls	r3, r3, #3
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	705a      	strb	r2, [r3, #1]
 8000ec0:	e00e      	b.n	8000ee0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000ec2:	78fb      	ldrb	r3, [r7, #3]
 8000ec4:	f003 0207 	and.w	r2, r3, #7
 8000ec8:	4613      	mov	r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	4413      	add	r3, r2
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2200      	movs	r2, #0
 8000ede:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000ee6:	78fb      	ldrb	r3, [r7, #3]
 8000ee8:	f003 0307 	and.w	r3, r3, #7
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d101      	bne.n	8000f00 <HAL_PCD_EP_ClrStall+0x82>
 8000efc:	2302      	movs	r3, #2
 8000efe:	e00e      	b.n	8000f1e <HAL_PCD_EP_ClrStall+0xa0>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2201      	movs	r2, #1
 8000f04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	68f9      	ldr	r1, [r7, #12]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f003 ffd3 	bl	8004eba <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b096      	sub	sp, #88	; 0x58
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000f2e:	e3bf      	b.n	80016b0 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f38:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000f3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	f003 030f 	and.w	r3, r3, #15
 8000f46:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8000f4a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f040 8179 	bne.w	8001246 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000f54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000f58:	f003 0310 	and.w	r3, r3, #16
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d152      	bne.n	8001006 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f70:	81fb      	strh	r3, [r7, #14]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	89fb      	ldrh	r3, [r7, #14]
 8000f78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000f7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3328      	adds	r3, #40	; 0x28
 8000f88:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	461a      	mov	r2, r3
 8000f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	00db      	lsls	r3, r3, #3
 8000f9c:	4413      	add	r3, r2
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	6812      	ldr	r2, [r2, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fb4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8000fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fb8:	695a      	ldr	r2, [r3, #20]
 8000fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	441a      	add	r2, r3
 8000fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fc2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f005 fe59 	bl	8006c7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f000 836b 	beq.w	80016b0 <PCD_EP_ISR_Handler+0x78a>
 8000fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f040 8366 	bne.w	80016b0 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	b292      	uxth	r2, r2
 8000ff8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001004:	e354      	b.n	80016b0 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800100c:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001018:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800101c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001020:	2b00      	cmp	r3, #0
 8001022:	d034      	beq.n	800108e <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800102c:	b29b      	uxth	r3, r3
 800102e:	461a      	mov	r2, r3
 8001030:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	4413      	add	r3, r2
 8001038:	3306      	adds	r3, #6
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	6812      	ldr	r2, [r2, #0]
 8001040:	4413      	add	r3, r2
 8001042:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800104c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800104e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6818      	ldr	r0, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800105a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800105c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800105e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001060:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001062:	b29b      	uxth	r3, r3
 8001064:	f004 f85c 	bl	8005120 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	b29a      	uxth	r2, r3
 8001070:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001074:	4013      	ands	r3, r2
 8001076:	823b      	strh	r3, [r7, #16]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	8a3a      	ldrh	r2, [r7, #16]
 800107e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001082:	b292      	uxth	r2, r2
 8001084:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f005 fdcc 	bl	8006c24 <HAL_PCD_SetupStageCallback>
 800108c:	e310      	b.n	80016b0 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800108e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001092:	2b00      	cmp	r3, #0
 8001094:	f280 830c 	bge.w	80016b0 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	b29a      	uxth	r2, r3
 80010a0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80010a4:	4013      	ands	r3, r2
 80010a6:	83fb      	strh	r3, [r7, #30]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	8bfa      	ldrh	r2, [r7, #30]
 80010ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010b2:	b292      	uxth	r2, r2
 80010b4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80010be:	b29b      	uxth	r3, r3
 80010c0:	461a      	mov	r2, r3
 80010c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	4413      	add	r3, r2
 80010ca:	3306      	adds	r3, #6
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	6812      	ldr	r2, [r2, #0]
 80010d2:	4413      	add	r3, r2
 80010d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80010de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010e0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80010e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d019      	beq.n	800111e <PCD_EP_ISR_Handler+0x1f8>
 80010ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d015      	beq.n	800111e <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6818      	ldr	r0, [r3, #0]
 80010f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010f8:	6959      	ldr	r1, [r3, #20]
 80010fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010fc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80010fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001100:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001102:	b29b      	uxth	r3, r3
 8001104:	f004 f80c 	bl	8005120 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800110a:	695a      	ldr	r2, [r3, #20]
 800110c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800110e:	69db      	ldr	r3, [r3, #28]
 8001110:	441a      	add	r2, r3
 8001112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001114:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001116:	2100      	movs	r1, #0
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f005 fd95 	bl	8006c48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001128:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800112c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001130:	2b00      	cmp	r3, #0
 8001132:	f040 82bd 	bne.w	80016b0 <PCD_EP_ISR_Handler+0x78a>
 8001136:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800113a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800113e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001142:	f000 82b5 	beq.w	80016b0 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	61bb      	str	r3, [r7, #24]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001154:	b29b      	uxth	r3, r3
 8001156:	461a      	mov	r2, r3
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	4413      	add	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	b29b      	uxth	r3, r3
 800116c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001170:	b29a      	uxth	r2, r3
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	801a      	strh	r2, [r3, #0]
 8001176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	2b3e      	cmp	r3, #62	; 0x3e
 800117c:	d91d      	bls.n	80011ba <PCD_EP_ISR_Handler+0x294>
 800117e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	095b      	lsrs	r3, r3, #5
 8001184:	647b      	str	r3, [r7, #68]	; 0x44
 8001186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	f003 031f 	and.w	r3, r3, #31
 800118e:	2b00      	cmp	r3, #0
 8001190:	d102      	bne.n	8001198 <PCD_EP_ISR_Handler+0x272>
 8001192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001194:	3b01      	subs	r3, #1
 8001196:	647b      	str	r3, [r7, #68]	; 0x44
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	b29a      	uxth	r2, r3
 800119e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	029b      	lsls	r3, r3, #10
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80011ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	801a      	strh	r2, [r3, #0]
 80011b8:	e026      	b.n	8001208 <PCD_EP_ISR_Handler+0x2e2>
 80011ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d10a      	bne.n	80011d8 <PCD_EP_ISR_Handler+0x2b2>
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80011cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	801a      	strh	r2, [r3, #0]
 80011d6:	e017      	b.n	8001208 <PCD_EP_ISR_Handler+0x2e2>
 80011d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	085b      	lsrs	r3, r3, #1
 80011de:	647b      	str	r3, [r7, #68]	; 0x44
 80011e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011e2:	691b      	ldr	r3, [r3, #16]
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d002      	beq.n	80011f2 <PCD_EP_ISR_Handler+0x2cc>
 80011ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011ee:	3301      	adds	r3, #1
 80011f0:	647b      	str	r3, [r7, #68]	; 0x44
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	881b      	ldrh	r3, [r3, #0]
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	029b      	lsls	r3, r3, #10
 80011fe:	b29b      	uxth	r3, r3
 8001200:	4313      	orrs	r3, r2
 8001202:	b29a      	uxth	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	b29b      	uxth	r3, r3
 8001210:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001218:	827b      	strh	r3, [r7, #18]
 800121a:	8a7b      	ldrh	r3, [r7, #18]
 800121c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001220:	827b      	strh	r3, [r7, #18]
 8001222:	8a7b      	ldrh	r3, [r7, #18]
 8001224:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001228:	827b      	strh	r3, [r7, #18]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	8a7b      	ldrh	r3, [r7, #18]
 8001230:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001234:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001238:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800123c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001240:	b29b      	uxth	r3, r3
 8001242:	8013      	strh	r3, [r2, #0]
 8001244:	e234      	b.n	80016b0 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	881b      	ldrh	r3, [r3, #0]
 8001256:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800125a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800125e:	2b00      	cmp	r3, #0
 8001260:	f280 80fc 	bge.w	800145c <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	b29a      	uxth	r2, r3
 8001276:	f640 738f 	movw	r3, #3983	; 0xf8f
 800127a:	4013      	ands	r3, r2
 800127c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4413      	add	r3, r2
 800128e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001292:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001296:	b292      	uxth	r2, r2
 8001298:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800129a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800129e:	4613      	mov	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80012b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012b2:	7b1b      	ldrb	r3, [r3, #12]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d125      	bne.n	8001304 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	461a      	mov	r2, r3
 80012c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	4413      	add	r3, r2
 80012cc:	3306      	adds	r3, #6
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	6812      	ldr	r2, [r2, #0]
 80012d4:	4413      	add	r3, r2
 80012d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012da:	881b      	ldrh	r3, [r3, #0]
 80012dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012e0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80012e4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 8092 	beq.w	8001412 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012f4:	6959      	ldr	r1, [r3, #20]
 80012f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012f8:	88da      	ldrh	r2, [r3, #6]
 80012fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80012fe:	f003 ff0f 	bl	8005120 <USB_ReadPMA>
 8001302:	e086      	b.n	8001412 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001304:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001306:	78db      	ldrb	r3, [r3, #3]
 8001308:	2b02      	cmp	r3, #2
 800130a:	d10a      	bne.n	8001322 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800130c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001310:	461a      	mov	r2, r3
 8001312:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 f9d9 	bl	80016cc <HAL_PCD_EP_DB_Receive>
 800131a:	4603      	mov	r3, r0
 800131c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001320:	e077      	b.n	8001412 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	b29b      	uxth	r3, r3
 8001334:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800133c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	441a      	add	r2, r3
 800134e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001352:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001356:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800135a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800135e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001362:	b29b      	uxth	r3, r3
 8001364:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4413      	add	r3, r2
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	b29b      	uxth	r3, r3
 8001378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d024      	beq.n	80013ca <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001388:	b29b      	uxth	r3, r3
 800138a:	461a      	mov	r2, r3
 800138c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	4413      	add	r3, r2
 8001394:	3302      	adds	r3, #2
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	6812      	ldr	r2, [r2, #0]
 800139c:	4413      	add	r3, r2
 800139e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013a8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80013ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d02e      	beq.n	8001412 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6818      	ldr	r0, [r3, #0]
 80013b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013ba:	6959      	ldr	r1, [r3, #20]
 80013bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013be:	891a      	ldrh	r2, [r3, #8]
 80013c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80013c4:	f003 feac 	bl	8005120 <USB_ReadPMA>
 80013c8:	e023      	b.n	8001412 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	461a      	mov	r2, r3
 80013d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	4413      	add	r3, r2
 80013de:	3306      	adds	r3, #6
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	6812      	ldr	r2, [r2, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013f2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80013f6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d009      	beq.n	8001412 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6818      	ldr	r0, [r3, #0]
 8001402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001404:	6959      	ldr	r1, [r3, #20]
 8001406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001408:	895a      	ldrh	r2, [r3, #10]
 800140a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800140e:	f003 fe87 	bl	8005120 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001414:	69da      	ldr	r2, [r3, #28]
 8001416:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800141a:	441a      	add	r2, r3
 800141c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800141e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001422:	695a      	ldr	r2, [r3, #20]
 8001424:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001428:	441a      	add	r2, r3
 800142a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800142c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800142e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d005      	beq.n	8001442 <PCD_EP_ISR_Handler+0x51c>
 8001436:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800143a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	429a      	cmp	r2, r3
 8001440:	d206      	bcs.n	8001450 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	4619      	mov	r1, r3
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f005 fbfd 	bl	8006c48 <HAL_PCD_DataOutStageCallback>
 800144e:	e005      	b.n	800145c <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001456:	4618      	mov	r0, r3
 8001458:	f002 f92e 	bl	80036b8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800145c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 8123 	beq.w	80016b0 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 800146a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800146e:	1c5a      	adds	r2, r3, #1
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	4413      	add	r3, r2
 800147c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	b29b      	uxth	r3, r3
 8001490:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001498:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	441a      	add	r2, r3
 80014aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80014ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80014b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80014ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014bc:	78db      	ldrb	r3, [r3, #3]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	f040 80a2 	bne.w	8001608 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 80014c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014c6:	2200      	movs	r2, #0
 80014c8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80014ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014cc:	7b1b      	ldrb	r3, [r3, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 8093 	beq.w	80015fa <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80014d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80014d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d046      	beq.n	800156e <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80014e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014e2:	785b      	ldrb	r3, [r3, #1]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d126      	bne.n	8001536 <PCD_EP_ISR_Handler+0x610>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	461a      	mov	r2, r3
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	4413      	add	r3, r2
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	011a      	lsls	r2, r3, #4
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	4413      	add	r3, r2
 800150a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800150e:	623b      	str	r3, [r7, #32]
 8001510:	6a3b      	ldr	r3, [r7, #32]
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	b29b      	uxth	r3, r3
 8001516:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800151a:	b29a      	uxth	r2, r3
 800151c:	6a3b      	ldr	r3, [r7, #32]
 800151e:	801a      	strh	r2, [r3, #0]
 8001520:	6a3b      	ldr	r3, [r7, #32]
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	b29b      	uxth	r3, r3
 8001526:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800152a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800152e:	b29a      	uxth	r2, r3
 8001530:	6a3b      	ldr	r3, [r7, #32]
 8001532:	801a      	strh	r2, [r3, #0]
 8001534:	e061      	b.n	80015fa <PCD_EP_ISR_Handler+0x6d4>
 8001536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001538:	785b      	ldrb	r3, [r3, #1]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d15d      	bne.n	80015fa <PCD_EP_ISR_Handler+0x6d4>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800154c:	b29b      	uxth	r3, r3
 800154e:	461a      	mov	r2, r3
 8001550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001552:	4413      	add	r3, r2
 8001554:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	011a      	lsls	r2, r3, #4
 800155c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155e:	4413      	add	r3, r2
 8001560:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
 8001566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001568:	2200      	movs	r2, #0
 800156a:	801a      	strh	r2, [r3, #0]
 800156c:	e045      	b.n	80015fa <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001576:	785b      	ldrb	r3, [r3, #1]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d126      	bne.n	80015ca <PCD_EP_ISR_Handler+0x6a4>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	637b      	str	r3, [r7, #52]	; 0x34
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800158a:	b29b      	uxth	r3, r3
 800158c:	461a      	mov	r2, r3
 800158e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001590:	4413      	add	r3, r2
 8001592:	637b      	str	r3, [r7, #52]	; 0x34
 8001594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	011a      	lsls	r2, r3, #4
 800159a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800159c:	4413      	add	r3, r2
 800159e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80015a2:	633b      	str	r3, [r7, #48]	; 0x30
 80015a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b2:	801a      	strh	r2, [r3, #0]
 80015b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80015be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015c6:	801a      	strh	r2, [r3, #0]
 80015c8:	e017      	b.n	80015fa <PCD_EP_ISR_Handler+0x6d4>
 80015ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015cc:	785b      	ldrb	r3, [r3, #1]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d113      	bne.n	80015fa <PCD_EP_ISR_Handler+0x6d4>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015da:	b29b      	uxth	r3, r3
 80015dc:	461a      	mov	r2, r3
 80015de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015e0:	4413      	add	r3, r2
 80015e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	011a      	lsls	r2, r3, #4
 80015ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015ec:	4413      	add	r3, r2
 80015ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80015f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80015f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015f6:	2200      	movs	r2, #0
 80015f8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80015fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	4619      	mov	r1, r3
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f005 fb3c 	bl	8006c7e <HAL_PCD_DataInStageCallback>
 8001606:	e053      	b.n	80016b0 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001608:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800160c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001610:	2b00      	cmp	r3, #0
 8001612:	d146      	bne.n	80016a2 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800161c:	b29b      	uxth	r3, r3
 800161e:	461a      	mov	r2, r3
 8001620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	4413      	add	r3, r2
 8001628:	3302      	adds	r3, #2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6812      	ldr	r2, [r2, #0]
 8001630:	4413      	add	r3, r2
 8001632:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800163c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001642:	699a      	ldr	r2, [r3, #24]
 8001644:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001648:	429a      	cmp	r2, r3
 800164a:	d907      	bls.n	800165c <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 800164c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800164e:	699a      	ldr	r2, [r3, #24]
 8001650:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001654:	1ad2      	subs	r2, r2, r3
 8001656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001658:	619a      	str	r2, [r3, #24]
 800165a:	e002      	b.n	8001662 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 800165c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800165e:	2200      	movs	r2, #0
 8001660:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d106      	bne.n	8001678 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800166a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	4619      	mov	r1, r3
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f005 fb04 	bl	8006c7e <HAL_PCD_DataInStageCallback>
 8001676:	e01b      	b.n	80016b0 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800167a:	695a      	ldr	r2, [r3, #20]
 800167c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001680:	441a      	add	r2, r3
 8001682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001684:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001688:	69da      	ldr	r2, [r3, #28]
 800168a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800168e:	441a      	add	r2, r3
 8001690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001692:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800169a:	4618      	mov	r0, r3
 800169c:	f002 f80c 	bl	80036b8 <USB_EPStartXfer>
 80016a0:	e006      	b.n	80016b0 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80016a2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80016a6:	461a      	mov	r2, r3
 80016a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 f91b 	bl	80018e6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	b21b      	sxth	r3, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f6ff ac37 	blt.w	8000f30 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3758      	adds	r7, #88	; 0x58
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	4613      	mov	r3, r2
 80016d8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80016da:	88fb      	ldrh	r3, [r7, #6]
 80016dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d07e      	beq.n	80017e2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	461a      	mov	r2, r3
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	4413      	add	r3, r2
 80016f8:	3302      	adds	r3, #2
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	6812      	ldr	r2, [r2, #0]
 8001700:	4413      	add	r3, r2
 8001702:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800170c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	699a      	ldr	r2, [r3, #24]
 8001712:	8b7b      	ldrh	r3, [r7, #26]
 8001714:	429a      	cmp	r2, r3
 8001716:	d306      	bcc.n	8001726 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	699a      	ldr	r2, [r3, #24]
 800171c:	8b7b      	ldrh	r3, [r7, #26]
 800171e:	1ad2      	subs	r2, r2, r3
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	619a      	str	r2, [r3, #24]
 8001724:	e002      	b.n	800172c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d123      	bne.n	800177c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	b29b      	uxth	r3, r3
 8001746:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800174a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800174e:	833b      	strh	r3, [r7, #24]
 8001750:	8b3b      	ldrh	r3, [r7, #24]
 8001752:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001756:	833b      	strh	r3, [r7, #24]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	441a      	add	r2, r3
 8001766:	8b3b      	ldrh	r3, [r7, #24]
 8001768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800176c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001778:	b29b      	uxth	r3, r3
 800177a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001782:	2b00      	cmp	r3, #0
 8001784:	d01f      	beq.n	80017c6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	461a      	mov	r2, r3
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	b29b      	uxth	r3, r3
 8001798:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800179c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017a0:	82fb      	strh	r3, [r7, #22]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	461a      	mov	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	441a      	add	r2, r3
 80017b0:	8afb      	ldrh	r3, [r7, #22]
 80017b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80017b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80017ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80017c6:	8b7b      	ldrh	r3, [r7, #26]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 8087 	beq.w	80018dc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6818      	ldr	r0, [r3, #0]
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	6959      	ldr	r1, [r3, #20]
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	891a      	ldrh	r2, [r3, #8]
 80017da:	8b7b      	ldrh	r3, [r7, #26]
 80017dc:	f003 fca0 	bl	8005120 <USB_ReadPMA>
 80017e0:	e07c      	b.n	80018dc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	461a      	mov	r2, r3
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	4413      	add	r3, r2
 80017f6:	3306      	adds	r3, #6
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	6812      	ldr	r2, [r2, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800180a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	699a      	ldr	r2, [r3, #24]
 8001810:	8b7b      	ldrh	r3, [r7, #26]
 8001812:	429a      	cmp	r2, r3
 8001814:	d306      	bcc.n	8001824 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	699a      	ldr	r2, [r3, #24]
 800181a:	8b7b      	ldrh	r3, [r7, #26]
 800181c:	1ad2      	subs	r2, r2, r3
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	619a      	str	r2, [r3, #24]
 8001822:	e002      	b.n	800182a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	2200      	movs	r2, #0
 8001828:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d123      	bne.n	800187a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	461a      	mov	r2, r3
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	b29b      	uxth	r3, r3
 8001844:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800184c:	83fb      	strh	r3, [r7, #30]
 800184e:	8bfb      	ldrh	r3, [r7, #30]
 8001850:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001854:	83fb      	strh	r3, [r7, #30]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	461a      	mov	r2, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	441a      	add	r2, r3
 8001864:	8bfb      	ldrh	r3, [r7, #30]
 8001866:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800186a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800186e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001876:	b29b      	uxth	r3, r3
 8001878:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800187a:	88fb      	ldrh	r3, [r7, #6]
 800187c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001880:	2b00      	cmp	r3, #0
 8001882:	d11f      	bne.n	80018c4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	461a      	mov	r2, r3
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	b29b      	uxth	r3, r3
 8001896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800189a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800189e:	83bb      	strh	r3, [r7, #28]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	441a      	add	r2, r3
 80018ae:	8bbb      	ldrh	r3, [r7, #28]
 80018b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80018b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80018b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80018c4:	8b7b      	ldrh	r3, [r7, #26]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d008      	beq.n	80018dc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6818      	ldr	r0, [r3, #0]
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	6959      	ldr	r1, [r3, #20]
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	895a      	ldrh	r2, [r3, #10]
 80018d6:	8b7b      	ldrh	r3, [r7, #26]
 80018d8:	f003 fc22 	bl	8005120 <USB_ReadPMA>
    }
  }

  return count;
 80018dc:	8b7b      	ldrh	r3, [r7, #26]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3720      	adds	r7, #32
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b0a4      	sub	sp, #144	; 0x90
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	60f8      	str	r0, [r7, #12]
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	4613      	mov	r3, r2
 80018f2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80018f4:	88fb      	ldrh	r3, [r7, #6]
 80018f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 81dd 	beq.w	8001cba <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001908:	b29b      	uxth	r3, r3
 800190a:	461a      	mov	r2, r3
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	4413      	add	r3, r2
 8001914:	3302      	adds	r3, #2
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	4413      	add	r3, r2
 800191e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001928:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	699a      	ldr	r2, [r3, #24]
 8001930:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001934:	429a      	cmp	r2, r3
 8001936:	d907      	bls.n	8001948 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	699a      	ldr	r2, [r3, #24]
 800193c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001940:	1ad2      	subs	r2, r2, r3
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	619a      	str	r2, [r3, #24]
 8001946:	e002      	b.n	800194e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	2200      	movs	r2, #0
 800194c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	2b00      	cmp	r3, #0
 8001954:	f040 80b9 	bne.w	8001aca <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	785b      	ldrb	r3, [r3, #1]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d126      	bne.n	80019ae <HAL_PCD_EP_DB_Transmit+0xc8>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800196e:	b29b      	uxth	r3, r3
 8001970:	461a      	mov	r2, r3
 8001972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001974:	4413      	add	r3, r2
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	011a      	lsls	r2, r3, #4
 800197e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001980:	4413      	add	r3, r2
 8001982:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
 8001988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	b29b      	uxth	r3, r3
 800198e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001992:	b29a      	uxth	r2, r3
 8001994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001996:	801a      	strh	r2, [r3, #0]
 8001998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	b29b      	uxth	r3, r3
 800199e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019aa:	801a      	strh	r2, [r3, #0]
 80019ac:	e01a      	b.n	80019e4 <HAL_PCD_EP_DB_Transmit+0xfe>
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	785b      	ldrb	r3, [r3, #1]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d116      	bne.n	80019e4 <HAL_PCD_EP_DB_Transmit+0xfe>
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	637b      	str	r3, [r7, #52]	; 0x34
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	461a      	mov	r2, r3
 80019c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ca:	4413      	add	r3, r2
 80019cc:	637b      	str	r3, [r7, #52]	; 0x34
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	011a      	lsls	r2, r3, #4
 80019d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019d6:	4413      	add	r3, r2
 80019d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80019dc:	633b      	str	r3, [r7, #48]	; 0x30
 80019de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e0:	2200      	movs	r2, #0
 80019e2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	785b      	ldrb	r3, [r3, #1]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d126      	bne.n	8001a40 <HAL_PCD_EP_DB_Transmit+0x15a>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	61fb      	str	r3, [r7, #28]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	461a      	mov	r2, r3
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	4413      	add	r3, r2
 8001a08:	61fb      	str	r3, [r7, #28]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	011a      	lsls	r2, r3, #4
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	4413      	add	r3, r2
 8001a14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a18:	61bb      	str	r3, [r7, #24]
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	801a      	strh	r2, [r3, #0]
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	801a      	strh	r2, [r3, #0]
 8001a3e:	e017      	b.n	8001a70 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	785b      	ldrb	r3, [r3, #1]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d113      	bne.n	8001a70 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	461a      	mov	r2, r3
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	4413      	add	r3, r2
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	011a      	lsls	r2, r3, #4
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	4413      	add	r3, r2
 8001a64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a68:	623b      	str	r3, [r7, #32]
 8001a6a:	6a3b      	ldr	r3, [r7, #32]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	4619      	mov	r1, r3
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f005 f901 	bl	8006c7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 82fc 	beq.w	8002080 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aa2:	82fb      	strh	r3, [r7, #22]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	441a      	add	r2, r3
 8001ab2:	8afb      	ldrh	r3, [r7, #22]
 8001ab4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ab8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001abc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	8013      	strh	r3, [r2, #0]
 8001ac8:	e2da      	b.n	8002080 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001aca:	88fb      	ldrh	r3, [r7, #6]
 8001acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d021      	beq.n	8001b18 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aee:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	461a      	mov	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	441a      	add	r2, r3
 8001b00:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8001b04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	f040 82ae 	bne.w	8002080 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	695a      	ldr	r2, [r3, #20]
 8001b28:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001b2c:	441a      	add	r2, r3
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	69da      	ldr	r2, [r3, #28]
 8001b36:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001b3a:	441a      	add	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	6a1a      	ldr	r2, [r3, #32]
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d30b      	bcc.n	8001b64 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	6a1a      	ldr	r2, [r3, #32]
 8001b58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b5c:	1ad2      	subs	r2, r2, r3
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	621a      	str	r2, [r3, #32]
 8001b62:	e017      	b.n	8001b94 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d108      	bne.n	8001b7e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8001b6c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001b70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001b7c:	e00a      	b.n	8001b94 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	2200      	movs	r2, #0
 8001b92:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	785b      	ldrb	r3, [r3, #1]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d165      	bne.n	8001c68 <HAL_PCD_EP_DB_Transmit+0x382>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	461a      	mov	r2, r3
 8001bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bb0:	4413      	add	r3, r2
 8001bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	011a      	lsls	r2, r3, #4
 8001bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001bc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd2:	801a      	strh	r2, [r3, #0]
 8001bd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bd8:	2b3e      	cmp	r3, #62	; 0x3e
 8001bda:	d91d      	bls.n	8001c18 <HAL_PCD_EP_DB_Transmit+0x332>
 8001bdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001be0:	095b      	lsrs	r3, r3, #5
 8001be2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001be4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001be8:	f003 031f 	and.w	r3, r3, #31
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d102      	bne.n	8001bf6 <HAL_PCD_EP_DB_Transmit+0x310>
 8001bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	029b      	lsls	r3, r3, #10
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	4313      	orrs	r3, r2
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c14:	801a      	strh	r2, [r3, #0]
 8001c16:	e044      	b.n	8001ca2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001c18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10a      	bne.n	8001c36 <HAL_PCD_EP_DB_Transmit+0x350>
 8001c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c32:	801a      	strh	r2, [r3, #0]
 8001c34:	e035      	b.n	8001ca2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001c36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c3a:	085b      	lsrs	r3, r3, #1
 8001c3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d002      	beq.n	8001c50 <HAL_PCD_EP_DB_Transmit+0x36a>
 8001c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	029b      	lsls	r3, r3, #10
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c64:	801a      	strh	r2, [r3, #0]
 8001c66:	e01c      	b.n	8001ca2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	785b      	ldrb	r3, [r3, #1]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d118      	bne.n	8001ca2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	647b      	str	r3, [r7, #68]	; 0x44
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	461a      	mov	r2, r3
 8001c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c84:	4413      	add	r3, r2
 8001c86:	647b      	str	r3, [r7, #68]	; 0x44
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	011a      	lsls	r2, r3, #4
 8001c8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c90:	4413      	add	r3, r2
 8001c92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001c96:	643b      	str	r3, [r7, #64]	; 0x40
 8001c98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ca0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	6959      	ldr	r1, [r3, #20]
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	891a      	ldrh	r2, [r3, #8]
 8001cae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	f003 f9ef 	bl	8005096 <USB_WritePMA>
 8001cb8:	e1e2      	b.n	8002080 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	4413      	add	r3, r2
 8001cce:	3306      	adds	r3, #6
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	6812      	ldr	r2, [r2, #0]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ce2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	699a      	ldr	r2, [r3, #24]
 8001cea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d307      	bcc.n	8001d02 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	699a      	ldr	r2, [r3, #24]
 8001cf6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001cfa:	1ad2      	subs	r2, r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	619a      	str	r2, [r3, #24]
 8001d00:	e002      	b.n	8001d08 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	2200      	movs	r2, #0
 8001d06:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f040 80c0 	bne.w	8001e92 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	785b      	ldrb	r3, [r3, #1]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d126      	bne.n	8001d68 <HAL_PCD_EP_DB_Transmit+0x482>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d2e:	4413      	add	r3, r2
 8001d30:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	011a      	lsls	r2, r3, #4
 8001d38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d40:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d50:	801a      	strh	r2, [r3, #0]
 8001d52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d64:	801a      	strh	r2, [r3, #0]
 8001d66:	e01a      	b.n	8001d9e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	785b      	ldrb	r3, [r3, #1]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d116      	bne.n	8001d9e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	667b      	str	r3, [r7, #100]	; 0x64
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	461a      	mov	r2, r3
 8001d82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d84:	4413      	add	r3, r2
 8001d86:	667b      	str	r3, [r7, #100]	; 0x64
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	011a      	lsls	r2, r3, #4
 8001d8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d90:	4413      	add	r3, r2
 8001d92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d96:	663b      	str	r3, [r7, #96]	; 0x60
 8001d98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	677b      	str	r3, [r7, #116]	; 0x74
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	785b      	ldrb	r3, [r3, #1]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d12b      	bne.n	8001e04 <HAL_PCD_EP_DB_Transmit+0x51e>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dc0:	4413      	add	r3, r2
 8001dc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	011a      	lsls	r2, r3, #4
 8001dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dcc:	4413      	add	r3, r2
 8001dce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001dd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001dd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001de8:	801a      	strh	r2, [r3, #0]
 8001dea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001df6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e00:	801a      	strh	r2, [r3, #0]
 8001e02:	e017      	b.n	8001e34 <HAL_PCD_EP_DB_Transmit+0x54e>
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	785b      	ldrb	r3, [r3, #1]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d113      	bne.n	8001e34 <HAL_PCD_EP_DB_Transmit+0x54e>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	461a      	mov	r2, r3
 8001e18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e1a:	4413      	add	r3, r2
 8001e1c:	677b      	str	r3, [r7, #116]	; 0x74
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	011a      	lsls	r2, r3, #4
 8001e24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e26:	4413      	add	r3, r2
 8001e28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e2c:	673b      	str	r3, [r7, #112]	; 0x70
 8001e2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e30:	2200      	movs	r2, #0
 8001e32:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f004 ff1f 	bl	8006c7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001e40:	88fb      	ldrh	r3, [r7, #6]
 8001e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f040 811a 	bne.w	8002080 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e66:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	441a      	add	r2, r3
 8001e78:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	8013      	strh	r3, [r2, #0]
 8001e90:	e0f6      	b.n	8002080 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001e92:	88fb      	ldrh	r3, [r7, #6]
 8001e94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d121      	bne.n	8001ee0 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eb6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	441a      	add	r2, r3
 8001ec8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ed4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	f040 80ca 	bne.w	8002080 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	695a      	ldr	r2, [r3, #20]
 8001ef0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001ef4:	441a      	add	r2, r3
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	69da      	ldr	r2, [r3, #28]
 8001efe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001f02:	441a      	add	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	6a1a      	ldr	r2, [r3, #32]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d30b      	bcc.n	8001f2c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	6a1a      	ldr	r2, [r3, #32]
 8001f20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f24:	1ad2      	subs	r2, r2, r3
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	621a      	str	r2, [r3, #32]
 8001f2a:	e017      	b.n	8001f5c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d108      	bne.n	8001f46 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8001f34:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001f38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001f44:	e00a      	b.n	8001f5c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2200      	movs	r2, #0
 8001f52:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	657b      	str	r3, [r7, #84]	; 0x54
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	785b      	ldrb	r3, [r3, #1]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d165      	bne.n	8002036 <HAL_PCD_EP_DB_Transmit+0x750>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f7e:	4413      	add	r3, r2
 8001f80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	011a      	lsls	r2, r3, #4
 8001f88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f90:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fa0:	801a      	strh	r2, [r3, #0]
 8001fa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fa6:	2b3e      	cmp	r3, #62	; 0x3e
 8001fa8:	d91d      	bls.n	8001fe6 <HAL_PCD_EP_DB_Transmit+0x700>
 8001faa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8001fb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fb6:	f003 031f 	and.w	r3, r3, #31
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d102      	bne.n	8001fc4 <HAL_PCD_EP_DB_Transmit+0x6de>
 8001fbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8001fc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	029b      	lsls	r3, r3, #10
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fe2:	801a      	strh	r2, [r3, #0]
 8001fe4:	e041      	b.n	800206a <HAL_PCD_EP_DB_Transmit+0x784>
 8001fe6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10a      	bne.n	8002004 <HAL_PCD_EP_DB_Transmit+0x71e>
 8001fee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002000:	801a      	strh	r2, [r3, #0]
 8002002:	e032      	b.n	800206a <HAL_PCD_EP_DB_Transmit+0x784>
 8002004:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002008:	085b      	lsrs	r3, r3, #1
 800200a:	66bb      	str	r3, [r7, #104]	; 0x68
 800200c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <HAL_PCD_EP_DB_Transmit+0x738>
 8002018:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800201a:	3301      	adds	r3, #1
 800201c:	66bb      	str	r3, [r7, #104]	; 0x68
 800201e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	b29a      	uxth	r2, r3
 8002024:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002026:	b29b      	uxth	r3, r3
 8002028:	029b      	lsls	r3, r3, #10
 800202a:	b29b      	uxth	r3, r3
 800202c:	4313      	orrs	r3, r2
 800202e:	b29a      	uxth	r2, r3
 8002030:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002032:	801a      	strh	r2, [r3, #0]
 8002034:	e019      	b.n	800206a <HAL_PCD_EP_DB_Transmit+0x784>
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	785b      	ldrb	r3, [r3, #1]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d115      	bne.n	800206a <HAL_PCD_EP_DB_Transmit+0x784>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002046:	b29b      	uxth	r3, r3
 8002048:	461a      	mov	r2, r3
 800204a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800204c:	4413      	add	r3, r2
 800204e:	657b      	str	r3, [r7, #84]	; 0x54
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	011a      	lsls	r2, r3, #4
 8002056:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002058:	4413      	add	r3, r2
 800205a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800205e:	653b      	str	r3, [r7, #80]	; 0x50
 8002060:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002064:	b29a      	uxth	r2, r3
 8002066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002068:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6818      	ldr	r0, [r3, #0]
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	6959      	ldr	r1, [r3, #20]
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	895a      	ldrh	r2, [r3, #10]
 8002076:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800207a:	b29b      	uxth	r3, r3
 800207c:	f003 f80b 	bl	8005096 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	b29b      	uxth	r3, r3
 8002092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800209a:	82bb      	strh	r3, [r7, #20]
 800209c:	8abb      	ldrh	r3, [r7, #20]
 800209e:	f083 0310 	eor.w	r3, r3, #16
 80020a2:	82bb      	strh	r3, [r7, #20]
 80020a4:	8abb      	ldrh	r3, [r7, #20]
 80020a6:	f083 0320 	eor.w	r3, r3, #32
 80020aa:	82bb      	strh	r3, [r7, #20]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	461a      	mov	r2, r3
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	441a      	add	r2, r3
 80020ba:	8abb      	ldrh	r3, [r7, #20]
 80020bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3790      	adds	r7, #144	; 0x90
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80020da:	b480      	push	{r7}
 80020dc:	b087      	sub	sp, #28
 80020de:	af00      	add	r7, sp, #0
 80020e0:	60f8      	str	r0, [r7, #12]
 80020e2:	607b      	str	r3, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	817b      	strh	r3, [r7, #10]
 80020e8:	4613      	mov	r3, r2
 80020ea:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80020ec:	897b      	ldrh	r3, [r7, #10]
 80020ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00b      	beq.n	8002110 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020f8:	897b      	ldrh	r3, [r7, #10]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	1c5a      	adds	r2, r3, #1
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	4413      	add	r3, r2
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	e009      	b.n	8002124 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002110:	897a      	ldrh	r2, [r7, #10]
 8002112:	4613      	mov	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	4413      	add	r3, r2
 8002122:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002124:	893b      	ldrh	r3, [r7, #8]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d107      	bne.n	800213a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2200      	movs	r2, #0
 800212e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	b29a      	uxth	r2, r3
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	80da      	strh	r2, [r3, #6]
 8002138:	e00b      	b.n	8002152 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2201      	movs	r2, #1
 800213e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	b29a      	uxth	r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	0c1b      	lsrs	r3, r3, #16
 800214c:	b29a      	uxth	r2, r3
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	371c      	adds	r7, #28
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr
	...

08002160 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e272      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 8087 	beq.w	800228e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002180:	4b92      	ldr	r3, [pc, #584]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 030c 	and.w	r3, r3, #12
 8002188:	2b04      	cmp	r3, #4
 800218a:	d00c      	beq.n	80021a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800218c:	4b8f      	ldr	r3, [pc, #572]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 030c 	and.w	r3, r3, #12
 8002194:	2b08      	cmp	r3, #8
 8002196:	d112      	bne.n	80021be <HAL_RCC_OscConfig+0x5e>
 8002198:	4b8c      	ldr	r3, [pc, #560]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a4:	d10b      	bne.n	80021be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a6:	4b89      	ldr	r3, [pc, #548]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d06c      	beq.n	800228c <HAL_RCC_OscConfig+0x12c>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d168      	bne.n	800228c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e24c      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c6:	d106      	bne.n	80021d6 <HAL_RCC_OscConfig+0x76>
 80021c8:	4b80      	ldr	r3, [pc, #512]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a7f      	ldr	r2, [pc, #508]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 80021ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d2:	6013      	str	r3, [r2, #0]
 80021d4:	e02e      	b.n	8002234 <HAL_RCC_OscConfig+0xd4>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10c      	bne.n	80021f8 <HAL_RCC_OscConfig+0x98>
 80021de:	4b7b      	ldr	r3, [pc, #492]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a7a      	ldr	r2, [pc, #488]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 80021e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	4b78      	ldr	r3, [pc, #480]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a77      	ldr	r2, [pc, #476]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 80021f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	e01d      	b.n	8002234 <HAL_RCC_OscConfig+0xd4>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0xbc>
 8002202:	4b72      	ldr	r3, [pc, #456]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a71      	ldr	r2, [pc, #452]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	4b6f      	ldr	r3, [pc, #444]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a6e      	ldr	r2, [pc, #440]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	e00b      	b.n	8002234 <HAL_RCC_OscConfig+0xd4>
 800221c:	4b6b      	ldr	r3, [pc, #428]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a6a      	ldr	r2, [pc, #424]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	4b68      	ldr	r3, [pc, #416]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a67      	ldr	r2, [pc, #412]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 800222e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002232:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d013      	beq.n	8002264 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223c:	f7fe f90a 	bl	8000454 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002244:	f7fe f906 	bl	8000454 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b64      	cmp	r3, #100	; 0x64
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e200      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002256:	4b5d      	ldr	r3, [pc, #372]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f0      	beq.n	8002244 <HAL_RCC_OscConfig+0xe4>
 8002262:	e014      	b.n	800228e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002264:	f7fe f8f6 	bl	8000454 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800226c:	f7fe f8f2 	bl	8000454 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b64      	cmp	r3, #100	; 0x64
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e1ec      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227e:	4b53      	ldr	r3, [pc, #332]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x10c>
 800228a:	e000      	b.n	800228e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d063      	beq.n	8002362 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800229a:	4b4c      	ldr	r3, [pc, #304]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00b      	beq.n	80022be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022a6:	4b49      	ldr	r3, [pc, #292]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f003 030c 	and.w	r3, r3, #12
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d11c      	bne.n	80022ec <HAL_RCC_OscConfig+0x18c>
 80022b2:	4b46      	ldr	r3, [pc, #280]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d116      	bne.n	80022ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022be:	4b43      	ldr	r3, [pc, #268]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <HAL_RCC_OscConfig+0x176>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d001      	beq.n	80022d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e1c0      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d6:	4b3d      	ldr	r3, [pc, #244]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4939      	ldr	r1, [pc, #228]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ea:	e03a      	b.n	8002362 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d020      	beq.n	8002336 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022f4:	4b36      	ldr	r3, [pc, #216]	; (80023d0 <HAL_RCC_OscConfig+0x270>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fa:	f7fe f8ab 	bl	8000454 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002302:	f7fe f8a7 	bl	8000454 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e1a1      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002314:	4b2d      	ldr	r3, [pc, #180]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f0      	beq.n	8002302 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002320:	4b2a      	ldr	r3, [pc, #168]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	4927      	ldr	r1, [pc, #156]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002330:	4313      	orrs	r3, r2
 8002332:	600b      	str	r3, [r1, #0]
 8002334:	e015      	b.n	8002362 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002336:	4b26      	ldr	r3, [pc, #152]	; (80023d0 <HAL_RCC_OscConfig+0x270>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233c:	f7fe f88a 	bl	8000454 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002344:	f7fe f886 	bl	8000454 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e180      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002356:	4b1d      	ldr	r3, [pc, #116]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	2b00      	cmp	r3, #0
 800236c:	d03a      	beq.n	80023e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d019      	beq.n	80023aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002376:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 8002378:	2201      	movs	r2, #1
 800237a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237c:	f7fe f86a 	bl	8000454 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002384:	f7fe f866 	bl	8000454 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e160      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002396:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <HAL_RCC_OscConfig+0x26c>)
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023a2:	2001      	movs	r0, #1
 80023a4:	f000 fa9c 	bl	80028e0 <RCC_Delay>
 80023a8:	e01c      	b.n	80023e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023aa:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <HAL_RCC_OscConfig+0x274>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b0:	f7fe f850 	bl	8000454 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b6:	e00f      	b.n	80023d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b8:	f7fe f84c 	bl	8000454 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d908      	bls.n	80023d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e146      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>
 80023ca:	bf00      	nop
 80023cc:	40021000 	.word	0x40021000
 80023d0:	42420000 	.word	0x42420000
 80023d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d8:	4b92      	ldr	r3, [pc, #584]	; (8002624 <HAL_RCC_OscConfig+0x4c4>)
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1e9      	bne.n	80023b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 80a6 	beq.w	800253e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023f2:	2300      	movs	r3, #0
 80023f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f6:	4b8b      	ldr	r3, [pc, #556]	; (8002624 <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10d      	bne.n	800241e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002402:	4b88      	ldr	r3, [pc, #544]	; (8002624 <HAL_RCC_OscConfig+0x4c4>)
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	4a87      	ldr	r2, [pc, #540]	; (8002624 <HAL_RCC_OscConfig+0x4c4>)
 8002408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240c:	61d3      	str	r3, [r2, #28]
 800240e:	4b85      	ldr	r3, [pc, #532]	; (8002624 <HAL_RCC_OscConfig+0x4c4>)
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002416:	60bb      	str	r3, [r7, #8]
 8002418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800241a:	2301      	movs	r3, #1
 800241c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241e:	4b82      	ldr	r3, [pc, #520]	; (8002628 <HAL_RCC_OscConfig+0x4c8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002426:	2b00      	cmp	r3, #0
 8002428:	d118      	bne.n	800245c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800242a:	4b7f      	ldr	r3, [pc, #508]	; (8002628 <HAL_RCC_OscConfig+0x4c8>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a7e      	ldr	r2, [pc, #504]	; (8002628 <HAL_RCC_OscConfig+0x4c8>)
 8002430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002436:	f7fe f80d 	bl	8000454 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800243e:	f7fe f809 	bl	8000454 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b64      	cmp	r3, #100	; 0x64
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e103      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002450:	4b75      	ldr	r3, [pc, #468]	; (8002628 <HAL_RCC_OscConfig+0x4c8>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0f0      	beq.n	800243e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d106      	bne.n	8002472 <HAL_RCC_OscConfig+0x312>
 8002464:	4b6f      	ldr	r3, [pc, #444]	; (8002624 <HAL_RCC_OscConfig+0x4c4>)
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	4a6e      	ldr	r2, [pc, #440]	; (8002624 <HAL_RCC_OscConfig+0x4c4>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6213      	str	r3, [r2, #32]
 8002470:	e02d      	b.n	80024ce <HAL_RCC_OscConfig+0x36e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10c      	bne.n	8002494 <HAL_RCC_OscConfig+0x334>
 800247a:	4b6a      	ldr	r3, [pc, #424]	; (8002624 <HAL_RCC_OscConfig+0x4c4>)
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	4a69      	ldr	r2, [pc, #420]	; (8002624 <HAL_RCC_OscConfig+0x4c4>)
 8002480:	f023 0301 	bic.w	r3, r3, #1
 8002484:	6213      	str	r3, [r2, #32]
 8002486:	4b67      	ldr	r3, [pc, #412]	; (8002624 <HAL_RCC_OscConfig+0x4c4>)
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	4a66      	ldr	r2, [pc, #408]	; (8002624 <HAL_RCC_OscConfig+0x4c4>)
 800248c:	f023 0304 	bic.w	r3, r3, #4
 8002490:	6213      	str	r3, [r2, #32]
 8002492:	e01c      	b.n	80024ce <HAL_RCC_OscConfig+0x36e>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	2b05      	cmp	r3, #5
 800249a:	d10c      	bne.n	80024b6 <HAL_RCC_OscConfig+0x356>
 800249c:	4b61      	ldr	r3, [pc, #388]	; (8002624 <HAL_RCC_OscConfig+0x4c4>)
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	4a60      	ldr	r2, [pc, #384]	; (8002624 <HAL_RCC_OscConfig+0x4c4>)
 80024a2:	f043 0304 	orr.w	r3, r3, #4
 80024a6:	6213      	str	r3, [r2, #32]
 80024a8:	4b5e      	ldr	r3, [pc, #376]	; (8002624 <HAL_RCC_OscConfig+0x4c4>)
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	4a5d      	ldr	r2, [pc, #372]	; (8002624 <HAL_RCC_OscConfig+0x4c4>)
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	6213      	str	r3, [r2, #32]
 80024b4:	e00b      	b.n	80024ce <HAL_RCC_OscConfig+0x36e>
 80024b6:	4b5b      	ldr	r3, [pc, #364]	; (8002624 <HAL_RCC_OscConfig+0x4c4>)
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	4a5a      	ldr	r2, [pc, #360]	; (8002624 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	f023 0301 	bic.w	r3, r3, #1
 80024c0:	6213      	str	r3, [r2, #32]
 80024c2:	4b58      	ldr	r3, [pc, #352]	; (8002624 <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	4a57      	ldr	r2, [pc, #348]	; (8002624 <HAL_RCC_OscConfig+0x4c4>)
 80024c8:	f023 0304 	bic.w	r3, r3, #4
 80024cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d015      	beq.n	8002502 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d6:	f7fd ffbd 	bl	8000454 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024dc:	e00a      	b.n	80024f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024de:	f7fd ffb9 	bl	8000454 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e0b1      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f4:	4b4b      	ldr	r3, [pc, #300]	; (8002624 <HAL_RCC_OscConfig+0x4c4>)
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0ee      	beq.n	80024de <HAL_RCC_OscConfig+0x37e>
 8002500:	e014      	b.n	800252c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002502:	f7fd ffa7 	bl	8000454 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002508:	e00a      	b.n	8002520 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250a:	f7fd ffa3 	bl	8000454 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	f241 3288 	movw	r2, #5000	; 0x1388
 8002518:	4293      	cmp	r3, r2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e09b      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002520:	4b40      	ldr	r3, [pc, #256]	; (8002624 <HAL_RCC_OscConfig+0x4c4>)
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1ee      	bne.n	800250a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800252c:	7dfb      	ldrb	r3, [r7, #23]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d105      	bne.n	800253e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002532:	4b3c      	ldr	r3, [pc, #240]	; (8002624 <HAL_RCC_OscConfig+0x4c4>)
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	4a3b      	ldr	r2, [pc, #236]	; (8002624 <HAL_RCC_OscConfig+0x4c4>)
 8002538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800253c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 8087 	beq.w	8002656 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002548:	4b36      	ldr	r3, [pc, #216]	; (8002624 <HAL_RCC_OscConfig+0x4c4>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 030c 	and.w	r3, r3, #12
 8002550:	2b08      	cmp	r3, #8
 8002552:	d061      	beq.n	8002618 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	2b02      	cmp	r3, #2
 800255a:	d146      	bne.n	80025ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255c:	4b33      	ldr	r3, [pc, #204]	; (800262c <HAL_RCC_OscConfig+0x4cc>)
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002562:	f7fd ff77 	bl	8000454 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256a:	f7fd ff73 	bl	8000454 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e06d      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800257c:	4b29      	ldr	r3, [pc, #164]	; (8002624 <HAL_RCC_OscConfig+0x4c4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1f0      	bne.n	800256a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002590:	d108      	bne.n	80025a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002592:	4b24      	ldr	r3, [pc, #144]	; (8002624 <HAL_RCC_OscConfig+0x4c4>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	4921      	ldr	r1, [pc, #132]	; (8002624 <HAL_RCC_OscConfig+0x4c4>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025a4:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <HAL_RCC_OscConfig+0x4c4>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a19      	ldr	r1, [r3, #32]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	430b      	orrs	r3, r1
 80025b6:	491b      	ldr	r1, [pc, #108]	; (8002624 <HAL_RCC_OscConfig+0x4c4>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025bc:	4b1b      	ldr	r3, [pc, #108]	; (800262c <HAL_RCC_OscConfig+0x4cc>)
 80025be:	2201      	movs	r2, #1
 80025c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c2:	f7fd ff47 	bl	8000454 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ca:	f7fd ff43 	bl	8000454 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e03d      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025dc:	4b11      	ldr	r3, [pc, #68]	; (8002624 <HAL_RCC_OscConfig+0x4c4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0f0      	beq.n	80025ca <HAL_RCC_OscConfig+0x46a>
 80025e8:	e035      	b.n	8002656 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ea:	4b10      	ldr	r3, [pc, #64]	; (800262c <HAL_RCC_OscConfig+0x4cc>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f0:	f7fd ff30 	bl	8000454 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f8:	f7fd ff2c 	bl	8000454 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e026      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800260a:	4b06      	ldr	r3, [pc, #24]	; (8002624 <HAL_RCC_OscConfig+0x4c4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x498>
 8002616:	e01e      	b.n	8002656 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d107      	bne.n	8002630 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e019      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>
 8002624:	40021000 	.word	0x40021000
 8002628:	40007000 	.word	0x40007000
 800262c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002630:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <HAL_RCC_OscConfig+0x500>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	429a      	cmp	r2, r3
 8002642:	d106      	bne.n	8002652 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800264e:	429a      	cmp	r2, r3
 8002650:	d001      	beq.n	8002656 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40021000 	.word	0x40021000

08002664 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e0d0      	b.n	800281a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002678:	4b6a      	ldr	r3, [pc, #424]	; (8002824 <HAL_RCC_ClockConfig+0x1c0>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	429a      	cmp	r2, r3
 8002684:	d910      	bls.n	80026a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002686:	4b67      	ldr	r3, [pc, #412]	; (8002824 <HAL_RCC_ClockConfig+0x1c0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f023 0207 	bic.w	r2, r3, #7
 800268e:	4965      	ldr	r1, [pc, #404]	; (8002824 <HAL_RCC_ClockConfig+0x1c0>)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	4313      	orrs	r3, r2
 8002694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002696:	4b63      	ldr	r3, [pc, #396]	; (8002824 <HAL_RCC_ClockConfig+0x1c0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d001      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e0b8      	b.n	800281a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d020      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026c0:	4b59      	ldr	r3, [pc, #356]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	4a58      	ldr	r2, [pc, #352]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 80026c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026d8:	4b53      	ldr	r3, [pc, #332]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	4a52      	ldr	r2, [pc, #328]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e4:	4b50      	ldr	r3, [pc, #320]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	494d      	ldr	r1, [pc, #308]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d040      	beq.n	8002784 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d107      	bne.n	800271a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270a:	4b47      	ldr	r3, [pc, #284]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d115      	bne.n	8002742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e07f      	b.n	800281a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d107      	bne.n	8002732 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002722:	4b41      	ldr	r3, [pc, #260]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d109      	bne.n	8002742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e073      	b.n	800281a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002732:	4b3d      	ldr	r3, [pc, #244]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e06b      	b.n	800281a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002742:	4b39      	ldr	r3, [pc, #228]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f023 0203 	bic.w	r2, r3, #3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	4936      	ldr	r1, [pc, #216]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	4313      	orrs	r3, r2
 8002752:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002754:	f7fd fe7e 	bl	8000454 <HAL_GetTick>
 8002758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275a:	e00a      	b.n	8002772 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800275c:	f7fd fe7a 	bl	8000454 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	f241 3288 	movw	r2, #5000	; 0x1388
 800276a:	4293      	cmp	r3, r2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e053      	b.n	800281a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002772:	4b2d      	ldr	r3, [pc, #180]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 020c 	and.w	r2, r3, #12
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	429a      	cmp	r2, r3
 8002782:	d1eb      	bne.n	800275c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002784:	4b27      	ldr	r3, [pc, #156]	; (8002824 <HAL_RCC_ClockConfig+0x1c0>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d210      	bcs.n	80027b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002792:	4b24      	ldr	r3, [pc, #144]	; (8002824 <HAL_RCC_ClockConfig+0x1c0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 0207 	bic.w	r2, r3, #7
 800279a:	4922      	ldr	r1, [pc, #136]	; (8002824 <HAL_RCC_ClockConfig+0x1c0>)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	4313      	orrs	r3, r2
 80027a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a2:	4b20      	ldr	r3, [pc, #128]	; (8002824 <HAL_RCC_ClockConfig+0x1c0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d001      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e032      	b.n	800281a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d008      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c0:	4b19      	ldr	r3, [pc, #100]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	4916      	ldr	r1, [pc, #88]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d009      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027de:	4b12      	ldr	r3, [pc, #72]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	490e      	ldr	r1, [pc, #56]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027f2:	f000 f821 	bl	8002838 <HAL_RCC_GetSysClockFreq>
 80027f6:	4602      	mov	r2, r0
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	091b      	lsrs	r3, r3, #4
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	490a      	ldr	r1, [pc, #40]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 8002804:	5ccb      	ldrb	r3, [r1, r3]
 8002806:	fa22 f303 	lsr.w	r3, r2, r3
 800280a:	4a09      	ldr	r2, [pc, #36]	; (8002830 <HAL_RCC_ClockConfig+0x1cc>)
 800280c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800280e:	4b09      	ldr	r3, [pc, #36]	; (8002834 <HAL_RCC_ClockConfig+0x1d0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f7fd fddc 	bl	80003d0 <HAL_InitTick>

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40022000 	.word	0x40022000
 8002828:	40021000 	.word	0x40021000
 800282c:	080071e4 	.word	0x080071e4
 8002830:	20000000 	.word	0x20000000
 8002834:	20000004 	.word	0x20000004

08002838 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800283e:	2300      	movs	r3, #0
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	2300      	movs	r3, #0
 8002844:	60bb      	str	r3, [r7, #8]
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	2300      	movs	r3, #0
 800284c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002852:	4b1e      	ldr	r3, [pc, #120]	; (80028cc <HAL_RCC_GetSysClockFreq+0x94>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f003 030c 	and.w	r3, r3, #12
 800285e:	2b04      	cmp	r3, #4
 8002860:	d002      	beq.n	8002868 <HAL_RCC_GetSysClockFreq+0x30>
 8002862:	2b08      	cmp	r3, #8
 8002864:	d003      	beq.n	800286e <HAL_RCC_GetSysClockFreq+0x36>
 8002866:	e027      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002868:	4b19      	ldr	r3, [pc, #100]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800286a:	613b      	str	r3, [r7, #16]
      break;
 800286c:	e027      	b.n	80028be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	0c9b      	lsrs	r3, r3, #18
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	4a17      	ldr	r2, [pc, #92]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002878:	5cd3      	ldrb	r3, [r2, r3]
 800287a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d010      	beq.n	80028a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002886:	4b11      	ldr	r3, [pc, #68]	; (80028cc <HAL_RCC_GetSysClockFreq+0x94>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	0c5b      	lsrs	r3, r3, #17
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	4a11      	ldr	r2, [pc, #68]	; (80028d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002892:	5cd3      	ldrb	r3, [r2, r3]
 8002894:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a0d      	ldr	r2, [pc, #52]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800289a:	fb03 f202 	mul.w	r2, r3, r2
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a4:	617b      	str	r3, [r7, #20]
 80028a6:	e004      	b.n	80028b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a0c      	ldr	r2, [pc, #48]	; (80028dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80028ac:	fb02 f303 	mul.w	r3, r2, r3
 80028b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	613b      	str	r3, [r7, #16]
      break;
 80028b6:	e002      	b.n	80028be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028b8:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ba:	613b      	str	r3, [r7, #16]
      break;
 80028bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028be:	693b      	ldr	r3, [r7, #16]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	371c      	adds	r7, #28
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	40021000 	.word	0x40021000
 80028d0:	007a1200 	.word	0x007a1200
 80028d4:	080071f4 	.word	0x080071f4
 80028d8:	08007204 	.word	0x08007204
 80028dc:	003d0900 	.word	0x003d0900

080028e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028e8:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <RCC_Delay+0x34>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a0a      	ldr	r2, [pc, #40]	; (8002918 <RCC_Delay+0x38>)
 80028ee:	fba2 2303 	umull	r2, r3, r2, r3
 80028f2:	0a5b      	lsrs	r3, r3, #9
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	fb02 f303 	mul.w	r3, r2, r3
 80028fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028fc:	bf00      	nop
  }
  while (Delay --);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	1e5a      	subs	r2, r3, #1
 8002902:	60fa      	str	r2, [r7, #12]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1f9      	bne.n	80028fc <RCC_Delay+0x1c>
}
 8002908:	bf00      	nop
 800290a:	bf00      	nop
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr
 8002914:	20000000 	.word	0x20000000
 8002918:	10624dd3 	.word	0x10624dd3

0800291c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b00      	cmp	r3, #0
 8002936:	d07d      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002938:	2300      	movs	r3, #0
 800293a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800293c:	4b4f      	ldr	r3, [pc, #316]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10d      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002948:	4b4c      	ldr	r3, [pc, #304]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	4a4b      	ldr	r2, [pc, #300]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800294e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002952:	61d3      	str	r3, [r2, #28]
 8002954:	4b49      	ldr	r3, [pc, #292]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002960:	2301      	movs	r3, #1
 8002962:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002964:	4b46      	ldr	r3, [pc, #280]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296c:	2b00      	cmp	r3, #0
 800296e:	d118      	bne.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002970:	4b43      	ldr	r3, [pc, #268]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a42      	ldr	r2, [pc, #264]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800297a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800297c:	f7fd fd6a 	bl	8000454 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002982:	e008      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002984:	f7fd fd66 	bl	8000454 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b64      	cmp	r3, #100	; 0x64
 8002990:	d901      	bls.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e06d      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002996:	4b3a      	ldr	r3, [pc, #232]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029a2:	4b36      	ldr	r3, [pc, #216]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029aa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d02e      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d027      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029c0:	4b2e      	ldr	r3, [pc, #184]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029ca:	4b2e      	ldr	r3, [pc, #184]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029cc:	2201      	movs	r2, #1
 80029ce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029d0:	4b2c      	ldr	r3, [pc, #176]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029d6:	4a29      	ldr	r2, [pc, #164]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d014      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e6:	f7fd fd35 	bl	8000454 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ec:	e00a      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ee:	f7fd fd31 	bl	8000454 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e036      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a04:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0ee      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a10:	4b1a      	ldr	r3, [pc, #104]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	4917      	ldr	r1, [pc, #92]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a22:	7dfb      	ldrb	r3, [r7, #23]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d105      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a28:	4b14      	ldr	r3, [pc, #80]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	4a13      	ldr	r2, [pc, #76]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a40:	4b0e      	ldr	r3, [pc, #56]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	490b      	ldr	r1, [pc, #44]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0310 	and.w	r3, r3, #16
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d008      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a5e:	4b07      	ldr	r3, [pc, #28]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	4904      	ldr	r1, [pc, #16]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40007000 	.word	0x40007000
 8002a84:	42420440 	.word	0x42420440

08002a88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002a88:	b084      	sub	sp, #16
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
 8002a92:	f107 0014 	add.w	r0, r7, #20
 8002a96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	b004      	add	sp, #16
 8002aa6:	4770      	bx	lr

08002aa8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002ab8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002abc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr

08002ad4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002adc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002ae0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	43db      	mvns	r3, r3
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	4013      	ands	r3, r2
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr

08002b08 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr

08002b20 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002b20:	b084      	sub	sp, #16
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
 8002b2a:	f107 0014 	add.w	r0, r7, #20
 8002b2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	b004      	add	sp, #16
 8002b5e:	4770      	bx	lr

08002b60 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b09d      	sub	sp, #116	; 0x74
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b86:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	78db      	ldrb	r3, [r3, #3]
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d81f      	bhi.n	8002bd2 <USB_ActivateEndpoint+0x72>
 8002b92:	a201      	add	r2, pc, #4	; (adr r2, 8002b98 <USB_ActivateEndpoint+0x38>)
 8002b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b98:	08002ba9 	.word	0x08002ba9
 8002b9c:	08002bc5 	.word	0x08002bc5
 8002ba0:	08002bdb 	.word	0x08002bdb
 8002ba4:	08002bb7 	.word	0x08002bb7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002ba8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002bac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bb0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002bb4:	e012      	b.n	8002bdc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002bb6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002bba:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002bbe:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002bc2:	e00b      	b.n	8002bdc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002bc4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002bc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bcc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002bd0:	e004      	b.n	8002bdc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8002bd8:	e000      	b.n	8002bdc <USB_ActivateEndpoint+0x7c>
      break;
 8002bda:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	441a      	add	r2, r3
 8002be6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002bea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	441a      	add	r2, r3
 8002c2c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002c30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	7b1b      	ldrb	r3, [r3, #12]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f040 8178 	bne.w	8002f3e <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	785b      	ldrb	r3, [r3, #1]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 8084 	beq.w	8002d60 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	61bb      	str	r3, [r7, #24]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	461a      	mov	r2, r3
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	4413      	add	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	011a      	lsls	r2, r3, #4
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	4413      	add	r3, r2
 8002c76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	88db      	ldrh	r3, [r3, #6]
 8002c80:	085b      	lsrs	r3, r3, #1
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	827b      	strh	r3, [r7, #18]
 8002c9a:	8a7b      	ldrh	r3, [r7, #18]
 8002c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d01b      	beq.n	8002cdc <USB_ActivateEndpoint+0x17c>
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cba:	823b      	strh	r3, [r7, #16]
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	441a      	add	r2, r3
 8002cc6:	8a3b      	ldrh	r3, [r7, #16]
 8002cc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ccc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cd4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	78db      	ldrb	r3, [r3, #3]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d020      	beq.n	8002d26 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cfa:	81bb      	strh	r3, [r7, #12]
 8002cfc:	89bb      	ldrh	r3, [r7, #12]
 8002cfe:	f083 0320 	eor.w	r3, r3, #32
 8002d02:	81bb      	strh	r3, [r7, #12]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	441a      	add	r2, r3
 8002d0e:	89bb      	ldrh	r3, [r7, #12]
 8002d10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	8013      	strh	r3, [r2, #0]
 8002d24:	e2d5      	b.n	80032d2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d3c:	81fb      	strh	r3, [r7, #14]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	441a      	add	r2, r3
 8002d48:	89fb      	ldrh	r3, [r7, #14]
 8002d4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	8013      	strh	r3, [r2, #0]
 8002d5e:	e2b8      	b.n	80032d2 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	633b      	str	r3, [r7, #48]	; 0x30
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d70:	4413      	add	r3, r2
 8002d72:	633b      	str	r3, [r7, #48]	; 0x30
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	011a      	lsls	r2, r3, #4
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	88db      	ldrh	r3, [r3, #6]
 8002d88:	085b      	lsrs	r3, r3, #1
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d92:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	461a      	mov	r2, r3
 8002da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da4:	4413      	add	r3, r2
 8002da6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	011a      	lsls	r2, r3, #4
 8002dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db0:	4413      	add	r3, r2
 8002db2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002db6:	627b      	str	r3, [r7, #36]	; 0x24
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	801a      	strh	r2, [r3, #0]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	2b3e      	cmp	r3, #62	; 0x3e
 8002dce:	d91d      	bls.n	8002e0c <USB_ActivateEndpoint+0x2ac>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	095b      	lsrs	r3, r3, #5
 8002dd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	f003 031f 	and.w	r3, r3, #31
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d102      	bne.n	8002dea <USB_ActivateEndpoint+0x28a>
 8002de4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002de6:	3b01      	subs	r3, #1
 8002de8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	029b      	lsls	r3, r3, #10
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	801a      	strh	r2, [r3, #0]
 8002e0a:	e026      	b.n	8002e5a <USB_ActivateEndpoint+0x2fa>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10a      	bne.n	8002e2a <USB_ActivateEndpoint+0x2ca>
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	881b      	ldrh	r3, [r3, #0]
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	801a      	strh	r2, [r3, #0]
 8002e28:	e017      	b.n	8002e5a <USB_ActivateEndpoint+0x2fa>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	085b      	lsrs	r3, r3, #1
 8002e30:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <USB_ActivateEndpoint+0x2e4>
 8002e3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e40:	3301      	adds	r3, #1
 8002e42:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	029b      	lsls	r3, r3, #10
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	4313      	orrs	r3, r2
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	881b      	ldrh	r3, [r3, #0]
 8002e66:	847b      	strh	r3, [r7, #34]	; 0x22
 8002e68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d01b      	beq.n	8002eaa <USB_ActivateEndpoint+0x34a>
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e88:	843b      	strh	r3, [r7, #32]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	441a      	add	r2, r3
 8002e94:	8c3b      	ldrh	r3, [r7, #32]
 8002e96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d124      	bne.n	8002efc <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec8:	83bb      	strh	r3, [r7, #28]
 8002eca:	8bbb      	ldrh	r3, [r7, #28]
 8002ecc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002ed0:	83bb      	strh	r3, [r7, #28]
 8002ed2:	8bbb      	ldrh	r3, [r7, #28]
 8002ed4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ed8:	83bb      	strh	r3, [r7, #28]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	441a      	add	r2, r3
 8002ee4:	8bbb      	ldrh	r3, [r7, #28]
 8002ee6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	8013      	strh	r3, [r2, #0]
 8002efa:	e1ea      	b.n	80032d2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f12:	83fb      	strh	r3, [r7, #30]
 8002f14:	8bfb      	ldrh	r3, [r7, #30]
 8002f16:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f1a:	83fb      	strh	r3, [r7, #30]
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	441a      	add	r2, r3
 8002f26:	8bfb      	ldrh	r3, [r7, #30]
 8002f28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	8013      	strh	r3, [r2, #0]
 8002f3c:	e1c9      	b.n	80032d2 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	78db      	ldrb	r3, [r3, #3]
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d11e      	bne.n	8002f84 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	881b      	ldrh	r3, [r3, #0]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f5c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	441a      	add	r2, r3
 8002f6a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8002f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f76:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	8013      	strh	r3, [r2, #0]
 8002f82:	e01d      	b.n	8002fc0 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8002f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f9a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	441a      	add	r2, r3
 8002fa8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002fac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	461a      	mov	r2, r3
 8002fce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fd0:	4413      	add	r3, r2
 8002fd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	011a      	lsls	r2, r3, #4
 8002fda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fe2:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	891b      	ldrh	r3, [r3, #8]
 8002fe8:	085b      	lsrs	r3, r3, #1
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ff2:	801a      	strh	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	657b      	str	r3, [r7, #84]	; 0x54
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	461a      	mov	r2, r3
 8003002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003004:	4413      	add	r3, r2
 8003006:	657b      	str	r3, [r7, #84]	; 0x54
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	011a      	lsls	r2, r3, #4
 800300e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003010:	4413      	add	r3, r2
 8003012:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003016:	653b      	str	r3, [r7, #80]	; 0x50
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	895b      	ldrh	r3, [r3, #10]
 800301c:	085b      	lsrs	r3, r3, #1
 800301e:	b29b      	uxth	r3, r3
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	b29a      	uxth	r2, r3
 8003024:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003026:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	785b      	ldrb	r3, [r3, #1]
 800302c:	2b00      	cmp	r3, #0
 800302e:	f040 8093 	bne.w	8003158 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003042:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d01b      	beq.n	8003086 <USB_ActivateEndpoint+0x526>
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	881b      	ldrh	r3, [r3, #0]
 800305a:	b29b      	uxth	r3, r3
 800305c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003064:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	441a      	add	r2, r3
 8003070:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003072:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003076:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800307a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800307e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003082:	b29b      	uxth	r3, r3
 8003084:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	881b      	ldrh	r3, [r3, #0]
 8003092:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003094:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309a:	2b00      	cmp	r3, #0
 800309c:	d01b      	beq.n	80030d6 <USB_ActivateEndpoint+0x576>
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	441a      	add	r2, r3
 80030c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80030c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ec:	873b      	strh	r3, [r7, #56]	; 0x38
 80030ee:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80030f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80030f4:	873b      	strh	r3, [r7, #56]	; 0x38
 80030f6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80030f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80030fc:	873b      	strh	r3, [r7, #56]	; 0x38
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	441a      	add	r2, r3
 8003108:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800310a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800310e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800311a:	b29b      	uxth	r3, r3
 800311c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	b29b      	uxth	r3, r3
 800312c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003134:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	441a      	add	r2, r3
 8003140:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800314a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800314e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003152:	b29b      	uxth	r3, r3
 8003154:	8013      	strh	r3, [r2, #0]
 8003156:	e0bc      	b.n	80032d2 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	881b      	ldrh	r3, [r3, #0]
 8003164:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003168:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800316c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d01d      	beq.n	80031b0 <USB_ActivateEndpoint+0x650>
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	881b      	ldrh	r3, [r3, #0]
 8003180:	b29b      	uxth	r3, r3
 8003182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800318a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	441a      	add	r2, r3
 8003198:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800319c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80031c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80031c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d01d      	beq.n	8003208 <USB_ActivateEndpoint+0x6a8>
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	b29b      	uxth	r3, r3
 80031da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	441a      	add	r2, r3
 80031f0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80031f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003200:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003204:	b29b      	uxth	r3, r3
 8003206:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	78db      	ldrb	r3, [r3, #3]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d024      	beq.n	800325a <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	b29b      	uxth	r3, r3
 800321e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003222:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003226:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800322a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800322e:	f083 0320 	eor.w	r3, r3, #32
 8003232:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	441a      	add	r2, r3
 8003240:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003244:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003248:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800324c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003254:	b29b      	uxth	r3, r3
 8003256:	8013      	strh	r3, [r2, #0]
 8003258:	e01d      	b.n	8003296 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	b29b      	uxth	r3, r3
 8003268:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800326c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003270:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	441a      	add	r2, r3
 800327e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003282:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003286:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800328a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800328e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003292:	b29b      	uxth	r3, r3
 8003294:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	441a      	add	r2, r3
 80032ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80032be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80032d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3774      	adds	r7, #116	; 0x74
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr

080032e0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b08d      	sub	sp, #52	; 0x34
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	7b1b      	ldrb	r3, [r3, #12]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f040 808e 	bne.w	8003410 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	785b      	ldrb	r3, [r3, #1]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d044      	beq.n	8003386 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	81bb      	strh	r3, [r7, #12]
 800330a:	89bb      	ldrh	r3, [r7, #12]
 800330c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003310:	2b00      	cmp	r3, #0
 8003312:	d01b      	beq.n	800334c <USB_DeactivateEndpoint+0x6c>
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	881b      	ldrh	r3, [r3, #0]
 8003320:	b29b      	uxth	r3, r3
 8003322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800332a:	817b      	strh	r3, [r7, #10]
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	441a      	add	r2, r3
 8003336:	897b      	ldrh	r3, [r7, #10]
 8003338:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800333c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003340:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003344:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003348:	b29b      	uxth	r3, r3
 800334a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	b29b      	uxth	r3, r3
 800335a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800335e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003362:	813b      	strh	r3, [r7, #8]
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	441a      	add	r2, r3
 800336e:	893b      	ldrh	r3, [r7, #8]
 8003370:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003374:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800337c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003380:	b29b      	uxth	r3, r3
 8003382:	8013      	strh	r3, [r2, #0]
 8003384:	e192      	b.n	80036ac <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	827b      	strh	r3, [r7, #18]
 8003394:	8a7b      	ldrh	r3, [r7, #18]
 8003396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d01b      	beq.n	80033d6 <USB_DeactivateEndpoint+0xf6>
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b4:	823b      	strh	r3, [r7, #16]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	441a      	add	r2, r3
 80033c0:	8a3b      	ldrh	r3, [r7, #16]
 80033c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ec:	81fb      	strh	r3, [r7, #14]
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	441a      	add	r2, r3
 80033f8:	89fb      	ldrh	r3, [r7, #14]
 80033fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800340a:	b29b      	uxth	r3, r3
 800340c:	8013      	strh	r3, [r2, #0]
 800340e:	e14d      	b.n	80036ac <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	785b      	ldrb	r3, [r3, #1]
 8003414:	2b00      	cmp	r3, #0
 8003416:	f040 80a5 	bne.w	8003564 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	843b      	strh	r3, [r7, #32]
 8003428:	8c3b      	ldrh	r3, [r7, #32]
 800342a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d01b      	beq.n	800346a <USB_DeactivateEndpoint+0x18a>
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	b29b      	uxth	r3, r3
 8003440:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003448:	83fb      	strh	r3, [r7, #30]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	441a      	add	r2, r3
 8003454:	8bfb      	ldrh	r3, [r7, #30]
 8003456:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800345a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800345e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003466:	b29b      	uxth	r3, r3
 8003468:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	83bb      	strh	r3, [r7, #28]
 8003478:	8bbb      	ldrh	r3, [r7, #28]
 800347a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347e:	2b00      	cmp	r3, #0
 8003480:	d01b      	beq.n	80034ba <USB_DeactivateEndpoint+0x1da>
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	b29b      	uxth	r3, r3
 8003490:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003498:	837b      	strh	r3, [r7, #26]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	441a      	add	r2, r3
 80034a4:	8b7b      	ldrh	r3, [r7, #26]
 80034a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d0:	833b      	strh	r3, [r7, #24]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	441a      	add	r2, r3
 80034dc:	8b3b      	ldrh	r3, [r7, #24]
 80034de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003508:	82fb      	strh	r3, [r7, #22]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	441a      	add	r2, r3
 8003514:	8afb      	ldrh	r3, [r7, #22]
 8003516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800351a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800351e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003526:	b29b      	uxth	r3, r3
 8003528:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	b29b      	uxth	r3, r3
 8003538:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800353c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003540:	82bb      	strh	r3, [r7, #20]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	441a      	add	r2, r3
 800354c:	8abb      	ldrh	r3, [r7, #20]
 800354e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003552:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800355a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800355e:	b29b      	uxth	r3, r3
 8003560:	8013      	strh	r3, [r2, #0]
 8003562:	e0a3      	b.n	80036ac <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003572:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d01b      	beq.n	80035b4 <USB_DeactivateEndpoint+0x2d4>
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	b29b      	uxth	r3, r3
 800358a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800358e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003592:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	441a      	add	r2, r3
 800359e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80035a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80035c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80035c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d01b      	beq.n	8003604 <USB_DeactivateEndpoint+0x324>
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	881b      	ldrh	r3, [r3, #0]
 80035d8:	b29b      	uxth	r3, r3
 80035da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e2:	853b      	strh	r3, [r7, #40]	; 0x28
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	441a      	add	r2, r3
 80035ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80035f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003600:	b29b      	uxth	r3, r3
 8003602:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	b29b      	uxth	r3, r3
 8003612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800361a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	441a      	add	r2, r3
 8003626:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003628:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800362c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003630:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003638:	b29b      	uxth	r3, r3
 800363a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	881b      	ldrh	r3, [r3, #0]
 8003648:	b29b      	uxth	r3, r3
 800364a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800364e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003652:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	441a      	add	r2, r3
 800365e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003660:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003664:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003668:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800366c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003670:	b29b      	uxth	r3, r3
 8003672:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	881b      	ldrh	r3, [r3, #0]
 8003680:	b29b      	uxth	r3, r3
 8003682:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800368a:	847b      	strh	r3, [r7, #34]	; 0x22
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	441a      	add	r2, r3
 8003696:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003698:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800369c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3734      	adds	r7, #52	; 0x34
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr

080036b8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b0c2      	sub	sp, #264	; 0x108
 80036bc:	af00      	add	r7, sp, #0
 80036be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80036c6:	6018      	str	r0, [r3, #0]
 80036c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036d0:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80036d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	785b      	ldrb	r3, [r3, #1]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	f040 86b7 	bne.w	8004452 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80036e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	699a      	ldr	r2, [r3, #24]
 80036f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d908      	bls.n	8003712 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8003700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003710:	e007      	b.n	8003722 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8003712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003716:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	7b1b      	ldrb	r3, [r3, #12]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d13a      	bne.n	80037a8 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6959      	ldr	r1, [r3, #20]
 800373e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	88da      	ldrh	r2, [r3, #6]
 800374a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800374e:	b29b      	uxth	r3, r3
 8003750:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003754:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003758:	6800      	ldr	r0, [r0, #0]
 800375a:	f001 fc9c 	bl	8005096 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800375e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003762:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800376e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003778:	b29b      	uxth	r3, r3
 800377a:	461a      	mov	r2, r3
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	4413      	add	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003786:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	011a      	lsls	r2, r3, #4
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	4413      	add	r3, r2
 8003794:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	801a      	strh	r2, [r3, #0]
 80037a4:	f000 be1f 	b.w	80043e6 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80037a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	78db      	ldrb	r3, [r3, #3]
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	f040 8462 	bne.w	800407e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80037ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6a1a      	ldr	r2, [r3, #32]
 80037c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	f240 83df 	bls.w	8003f96 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80037d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	881b      	ldrh	r3, [r3, #0]
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037fe:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003806:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	441a      	add	r2, r3
 800381c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003820:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003824:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003828:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800382c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003830:	b29b      	uxth	r3, r3
 8003832:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6a1a      	ldr	r2, [r3, #32]
 8003840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003844:	1ad2      	subs	r2, r2, r3
 8003846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800384a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003856:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	b29b      	uxth	r3, r3
 8003870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 81c7 	beq.w	8003c08 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800387a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800387e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	633b      	str	r3, [r7, #48]	; 0x30
 8003886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800388a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	785b      	ldrb	r3, [r3, #1]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d177      	bne.n	8003986 <USB_EPStartXfer+0x2ce>
 8003896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800389a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80038a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80038a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	461a      	mov	r2, r3
 80038b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b6:	4413      	add	r3, r2
 80038b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80038ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80038be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	011a      	lsls	r2, r3, #4
 80038c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ca:	4413      	add	r3, r2
 80038cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038dc:	b29a      	uxth	r2, r3
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	801a      	strh	r2, [r3, #0]
 80038e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038e6:	2b3e      	cmp	r3, #62	; 0x3e
 80038e8:	d921      	bls.n	800392e <USB_EPStartXfer+0x276>
 80038ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038ee:	095b      	lsrs	r3, r3, #5
 80038f0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80038f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038f8:	f003 031f 	and.w	r3, r3, #31
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d104      	bne.n	800390a <USB_EPStartXfer+0x252>
 8003900:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003904:	3b01      	subs	r3, #1
 8003906:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	b29a      	uxth	r2, r3
 8003910:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003914:	b29b      	uxth	r3, r3
 8003916:	029b      	lsls	r3, r3, #10
 8003918:	b29b      	uxth	r3, r3
 800391a:	4313      	orrs	r3, r2
 800391c:	b29b      	uxth	r3, r3
 800391e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003926:	b29a      	uxth	r2, r3
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	801a      	strh	r2, [r3, #0]
 800392c:	e050      	b.n	80039d0 <USB_EPStartXfer+0x318>
 800392e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10a      	bne.n	800394c <USB_EPStartXfer+0x294>
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	b29b      	uxth	r3, r3
 800393c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003944:	b29a      	uxth	r2, r3
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	801a      	strh	r2, [r3, #0]
 800394a:	e041      	b.n	80039d0 <USB_EPStartXfer+0x318>
 800394c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003950:	085b      	lsrs	r3, r3, #1
 8003952:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d004      	beq.n	800396c <USB_EPStartXfer+0x2b4>
 8003962:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003966:	3301      	adds	r3, #1
 8003968:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	b29a      	uxth	r2, r3
 8003972:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003976:	b29b      	uxth	r3, r3
 8003978:	029b      	lsls	r3, r3, #10
 800397a:	b29b      	uxth	r3, r3
 800397c:	4313      	orrs	r3, r2
 800397e:	b29a      	uxth	r2, r3
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	801a      	strh	r2, [r3, #0]
 8003984:	e024      	b.n	80039d0 <USB_EPStartXfer+0x318>
 8003986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800398a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	785b      	ldrb	r3, [r3, #1]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d11c      	bne.n	80039d0 <USB_EPStartXfer+0x318>
 8003996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800399a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	461a      	mov	r2, r3
 80039a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039aa:	4413      	add	r3, r2
 80039ac:	633b      	str	r3, [r7, #48]	; 0x30
 80039ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80039b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	011a      	lsls	r2, r3, #4
 80039bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039be:	4413      	add	r3, r2
 80039c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80039c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80039d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80039d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	895b      	ldrh	r3, [r3, #10]
 80039dc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80039e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80039e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6959      	ldr	r1, [r3, #20]
 80039ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80039f6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80039fa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80039fe:	6800      	ldr	r0, [r0, #0]
 8003a00:	f001 fb49 	bl	8005096 <USB_WritePMA>
            ep->xfer_buff += len;
 8003a04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695a      	ldr	r2, [r3, #20]
 8003a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a14:	441a      	add	r2, r3
 8003a16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6a1a      	ldr	r2, [r3, #32]
 8003a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d90f      	bls.n	8003a5e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8003a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6a1a      	ldr	r2, [r3, #32]
 8003a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a4e:	1ad2      	subs	r2, r2, r3
 8003a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	621a      	str	r2, [r3, #32]
 8003a5c:	e00e      	b.n	8003a7c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8003a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8003a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	785b      	ldrb	r3, [r3, #1]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d177      	bne.n	8003b7c <USB_EPStartXfer+0x4c4>
 8003a8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	61bb      	str	r3, [r7, #24]
 8003a98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	4413      	add	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
 8003ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	011a      	lsls	r2, r3, #4
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	881b      	ldrh	r3, [r3, #0]
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	801a      	strh	r2, [r3, #0]
 8003ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003adc:	2b3e      	cmp	r3, #62	; 0x3e
 8003ade:	d921      	bls.n	8003b24 <USB_EPStartXfer+0x46c>
 8003ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ae4:	095b      	lsrs	r3, r3, #5
 8003ae6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003aee:	f003 031f 	and.w	r3, r3, #31
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d104      	bne.n	8003b00 <USB_EPStartXfer+0x448>
 8003af6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003afa:	3b01      	subs	r3, #1
 8003afc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	881b      	ldrh	r3, [r3, #0]
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	029b      	lsls	r3, r3, #10
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	4313      	orrs	r3, r2
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	801a      	strh	r2, [r3, #0]
 8003b22:	e056      	b.n	8003bd2 <USB_EPStartXfer+0x51a>
 8003b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10a      	bne.n	8003b42 <USB_EPStartXfer+0x48a>
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	801a      	strh	r2, [r3, #0]
 8003b40:	e047      	b.n	8003bd2 <USB_EPStartXfer+0x51a>
 8003b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b46:	085b      	lsrs	r3, r3, #1
 8003b48:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d004      	beq.n	8003b62 <USB_EPStartXfer+0x4aa>
 8003b58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	881b      	ldrh	r3, [r3, #0]
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	029b      	lsls	r3, r3, #10
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	4313      	orrs	r3, r2
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	801a      	strh	r2, [r3, #0]
 8003b7a:	e02a      	b.n	8003bd2 <USB_EPStartXfer+0x51a>
 8003b7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	785b      	ldrb	r3, [r3, #1]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d122      	bne.n	8003bd2 <USB_EPStartXfer+0x51a>
 8003b8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	623b      	str	r3, [r7, #32]
 8003b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	461a      	mov	r2, r3
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	4413      	add	r3, r2
 8003bae:	623b      	str	r3, [r7, #32]
 8003bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	011a      	lsls	r2, r3, #4
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bc6:	61fb      	str	r3, [r7, #28]
 8003bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003bd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003bd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	891b      	ldrh	r3, [r3, #8]
 8003bde:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003be2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003be6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6959      	ldr	r1, [r3, #20]
 8003bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003bf8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003bfc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003c00:	6800      	ldr	r0, [r0, #0]
 8003c02:	f001 fa48 	bl	8005096 <USB_WritePMA>
 8003c06:	e3ee      	b.n	80043e6 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	785b      	ldrb	r3, [r3, #1]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d177      	bne.n	8003d08 <USB_EPStartXfer+0x650>
 8003c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	461a      	mov	r2, r3
 8003c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c38:	4413      	add	r3, r2
 8003c3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	011a      	lsls	r2, r3, #4
 8003c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c52:	647b      	str	r3, [r7, #68]	; 0x44
 8003c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c56:	881b      	ldrh	r3, [r3, #0]
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c62:	801a      	strh	r2, [r3, #0]
 8003c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c68:	2b3e      	cmp	r3, #62	; 0x3e
 8003c6a:	d921      	bls.n	8003cb0 <USB_EPStartXfer+0x5f8>
 8003c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c7a:	f003 031f 	and.w	r3, r3, #31
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d104      	bne.n	8003c8c <USB_EPStartXfer+0x5d4>
 8003c82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c86:	3b01      	subs	r3, #1
 8003c88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	029b      	lsls	r3, r3, #10
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ca4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cac:	801a      	strh	r2, [r3, #0]
 8003cae:	e056      	b.n	8003d5e <USB_EPStartXfer+0x6a6>
 8003cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10a      	bne.n	8003cce <USB_EPStartXfer+0x616>
 8003cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cca:	801a      	strh	r2, [r3, #0]
 8003ccc:	e047      	b.n	8003d5e <USB_EPStartXfer+0x6a6>
 8003cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cd2:	085b      	lsrs	r3, r3, #1
 8003cd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d004      	beq.n	8003cee <USB_EPStartXfer+0x636>
 8003ce4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ce8:	3301      	adds	r3, #1
 8003cea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cf0:	881b      	ldrh	r3, [r3, #0]
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	029b      	lsls	r3, r3, #10
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d04:	801a      	strh	r2, [r3, #0]
 8003d06:	e02a      	b.n	8003d5e <USB_EPStartXfer+0x6a6>
 8003d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	785b      	ldrb	r3, [r3, #1]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d122      	bne.n	8003d5e <USB_EPStartXfer+0x6a6>
 8003d18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	653b      	str	r3, [r7, #80]	; 0x50
 8003d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	461a      	mov	r2, r3
 8003d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d38:	4413      	add	r3, r2
 8003d3a:	653b      	str	r3, [r7, #80]	; 0x50
 8003d3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	011a      	lsls	r2, r3, #4
 8003d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d5c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003d5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	891b      	ldrh	r3, [r3, #8]
 8003d6a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003d6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6959      	ldr	r1, [r3, #20]
 8003d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003d84:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003d88:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003d8c:	6800      	ldr	r0, [r0, #0]
 8003d8e:	f001 f982 	bl	8005096 <USB_WritePMA>
            ep->xfer_buff += len;
 8003d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695a      	ldr	r2, [r3, #20]
 8003d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003da2:	441a      	add	r2, r3
 8003da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003db4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6a1a      	ldr	r2, [r3, #32]
 8003dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d90f      	bls.n	8003dec <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8003dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6a1a      	ldr	r2, [r3, #32]
 8003dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ddc:	1ad2      	subs	r2, r2, r3
 8003dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003de2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	621a      	str	r2, [r3, #32]
 8003dea:	e00e      	b.n	8003e0a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8003dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003df0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8003dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2200      	movs	r2, #0
 8003e08:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	643b      	str	r3, [r7, #64]	; 0x40
 8003e16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	785b      	ldrb	r3, [r3, #1]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d177      	bne.n	8003f16 <USB_EPStartXfer+0x85e>
 8003e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	461a      	mov	r2, r3
 8003e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e46:	4413      	add	r3, r2
 8003e48:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	011a      	lsls	r2, r3, #4
 8003e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e60:	637b      	str	r3, [r7, #52]	; 0x34
 8003e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e64:	881b      	ldrh	r3, [r3, #0]
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e70:	801a      	strh	r2, [r3, #0]
 8003e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e76:	2b3e      	cmp	r3, #62	; 0x3e
 8003e78:	d921      	bls.n	8003ebe <USB_EPStartXfer+0x806>
 8003e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d104      	bne.n	8003e9a <USB_EPStartXfer+0x7e2>
 8003e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e94:	3b01      	subs	r3, #1
 8003e96:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	029b      	lsls	r3, r3, #10
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eba:	801a      	strh	r2, [r3, #0]
 8003ebc:	e050      	b.n	8003f60 <USB_EPStartXfer+0x8a8>
 8003ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10a      	bne.n	8003edc <USB_EPStartXfer+0x824>
 8003ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ed0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed8:	801a      	strh	r2, [r3, #0]
 8003eda:	e041      	b.n	8003f60 <USB_EPStartXfer+0x8a8>
 8003edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ee0:	085b      	lsrs	r3, r3, #1
 8003ee2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d004      	beq.n	8003efc <USB_EPStartXfer+0x844>
 8003ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003efe:	881b      	ldrh	r3, [r3, #0]
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	029b      	lsls	r3, r3, #10
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f12:	801a      	strh	r2, [r3, #0]
 8003f14:	e024      	b.n	8003f60 <USB_EPStartXfer+0x8a8>
 8003f16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	785b      	ldrb	r3, [r3, #1]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d11c      	bne.n	8003f60 <USB_EPStartXfer+0x8a8>
 8003f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	461a      	mov	r2, r3
 8003f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f3a:	4413      	add	r3, r2
 8003f3c:	643b      	str	r3, [r7, #64]	; 0x40
 8003f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	011a      	lsls	r2, r3, #4
 8003f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f4e:	4413      	add	r3, r2
 8003f50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f5e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	895b      	ldrh	r3, [r3, #10]
 8003f6c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003f70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6959      	ldr	r1, [r3, #20]
 8003f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003f86:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003f8a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003f8e:	6800      	ldr	r0, [r0, #0]
 8003f90:	f001 f881 	bl	8005096 <USB_WritePMA>
 8003f94:	e227      	b.n	80043e6 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003f96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8003fa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003faa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fcc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003fd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	441a      	add	r2, r3
 8003fea:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003fee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ff2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004006:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800400e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004012:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800401c:	b29b      	uxth	r3, r3
 800401e:	461a      	mov	r2, r3
 8004020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004022:	4413      	add	r3, r2
 8004024:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800402a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	011a      	lsls	r2, r3, #4
 8004034:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004036:	4413      	add	r3, r2
 8004038:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800403c:	65bb      	str	r3, [r7, #88]	; 0x58
 800403e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004042:	b29a      	uxth	r2, r3
 8004044:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004046:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004048:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800404c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	891b      	ldrh	r3, [r3, #8]
 8004054:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800405c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6959      	ldr	r1, [r3, #20]
 8004064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004068:	b29b      	uxth	r3, r3
 800406a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800406e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004072:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004076:	6800      	ldr	r0, [r0, #0]
 8004078:	f001 f80d 	bl	8005096 <USB_WritePMA>
 800407c:	e1b3      	b.n	80043e6 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800407e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004082:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6a1a      	ldr	r2, [r3, #32]
 800408a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800408e:	1ad2      	subs	r2, r2, r3
 8004090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800409c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 80c6 	beq.w	8004250 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80040c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	673b      	str	r3, [r7, #112]	; 0x70
 80040d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	785b      	ldrb	r3, [r3, #1]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d177      	bne.n	80041d0 <USB_EPStartXfer+0xb18>
 80040e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80040ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	461a      	mov	r2, r3
 80040fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004100:	4413      	add	r3, r2
 8004102:	66bb      	str	r3, [r7, #104]	; 0x68
 8004104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	011a      	lsls	r2, r3, #4
 8004112:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004114:	4413      	add	r3, r2
 8004116:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800411a:	667b      	str	r3, [r7, #100]	; 0x64
 800411c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	b29b      	uxth	r3, r3
 8004122:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004126:	b29a      	uxth	r2, r3
 8004128:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800412a:	801a      	strh	r2, [r3, #0]
 800412c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004130:	2b3e      	cmp	r3, #62	; 0x3e
 8004132:	d921      	bls.n	8004178 <USB_EPStartXfer+0xac0>
 8004134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004138:	095b      	lsrs	r3, r3, #5
 800413a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800413e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004142:	f003 031f 	and.w	r3, r3, #31
 8004146:	2b00      	cmp	r3, #0
 8004148:	d104      	bne.n	8004154 <USB_EPStartXfer+0xa9c>
 800414a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800414e:	3b01      	subs	r3, #1
 8004150:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004154:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	b29a      	uxth	r2, r3
 800415a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800415e:	b29b      	uxth	r3, r3
 8004160:	029b      	lsls	r3, r3, #10
 8004162:	b29b      	uxth	r3, r3
 8004164:	4313      	orrs	r3, r2
 8004166:	b29b      	uxth	r3, r3
 8004168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800416c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004170:	b29a      	uxth	r2, r3
 8004172:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004174:	801a      	strh	r2, [r3, #0]
 8004176:	e050      	b.n	800421a <USB_EPStartXfer+0xb62>
 8004178:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10a      	bne.n	8004196 <USB_EPStartXfer+0xade>
 8004180:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004182:	881b      	ldrh	r3, [r3, #0]
 8004184:	b29b      	uxth	r3, r3
 8004186:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800418a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800418e:	b29a      	uxth	r2, r3
 8004190:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004192:	801a      	strh	r2, [r3, #0]
 8004194:	e041      	b.n	800421a <USB_EPStartXfer+0xb62>
 8004196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800419a:	085b      	lsrs	r3, r3, #1
 800419c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80041a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d004      	beq.n	80041b6 <USB_EPStartXfer+0xafe>
 80041ac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80041b0:	3301      	adds	r3, #1
 80041b2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80041b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	029b      	lsls	r3, r3, #10
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	4313      	orrs	r3, r2
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041cc:	801a      	strh	r2, [r3, #0]
 80041ce:	e024      	b.n	800421a <USB_EPStartXfer+0xb62>
 80041d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	785b      	ldrb	r3, [r3, #1]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d11c      	bne.n	800421a <USB_EPStartXfer+0xb62>
 80041e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	461a      	mov	r2, r3
 80041f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041f4:	4413      	add	r3, r2
 80041f6:	673b      	str	r3, [r7, #112]	; 0x70
 80041f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	011a      	lsls	r2, r3, #4
 8004206:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004208:	4413      	add	r3, r2
 800420a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800420e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004214:	b29a      	uxth	r2, r3
 8004216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004218:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800421a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800421e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	895b      	ldrh	r3, [r3, #10]
 8004226:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800422a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800422e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6959      	ldr	r1, [r3, #20]
 8004236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800423a:	b29b      	uxth	r3, r3
 800423c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004240:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004244:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004248:	6800      	ldr	r0, [r0, #0]
 800424a:	f000 ff24 	bl	8005096 <USB_WritePMA>
 800424e:	e0ca      	b.n	80043e6 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004254:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	785b      	ldrb	r3, [r3, #1]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d177      	bne.n	8004350 <USB_EPStartXfer+0xc98>
 8004260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004264:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800426c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004270:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800427a:	b29b      	uxth	r3, r3
 800427c:	461a      	mov	r2, r3
 800427e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004280:	4413      	add	r3, r2
 8004282:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	011a      	lsls	r2, r3, #4
 8004292:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004294:	4413      	add	r3, r2
 8004296:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800429a:	67bb      	str	r3, [r7, #120]	; 0x78
 800429c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800429e:	881b      	ldrh	r3, [r3, #0]
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042aa:	801a      	strh	r2, [r3, #0]
 80042ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042b0:	2b3e      	cmp	r3, #62	; 0x3e
 80042b2:	d921      	bls.n	80042f8 <USB_EPStartXfer+0xc40>
 80042b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042b8:	095b      	lsrs	r3, r3, #5
 80042ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80042be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042c2:	f003 031f 	and.w	r3, r3, #31
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d104      	bne.n	80042d4 <USB_EPStartXfer+0xc1c>
 80042ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80042ce:	3b01      	subs	r3, #1
 80042d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80042d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	b29a      	uxth	r2, r3
 80042da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80042de:	b29b      	uxth	r3, r3
 80042e0:	029b      	lsls	r3, r3, #10
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	4313      	orrs	r3, r2
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042f4:	801a      	strh	r2, [r3, #0]
 80042f6:	e05c      	b.n	80043b2 <USB_EPStartXfer+0xcfa>
 80042f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10a      	bne.n	8004316 <USB_EPStartXfer+0xc5e>
 8004300:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	b29b      	uxth	r3, r3
 8004306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800430a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800430e:	b29a      	uxth	r2, r3
 8004310:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004312:	801a      	strh	r2, [r3, #0]
 8004314:	e04d      	b.n	80043b2 <USB_EPStartXfer+0xcfa>
 8004316:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800431a:	085b      	lsrs	r3, r3, #1
 800431c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b00      	cmp	r3, #0
 800432a:	d004      	beq.n	8004336 <USB_EPStartXfer+0xc7e>
 800432c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004330:	3301      	adds	r3, #1
 8004332:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004336:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004338:	881b      	ldrh	r3, [r3, #0]
 800433a:	b29a      	uxth	r2, r3
 800433c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004340:	b29b      	uxth	r3, r3
 8004342:	029b      	lsls	r3, r3, #10
 8004344:	b29b      	uxth	r3, r3
 8004346:	4313      	orrs	r3, r2
 8004348:	b29a      	uxth	r2, r3
 800434a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800434c:	801a      	strh	r2, [r3, #0]
 800434e:	e030      	b.n	80043b2 <USB_EPStartXfer+0xcfa>
 8004350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	785b      	ldrb	r3, [r3, #1]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d128      	bne.n	80043b2 <USB_EPStartXfer+0xcfa>
 8004360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004364:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800436e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004372:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800437c:	b29b      	uxth	r3, r3
 800437e:	461a      	mov	r2, r3
 8004380:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004384:	4413      	add	r3, r2
 8004386:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800438a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800438e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	011a      	lsls	r2, r3, #4
 8004398:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800439c:	4413      	add	r3, r2
 800439e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043b0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80043b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	891b      	ldrh	r3, [r3, #8]
 80043be:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80043c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6959      	ldr	r1, [r3, #20]
 80043ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80043d8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80043dc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80043e0:	6800      	ldr	r0, [r0, #0]
 80043e2:	f000 fe58 	bl	8005096 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80043e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	b29b      	uxth	r3, r3
 8004404:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800440c:	817b      	strh	r3, [r7, #10]
 800440e:	897b      	ldrh	r3, [r7, #10]
 8004410:	f083 0310 	eor.w	r3, r3, #16
 8004414:	817b      	strh	r3, [r7, #10]
 8004416:	897b      	ldrh	r3, [r7, #10]
 8004418:	f083 0320 	eor.w	r3, r3, #32
 800441c:	817b      	strh	r3, [r7, #10]
 800441e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004422:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800442c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	441a      	add	r2, r3
 8004438:	897b      	ldrh	r3, [r7, #10]
 800443a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800443e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800444a:	b29b      	uxth	r3, r3
 800444c:	8013      	strh	r3, [r2, #0]
 800444e:	f000 bcde 	b.w	8004e0e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	7b1b      	ldrb	r3, [r3, #12]
 800445e:	2b00      	cmp	r3, #0
 8004460:	f040 80bb 	bne.w	80045da <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004468:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	699a      	ldr	r2, [r3, #24]
 8004470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004474:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	429a      	cmp	r2, r3
 800447e:	d917      	bls.n	80044b0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8004480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8004490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	699a      	ldr	r2, [r3, #24]
 800449c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044a0:	1ad2      	subs	r2, r2, r3
 80044a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	619a      	str	r2, [r3, #24]
 80044ae:	e00e      	b.n	80044ce <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80044b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80044c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2200      	movs	r2, #0
 80044cc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80044ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	461a      	mov	r2, r3
 80044ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044f2:	4413      	add	r3, r2
 80044f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	011a      	lsls	r2, r3, #4
 8004506:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800450a:	4413      	add	r3, r2
 800450c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004510:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004514:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004518:	881b      	ldrh	r3, [r3, #0]
 800451a:	b29b      	uxth	r3, r3
 800451c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004520:	b29a      	uxth	r2, r3
 8004522:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004526:	801a      	strh	r2, [r3, #0]
 8004528:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800452c:	2b3e      	cmp	r3, #62	; 0x3e
 800452e:	d924      	bls.n	800457a <USB_EPStartXfer+0xec2>
 8004530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004534:	095b      	lsrs	r3, r3, #5
 8004536:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800453a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800453e:	f003 031f 	and.w	r3, r3, #31
 8004542:	2b00      	cmp	r3, #0
 8004544:	d104      	bne.n	8004550 <USB_EPStartXfer+0xe98>
 8004546:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800454a:	3b01      	subs	r3, #1
 800454c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004550:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	b29a      	uxth	r2, r3
 8004558:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800455c:	b29b      	uxth	r3, r3
 800455e:	029b      	lsls	r3, r3, #10
 8004560:	b29b      	uxth	r3, r3
 8004562:	4313      	orrs	r3, r2
 8004564:	b29b      	uxth	r3, r3
 8004566:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800456a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800456e:	b29a      	uxth	r2, r3
 8004570:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004574:	801a      	strh	r2, [r3, #0]
 8004576:	f000 bc10 	b.w	8004d9a <USB_EPStartXfer+0x16e2>
 800457a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10c      	bne.n	800459c <USB_EPStartXfer+0xee4>
 8004582:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	b29b      	uxth	r3, r3
 800458a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800458e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004592:	b29a      	uxth	r2, r3
 8004594:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004598:	801a      	strh	r2, [r3, #0]
 800459a:	e3fe      	b.n	8004d9a <USB_EPStartXfer+0x16e2>
 800459c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045a0:	085b      	lsrs	r3, r3, #1
 80045a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d004      	beq.n	80045bc <USB_EPStartXfer+0xf04>
 80045b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80045b6:	3301      	adds	r3, #1
 80045b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045c0:	881b      	ldrh	r3, [r3, #0]
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	029b      	lsls	r3, r3, #10
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	4313      	orrs	r3, r2
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045d6:	801a      	strh	r2, [r3, #0]
 80045d8:	e3df      	b.n	8004d9a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80045da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	78db      	ldrb	r3, [r3, #3]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	f040 8218 	bne.w	8004a1c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80045ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	785b      	ldrb	r3, [r3, #1]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f040 809d 	bne.w	8004738 <USB_EPStartXfer+0x1080>
 80045fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004602:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800460c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004610:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800461a:	b29b      	uxth	r3, r3
 800461c:	461a      	mov	r2, r3
 800461e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004622:	4413      	add	r3, r2
 8004624:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800462c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	011a      	lsls	r2, r3, #4
 8004636:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800463a:	4413      	add	r3, r2
 800463c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004640:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004644:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	b29b      	uxth	r3, r3
 800464c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004650:	b29a      	uxth	r2, r3
 8004652:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004656:	801a      	strh	r2, [r3, #0]
 8004658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800465c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	2b3e      	cmp	r3, #62	; 0x3e
 8004666:	d92b      	bls.n	80046c0 <USB_EPStartXfer+0x1008>
 8004668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800466c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	095b      	lsrs	r3, r3, #5
 8004676:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800467a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800467e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	f003 031f 	and.w	r3, r3, #31
 800468a:	2b00      	cmp	r3, #0
 800468c:	d104      	bne.n	8004698 <USB_EPStartXfer+0xfe0>
 800468e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004692:	3b01      	subs	r3, #1
 8004694:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004698:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800469c:	881b      	ldrh	r3, [r3, #0]
 800469e:	b29a      	uxth	r2, r3
 80046a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	029b      	lsls	r3, r3, #10
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	4313      	orrs	r3, r2
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046bc:	801a      	strh	r2, [r3, #0]
 80046be:	e070      	b.n	80047a2 <USB_EPStartXfer+0x10ea>
 80046c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10c      	bne.n	80046ea <USB_EPStartXfer+0x1032>
 80046d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046e6:	801a      	strh	r2, [r3, #0]
 80046e8:	e05b      	b.n	80047a2 <USB_EPStartXfer+0x10ea>
 80046ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	085b      	lsrs	r3, r3, #1
 80046f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d004      	beq.n	800471a <USB_EPStartXfer+0x1062>
 8004710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004714:	3301      	adds	r3, #1
 8004716:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800471a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800471e:	881b      	ldrh	r3, [r3, #0]
 8004720:	b29a      	uxth	r2, r3
 8004722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004726:	b29b      	uxth	r3, r3
 8004728:	029b      	lsls	r3, r3, #10
 800472a:	b29b      	uxth	r3, r3
 800472c:	4313      	orrs	r3, r2
 800472e:	b29a      	uxth	r2, r3
 8004730:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004734:	801a      	strh	r2, [r3, #0]
 8004736:	e034      	b.n	80047a2 <USB_EPStartXfer+0x10ea>
 8004738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800473c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	785b      	ldrb	r3, [r3, #1]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d12c      	bne.n	80047a2 <USB_EPStartXfer+0x10ea>
 8004748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800474c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800475a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004764:	b29b      	uxth	r3, r3
 8004766:	461a      	mov	r2, r3
 8004768:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800476c:	4413      	add	r3, r2
 800476e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004776:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	011a      	lsls	r2, r3, #4
 8004780:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004784:	4413      	add	r3, r2
 8004786:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800478a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800478e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004792:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	b29a      	uxth	r2, r3
 800479c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80047a0:	801a      	strh	r2, [r3, #0]
 80047a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80047b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	785b      	ldrb	r3, [r3, #1]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f040 809d 	bne.w	80048fc <USB_EPStartXfer+0x1244>
 80047c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047de:	b29b      	uxth	r3, r3
 80047e0:	461a      	mov	r2, r3
 80047e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047e6:	4413      	add	r3, r2
 80047e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	011a      	lsls	r2, r3, #4
 80047fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047fe:	4413      	add	r3, r2
 8004800:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004804:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004808:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800480c:	881b      	ldrh	r3, [r3, #0]
 800480e:	b29b      	uxth	r3, r3
 8004810:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004814:	b29a      	uxth	r2, r3
 8004816:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800481a:	801a      	strh	r2, [r3, #0]
 800481c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	2b3e      	cmp	r3, #62	; 0x3e
 800482a:	d92b      	bls.n	8004884 <USB_EPStartXfer+0x11cc>
 800482c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	095b      	lsrs	r3, r3, #5
 800483a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800483e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	f003 031f 	and.w	r3, r3, #31
 800484e:	2b00      	cmp	r3, #0
 8004850:	d104      	bne.n	800485c <USB_EPStartXfer+0x11a4>
 8004852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004856:	3b01      	subs	r3, #1
 8004858:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800485c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004860:	881b      	ldrh	r3, [r3, #0]
 8004862:	b29a      	uxth	r2, r3
 8004864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004868:	b29b      	uxth	r3, r3
 800486a:	029b      	lsls	r3, r3, #10
 800486c:	b29b      	uxth	r3, r3
 800486e:	4313      	orrs	r3, r2
 8004870:	b29b      	uxth	r3, r3
 8004872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800487a:	b29a      	uxth	r2, r3
 800487c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004880:	801a      	strh	r2, [r3, #0]
 8004882:	e069      	b.n	8004958 <USB_EPStartXfer+0x12a0>
 8004884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004888:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10c      	bne.n	80048ae <USB_EPStartXfer+0x11f6>
 8004894:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004898:	881b      	ldrh	r3, [r3, #0]
 800489a:	b29b      	uxth	r3, r3
 800489c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048aa:	801a      	strh	r2, [r3, #0]
 80048ac:	e054      	b.n	8004958 <USB_EPStartXfer+0x12a0>
 80048ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	085b      	lsrs	r3, r3, #1
 80048bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d004      	beq.n	80048de <USB_EPStartXfer+0x1226>
 80048d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048d8:	3301      	adds	r3, #1
 80048da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048e2:	881b      	ldrh	r3, [r3, #0]
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	029b      	lsls	r3, r3, #10
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	4313      	orrs	r3, r2
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048f8:	801a      	strh	r2, [r3, #0]
 80048fa:	e02d      	b.n	8004958 <USB_EPStartXfer+0x12a0>
 80048fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004900:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	785b      	ldrb	r3, [r3, #1]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d125      	bne.n	8004958 <USB_EPStartXfer+0x12a0>
 800490c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004910:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800491a:	b29b      	uxth	r3, r3
 800491c:	461a      	mov	r2, r3
 800491e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004922:	4413      	add	r3, r2
 8004924:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800492c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	011a      	lsls	r2, r3, #4
 8004936:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800493a:	4413      	add	r3, r2
 800493c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004940:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	b29a      	uxth	r2, r3
 8004952:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004956:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800495c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 8218 	beq.w	8004d9a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800496a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800496e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4413      	add	r3, r2
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800498a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800498e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d005      	beq.n	80049a2 <USB_EPStartXfer+0x12ea>
 8004996:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800499a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10d      	bne.n	80049be <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80049a2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80049a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f040 81f5 	bne.w	8004d9a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80049b0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80049b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f040 81ee 	bne.w	8004d9a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80049be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	b29b      	uxth	r3, r3
 80049dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80049e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	441a      	add	r2, r3
 8004a02:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8004a06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	8013      	strh	r3, [r2, #0]
 8004a1a:	e1be      	b.n	8004d9a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	78db      	ldrb	r3, [r3, #3]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	f040 81b4 	bne.w	8004d96 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	699a      	ldr	r2, [r3, #24]
 8004a3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d917      	bls.n	8004a7a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8004a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8004a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	699a      	ldr	r2, [r3, #24]
 8004a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a6a:	1ad2      	subs	r2, r2, r3
 8004a6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	619a      	str	r2, [r3, #24]
 8004a78:	e00e      	b.n	8004a98 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8004a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8004a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2200      	movs	r2, #0
 8004a96:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004a98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	785b      	ldrb	r3, [r3, #1]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f040 8085 	bne.w	8004bb4 <USB_EPStartXfer+0x14fc>
 8004aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004abc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	461a      	mov	r2, r3
 8004aca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ace:	4413      	add	r3, r2
 8004ad0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	011a      	lsls	r2, r3, #4
 8004ae2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004aec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004af0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b02:	801a      	strh	r2, [r3, #0]
 8004b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b08:	2b3e      	cmp	r3, #62	; 0x3e
 8004b0a:	d923      	bls.n	8004b54 <USB_EPStartXfer+0x149c>
 8004b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b10:	095b      	lsrs	r3, r3, #5
 8004b12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b1a:	f003 031f 	and.w	r3, r3, #31
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d104      	bne.n	8004b2c <USB_EPStartXfer+0x1474>
 8004b22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b26:	3b01      	subs	r3, #1
 8004b28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004b2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	029b      	lsls	r3, r3, #10
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b50:	801a      	strh	r2, [r3, #0]
 8004b52:	e060      	b.n	8004c16 <USB_EPStartXfer+0x155e>
 8004b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10c      	bne.n	8004b76 <USB_EPStartXfer+0x14be>
 8004b5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b60:	881b      	ldrh	r3, [r3, #0]
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b72:	801a      	strh	r2, [r3, #0]
 8004b74:	e04f      	b.n	8004c16 <USB_EPStartXfer+0x155e>
 8004b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b7a:	085b      	lsrs	r3, r3, #1
 8004b7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d004      	beq.n	8004b96 <USB_EPStartXfer+0x14de>
 8004b8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b90:	3301      	adds	r3, #1
 8004b92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004b96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	029b      	lsls	r3, r3, #10
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004bb0:	801a      	strh	r2, [r3, #0]
 8004bb2:	e030      	b.n	8004c16 <USB_EPStartXfer+0x155e>
 8004bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	785b      	ldrb	r3, [r3, #1]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d128      	bne.n	8004c16 <USB_EPStartXfer+0x155e>
 8004bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004bd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	461a      	mov	r2, r3
 8004be4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004be8:	4413      	add	r3, r2
 8004bea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	011a      	lsls	r2, r3, #4
 8004bfc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c00:	4413      	add	r3, r2
 8004c02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c06:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004c14:	801a      	strh	r2, [r3, #0]
 8004c16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	785b      	ldrb	r3, [r3, #1]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f040 8085 	bne.w	8004d40 <USB_EPStartXfer+0x1688>
 8004c36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	461a      	mov	r2, r3
 8004c56:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	011a      	lsls	r2, r3, #4
 8004c6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c72:	4413      	add	r3, r2
 8004c74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c80:	881b      	ldrh	r3, [r3, #0]
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c8e:	801a      	strh	r2, [r3, #0]
 8004c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c94:	2b3e      	cmp	r3, #62	; 0x3e
 8004c96:	d923      	bls.n	8004ce0 <USB_EPStartXfer+0x1628>
 8004c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c9c:	095b      	lsrs	r3, r3, #5
 8004c9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ca6:	f003 031f 	and.w	r3, r3, #31
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d104      	bne.n	8004cb8 <USB_EPStartXfer+0x1600>
 8004cae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004cb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	029b      	lsls	r3, r3, #10
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004cdc:	801a      	strh	r2, [r3, #0]
 8004cde:	e05c      	b.n	8004d9a <USB_EPStartXfer+0x16e2>
 8004ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10c      	bne.n	8004d02 <USB_EPStartXfer+0x164a>
 8004ce8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004cfe:	801a      	strh	r2, [r3, #0]
 8004d00:	e04b      	b.n	8004d9a <USB_EPStartXfer+0x16e2>
 8004d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d06:	085b      	lsrs	r3, r3, #1
 8004d08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d004      	beq.n	8004d22 <USB_EPStartXfer+0x166a>
 8004d18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	029b      	lsls	r3, r3, #10
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	4313      	orrs	r3, r2
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d3c:	801a      	strh	r2, [r3, #0]
 8004d3e:	e02c      	b.n	8004d9a <USB_EPStartXfer+0x16e2>
 8004d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	785b      	ldrb	r3, [r3, #1]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d124      	bne.n	8004d9a <USB_EPStartXfer+0x16e2>
 8004d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	461a      	mov	r2, r3
 8004d62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d66:	4413      	add	r3, r2
 8004d68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	011a      	lsls	r2, r3, #4
 8004d7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d7e:	4413      	add	r3, r2
 8004d80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004d92:	801a      	strh	r2, [r3, #0]
 8004d94:	e001      	b.n	8004d9a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e03a      	b.n	8004e10 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004dc4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004dc8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004dcc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004dd0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004dd4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004dd8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004de0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	441a      	add	r2, r3
 8004df6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004dfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b085      	sub	sp, #20
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
 8004e22:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	785b      	ldrb	r3, [r3, #1]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d020      	beq.n	8004e6e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	881b      	ldrh	r3, [r3, #0]
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e42:	81bb      	strh	r3, [r7, #12]
 8004e44:	89bb      	ldrh	r3, [r7, #12]
 8004e46:	f083 0310 	eor.w	r3, r3, #16
 8004e4a:	81bb      	strh	r3, [r7, #12]
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	441a      	add	r2, r3
 8004e56:	89bb      	ldrh	r3, [r7, #12]
 8004e58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	8013      	strh	r3, [r2, #0]
 8004e6c:	e01f      	b.n	8004eae <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e84:	81fb      	strh	r3, [r7, #14]
 8004e86:	89fb      	ldrh	r3, [r7, #14]
 8004e88:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e8c:	81fb      	strh	r3, [r7, #14]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	441a      	add	r2, r3
 8004e98:	89fb      	ldrh	r3, [r7, #14]
 8004e9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bc80      	pop	{r7}
 8004eb8:	4770      	bx	lr

08004eba <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b087      	sub	sp, #28
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
 8004ec2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	7b1b      	ldrb	r3, [r3, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f040 809d 	bne.w	8005008 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	785b      	ldrb	r3, [r3, #1]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d04c      	beq.n	8004f70 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	823b      	strh	r3, [r7, #16]
 8004ee4:	8a3b      	ldrh	r3, [r7, #16]
 8004ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d01b      	beq.n	8004f26 <USB_EPClearStall+0x6c>
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f04:	81fb      	strh	r3, [r7, #14]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	441a      	add	r2, r3
 8004f10:	89fb      	ldrh	r3, [r7, #14]
 8004f12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	78db      	ldrb	r3, [r3, #3]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d06c      	beq.n	8005008 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f44:	81bb      	strh	r3, [r7, #12]
 8004f46:	89bb      	ldrh	r3, [r7, #12]
 8004f48:	f083 0320 	eor.w	r3, r3, #32
 8004f4c:	81bb      	strh	r3, [r7, #12]
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	441a      	add	r2, r3
 8004f58:	89bb      	ldrh	r3, [r7, #12]
 8004f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	8013      	strh	r3, [r2, #0]
 8004f6e:	e04b      	b.n	8005008 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	82fb      	strh	r3, [r7, #22]
 8004f7e:	8afb      	ldrh	r3, [r7, #22]
 8004f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d01b      	beq.n	8004fc0 <USB_EPClearStall+0x106>
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4413      	add	r3, r2
 8004f92:	881b      	ldrh	r3, [r3, #0]
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9e:	82bb      	strh	r3, [r7, #20]
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	441a      	add	r2, r3
 8004faa:	8abb      	ldrh	r3, [r7, #20]
 8004fac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd6:	827b      	strh	r3, [r7, #18]
 8004fd8:	8a7b      	ldrh	r3, [r7, #18]
 8004fda:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004fde:	827b      	strh	r3, [r7, #18]
 8004fe0:	8a7b      	ldrh	r3, [r7, #18]
 8004fe2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004fe6:	827b      	strh	r3, [r7, #18]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	441a      	add	r2, r3
 8004ff2:	8a7b      	ldrh	r3, [r7, #18]
 8004ff4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ff8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005004:	b29b      	uxth	r3, r3
 8005006:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	371c      	adds	r7, #28
 800500e:	46bd      	mov	sp, r7
 8005010:	bc80      	pop	{r7}
 8005012:	4770      	bx	lr

08005014 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	460b      	mov	r3, r1
 800501e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005020:	78fb      	ldrb	r3, [r7, #3]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d103      	bne.n	800502e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2280      	movs	r2, #128	; 0x80
 800502a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	bc80      	pop	{r7}
 8005038:	4770      	bx	lr

0800503a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800503a:	b480      	push	{r7}
 800503c:	b083      	sub	sp, #12
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	bc80      	pop	{r7}
 800504c:	4770      	bx	lr

0800504e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800504e:	b480      	push	{r7}
 8005050:	b083      	sub	sp, #12
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	bc80      	pop	{r7}
 8005060:	4770      	bx	lr

08005062 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8005062:	b480      	push	{r7}
 8005064:	b085      	sub	sp, #20
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005070:	b29b      	uxth	r3, r3
 8005072:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005074:	68fb      	ldr	r3, [r7, #12]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	bc80      	pop	{r7}
 800507e:	4770      	bx	lr

08005080 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	bc80      	pop	{r7}
 8005094:	4770      	bx	lr

08005096 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005096:	b480      	push	{r7}
 8005098:	b08b      	sub	sp, #44	; 0x2c
 800509a:	af00      	add	r7, sp, #0
 800509c:	60f8      	str	r0, [r7, #12]
 800509e:	60b9      	str	r1, [r7, #8]
 80050a0:	4611      	mov	r1, r2
 80050a2:	461a      	mov	r2, r3
 80050a4:	460b      	mov	r3, r1
 80050a6:	80fb      	strh	r3, [r7, #6]
 80050a8:	4613      	mov	r3, r2
 80050aa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80050ac:	88bb      	ldrh	r3, [r7, #4]
 80050ae:	3301      	adds	r3, #1
 80050b0:	085b      	lsrs	r3, r3, #1
 80050b2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80050bc:	88fb      	ldrh	r3, [r7, #6]
 80050be:	005a      	lsls	r2, r3, #1
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050c8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	627b      	str	r3, [r7, #36]	; 0x24
 80050ce:	e01e      	b.n	800510e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	3301      	adds	r3, #1
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	021b      	lsls	r3, r3, #8
 80050de:	b21a      	sxth	r2, r3
 80050e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	b21b      	sxth	r3, r3
 80050e8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	8a7a      	ldrh	r2, [r7, #18]
 80050ee:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80050f0:	6a3b      	ldr	r3, [r7, #32]
 80050f2:	3302      	adds	r3, #2
 80050f4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	3302      	adds	r3, #2
 80050fa:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	3301      	adds	r3, #1
 8005100:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	3301      	adds	r3, #1
 8005106:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	3b01      	subs	r3, #1
 800510c:	627b      	str	r3, [r7, #36]	; 0x24
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1dd      	bne.n	80050d0 <USB_WritePMA+0x3a>
  }
}
 8005114:	bf00      	nop
 8005116:	bf00      	nop
 8005118:	372c      	adds	r7, #44	; 0x2c
 800511a:	46bd      	mov	sp, r7
 800511c:	bc80      	pop	{r7}
 800511e:	4770      	bx	lr

08005120 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005120:	b480      	push	{r7}
 8005122:	b08b      	sub	sp, #44	; 0x2c
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	4611      	mov	r1, r2
 800512c:	461a      	mov	r2, r3
 800512e:	460b      	mov	r3, r1
 8005130:	80fb      	strh	r3, [r7, #6]
 8005132:	4613      	mov	r3, r2
 8005134:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005136:	88bb      	ldrh	r3, [r7, #4]
 8005138:	085b      	lsrs	r3, r3, #1
 800513a:	b29b      	uxth	r3, r3
 800513c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005146:	88fb      	ldrh	r3, [r7, #6]
 8005148:	005a      	lsls	r2, r3, #1
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	4413      	add	r3, r2
 800514e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005152:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	627b      	str	r3, [r7, #36]	; 0x24
 8005158:	e01b      	b.n	8005192 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	881b      	ldrh	r3, [r3, #0]
 800515e:	b29b      	uxth	r3, r3
 8005160:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	3302      	adds	r3, #2
 8005166:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	b2da      	uxtb	r2, r3
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	3301      	adds	r3, #1
 8005174:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	0a1b      	lsrs	r3, r3, #8
 800517a:	b2da      	uxtb	r2, r3
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	3301      	adds	r3, #1
 8005184:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	3302      	adds	r3, #2
 800518a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	3b01      	subs	r3, #1
 8005190:	627b      	str	r3, [r7, #36]	; 0x24
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1e0      	bne.n	800515a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005198:	88bb      	ldrh	r3, [r7, #4]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	b29b      	uxth	r3, r3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d007      	beq.n	80051b4 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	881b      	ldrh	r3, [r3, #0]
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	b2da      	uxtb	r2, r3
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	701a      	strb	r2, [r3, #0]
  }
}
 80051b4:	bf00      	nop
 80051b6:	372c      	adds	r7, #44	; 0x2c
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bc80      	pop	{r7}
 80051bc:	4770      	bx	lr

080051be <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b084      	sub	sp, #16
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	460b      	mov	r3, r1
 80051c8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	7c1b      	ldrb	r3, [r3, #16]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d115      	bne.n	8005202 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80051d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051da:	2202      	movs	r2, #2
 80051dc:	2181      	movs	r1, #129	; 0x81
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f001 fe31 	bl	8006e46 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80051ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051ee:	2202      	movs	r2, #2
 80051f0:	2101      	movs	r1, #1
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f001 fe27 	bl	8006e46 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005200:	e012      	b.n	8005228 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005202:	2340      	movs	r3, #64	; 0x40
 8005204:	2202      	movs	r2, #2
 8005206:	2181      	movs	r1, #129	; 0x81
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f001 fe1c 	bl	8006e46 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005214:	2340      	movs	r3, #64	; 0x40
 8005216:	2202      	movs	r2, #2
 8005218:	2101      	movs	r1, #1
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f001 fe13 	bl	8006e46 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005228:	2308      	movs	r3, #8
 800522a:	2203      	movs	r2, #3
 800522c:	2182      	movs	r1, #130	; 0x82
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f001 fe09 	bl	8006e46 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800523a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800523e:	f001 ff29 	bl	8007094 <USBD_static_malloc>
 8005242:	4602      	mov	r2, r0
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005250:	2b00      	cmp	r3, #0
 8005252:	d102      	bne.n	800525a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005254:	2301      	movs	r3, #1
 8005256:	73fb      	strb	r3, [r7, #15]
 8005258:	e026      	b.n	80052a8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005260:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	2200      	movs	r2, #0
 8005270:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2200      	movs	r2, #0
 8005278:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	7c1b      	ldrb	r3, [r3, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d109      	bne.n	8005298 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800528a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800528e:	2101      	movs	r1, #1
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f001 fec9 	bl	8007028 <USBD_LL_PrepareReceive>
 8005296:	e007      	b.n	80052a8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800529e:	2340      	movs	r3, #64	; 0x40
 80052a0:	2101      	movs	r1, #1
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f001 fec0 	bl	8007028 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b084      	sub	sp, #16
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	460b      	mov	r3, r1
 80052bc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80052be:	2300      	movs	r3, #0
 80052c0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80052c2:	2181      	movs	r1, #129	; 0x81
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f001 fde4 	bl	8006e92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80052d0:	2101      	movs	r1, #1
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f001 fddd 	bl	8006e92 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80052e0:	2182      	movs	r1, #130	; 0x82
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f001 fdd5 	bl	8006e92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00e      	beq.n	8005316 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005308:	4618      	mov	r0, r3
 800530a:	f001 fecf 	bl	80070ac <USBD_static_free>
    pdev->pClassData = NULL;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005316:	7bfb      	ldrb	r3, [r7, #15]
}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005330:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005332:	2300      	movs	r3, #0
 8005334:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005336:	2300      	movs	r3, #0
 8005338:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800533a:	2300      	movs	r3, #0
 800533c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005346:	2b00      	cmp	r3, #0
 8005348:	d039      	beq.n	80053be <USBD_CDC_Setup+0x9e>
 800534a:	2b20      	cmp	r3, #32
 800534c:	d17f      	bne.n	800544e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	88db      	ldrh	r3, [r3, #6]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d029      	beq.n	80053aa <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	b25b      	sxtb	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	da11      	bge.n	8005384 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800536c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	88d2      	ldrh	r2, [r2, #6]
 8005372:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005374:	6939      	ldr	r1, [r7, #16]
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	88db      	ldrh	r3, [r3, #6]
 800537a:	461a      	mov	r2, r3
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f001 f9da 	bl	8006736 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005382:	e06b      	b.n	800545c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	785a      	ldrb	r2, [r3, #1]
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	88db      	ldrh	r3, [r3, #6]
 8005392:	b2da      	uxtb	r2, r3
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800539a:	6939      	ldr	r1, [r7, #16]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	88db      	ldrh	r3, [r3, #6]
 80053a0:	461a      	mov	r2, r3
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f001 f9f5 	bl	8006792 <USBD_CtlPrepareRx>
      break;
 80053a8:	e058      	b.n	800545c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	7850      	ldrb	r0, [r2, #1]
 80053b6:	2200      	movs	r2, #0
 80053b8:	6839      	ldr	r1, [r7, #0]
 80053ba:	4798      	blx	r3
      break;
 80053bc:	e04e      	b.n	800545c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	785b      	ldrb	r3, [r3, #1]
 80053c2:	2b0b      	cmp	r3, #11
 80053c4:	d02e      	beq.n	8005424 <USBD_CDC_Setup+0x104>
 80053c6:	2b0b      	cmp	r3, #11
 80053c8:	dc38      	bgt.n	800543c <USBD_CDC_Setup+0x11c>
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d002      	beq.n	80053d4 <USBD_CDC_Setup+0xb4>
 80053ce:	2b0a      	cmp	r3, #10
 80053d0:	d014      	beq.n	80053fc <USBD_CDC_Setup+0xdc>
 80053d2:	e033      	b.n	800543c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053da:	2b03      	cmp	r3, #3
 80053dc:	d107      	bne.n	80053ee <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80053de:	f107 030c 	add.w	r3, r7, #12
 80053e2:	2202      	movs	r2, #2
 80053e4:	4619      	mov	r1, r3
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f001 f9a5 	bl	8006736 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80053ec:	e02e      	b.n	800544c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80053ee:	6839      	ldr	r1, [r7, #0]
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f001 f936 	bl	8006662 <USBD_CtlError>
            ret = USBD_FAIL;
 80053f6:	2302      	movs	r3, #2
 80053f8:	75fb      	strb	r3, [r7, #23]
          break;
 80053fa:	e027      	b.n	800544c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005402:	2b03      	cmp	r3, #3
 8005404:	d107      	bne.n	8005416 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005406:	f107 030f 	add.w	r3, r7, #15
 800540a:	2201      	movs	r2, #1
 800540c:	4619      	mov	r1, r3
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f001 f991 	bl	8006736 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005414:	e01a      	b.n	800544c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005416:	6839      	ldr	r1, [r7, #0]
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f001 f922 	bl	8006662 <USBD_CtlError>
            ret = USBD_FAIL;
 800541e:	2302      	movs	r3, #2
 8005420:	75fb      	strb	r3, [r7, #23]
          break;
 8005422:	e013      	b.n	800544c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800542a:	2b03      	cmp	r3, #3
 800542c:	d00d      	beq.n	800544a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800542e:	6839      	ldr	r1, [r7, #0]
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f001 f916 	bl	8006662 <USBD_CtlError>
            ret = USBD_FAIL;
 8005436:	2302      	movs	r3, #2
 8005438:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800543a:	e006      	b.n	800544a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800543c:	6839      	ldr	r1, [r7, #0]
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f001 f90f 	bl	8006662 <USBD_CtlError>
          ret = USBD_FAIL;
 8005444:	2302      	movs	r3, #2
 8005446:	75fb      	strb	r3, [r7, #23]
          break;
 8005448:	e000      	b.n	800544c <USBD_CDC_Setup+0x12c>
          break;
 800544a:	bf00      	nop
      }
      break;
 800544c:	e006      	b.n	800545c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800544e:	6839      	ldr	r1, [r7, #0]
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f001 f906 	bl	8006662 <USBD_CtlError>
      ret = USBD_FAIL;
 8005456:	2302      	movs	r3, #2
 8005458:	75fb      	strb	r3, [r7, #23]
      break;
 800545a:	bf00      	nop
  }

  return ret;
 800545c:	7dfb      	ldrb	r3, [r7, #23]
}
 800545e:	4618      	mov	r0, r3
 8005460:	3718      	adds	r7, #24
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b084      	sub	sp, #16
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
 800546e:	460b      	mov	r3, r1
 8005470:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005478:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005480:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005488:	2b00      	cmp	r3, #0
 800548a:	d03a      	beq.n	8005502 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800548c:	78fa      	ldrb	r2, [r7, #3]
 800548e:	6879      	ldr	r1, [r7, #4]
 8005490:	4613      	mov	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	440b      	add	r3, r1
 800549a:	331c      	adds	r3, #28
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d029      	beq.n	80054f6 <USBD_CDC_DataIn+0x90>
 80054a2:	78fa      	ldrb	r2, [r7, #3]
 80054a4:	6879      	ldr	r1, [r7, #4]
 80054a6:	4613      	mov	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	440b      	add	r3, r1
 80054b0:	331c      	adds	r3, #28
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	78f9      	ldrb	r1, [r7, #3]
 80054b6:	68b8      	ldr	r0, [r7, #8]
 80054b8:	460b      	mov	r3, r1
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	440b      	add	r3, r1
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	4403      	add	r3, r0
 80054c2:	3338      	adds	r3, #56	; 0x38
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	fbb2 f1f3 	udiv	r1, r2, r3
 80054ca:	fb01 f303 	mul.w	r3, r1, r3
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d110      	bne.n	80054f6 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80054d4:	78fa      	ldrb	r2, [r7, #3]
 80054d6:	6879      	ldr	r1, [r7, #4]
 80054d8:	4613      	mov	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	331c      	adds	r3, #28
 80054e4:	2200      	movs	r2, #0
 80054e6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80054e8:	78f9      	ldrb	r1, [r7, #3]
 80054ea:	2300      	movs	r3, #0
 80054ec:	2200      	movs	r2, #0
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f001 fd77 	bl	8006fe2 <USBD_LL_Transmit>
 80054f4:	e003      	b.n	80054fe <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	e000      	b.n	8005504 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005502:	2302      	movs	r3, #2
  }
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	460b      	mov	r3, r1
 8005516:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800551e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005520:	78fb      	ldrb	r3, [r7, #3]
 8005522:	4619      	mov	r1, r3
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f001 fda2 	bl	800706e <USBD_LL_GetRxDataSize>
 800552a:	4602      	mov	r2, r0
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00d      	beq.n	8005558 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005550:	4611      	mov	r1, r2
 8005552:	4798      	blx	r3

    return USBD_OK;
 8005554:	2300      	movs	r3, #0
 8005556:	e000      	b.n	800555a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005558:	2302      	movs	r3, #2
  }
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b084      	sub	sp, #16
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005570:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005578:	2b00      	cmp	r3, #0
 800557a:	d015      	beq.n	80055a8 <USBD_CDC_EP0_RxReady+0x46>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005582:	2bff      	cmp	r3, #255	; 0xff
 8005584:	d010      	beq.n	80055a8 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005594:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800559c:	b292      	uxth	r2, r2
 800559e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	22ff      	movs	r2, #255	; 0xff
 80055a4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
	...

080055b4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2243      	movs	r2, #67	; 0x43
 80055c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80055c2:	4b03      	ldr	r3, [pc, #12]	; (80055d0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bc80      	pop	{r7}
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	20000094 	.word	0x20000094

080055d4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2243      	movs	r2, #67	; 0x43
 80055e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80055e2:	4b03      	ldr	r3, [pc, #12]	; (80055f0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bc80      	pop	{r7}
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	20000050 	.word	0x20000050

080055f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2243      	movs	r2, #67	; 0x43
 8005600:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005602:	4b03      	ldr	r3, [pc, #12]	; (8005610 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005604:	4618      	mov	r0, r3
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	bc80      	pop	{r7}
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	200000d8 	.word	0x200000d8

08005614 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	220a      	movs	r2, #10
 8005620:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005622:	4b03      	ldr	r3, [pc, #12]	; (8005630 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005624:	4618      	mov	r0, r3
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	bc80      	pop	{r7}
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	2000000c 	.word	0x2000000c

08005634 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800563e:	2302      	movs	r3, #2
 8005640:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d005      	beq.n	8005654 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005650:	2300      	movs	r3, #0
 8005652:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005654:	7bfb      	ldrb	r3, [r7, #15]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	bc80      	pop	{r7}
 800565e:	4770      	bx	lr

08005660 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	4613      	mov	r3, r2
 800566c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005674:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800567e:	88fa      	ldrh	r2, [r7, #6]
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	371c      	adds	r7, #28
 800568c:	46bd      	mov	sp, r7
 800568e:	bc80      	pop	{r7}
 8005690:	4770      	bx	lr

08005692 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005692:	b480      	push	{r7}
 8005694:	b085      	sub	sp, #20
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
 800569a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056a2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bc80      	pop	{r7}
 80056b6:	4770      	bx	lr

080056b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d017      	beq.n	8005702 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	7c1b      	ldrb	r3, [r3, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d109      	bne.n	80056ee <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056e4:	2101      	movs	r1, #1
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f001 fc9e 	bl	8007028 <USBD_LL_PrepareReceive>
 80056ec:	e007      	b.n	80056fe <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056f4:	2340      	movs	r3, #64	; 0x40
 80056f6:	2101      	movs	r1, #1
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f001 fc95 	bl	8007028 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80056fe:	2300      	movs	r3, #0
 8005700:	e000      	b.n	8005704 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005702:	2302      	movs	r3, #2
  }
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	4613      	mov	r3, r2
 8005718:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005720:	2302      	movs	r3, #2
 8005722:	e01a      	b.n	800575a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d003      	beq.n	8005744 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	79fa      	ldrb	r2, [r7, #7]
 8005750:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f001 fb02 	bl	8006d5c <USBD_LL_Init>

  return USBD_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005762:	b480      	push	{r7}
 8005764:	b085      	sub	sp, #20
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800576c:	2300      	movs	r3, #0
 800576e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d006      	beq.n	8005784 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800577e:	2300      	movs	r3, #0
 8005780:	73fb      	strb	r3, [r7, #15]
 8005782:	e001      	b.n	8005788 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005784:	2302      	movs	r3, #2
 8005786:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005788:	7bfb      	ldrb	r3, [r7, #15]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	bc80      	pop	{r7}
 8005792:	4770      	bx	lr

08005794 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f001 fb37 	bl	8006e10 <USBD_LL_Start>

  return USBD_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3708      	adds	r7, #8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bc80      	pop	{r7}
 80057be:	4770      	bx	lr

080057c0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	460b      	mov	r3, r1
 80057ca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80057cc:	2302      	movs	r3, #2
 80057ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00c      	beq.n	80057f4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	78fa      	ldrb	r2, [r7, #3]
 80057e4:	4611      	mov	r1, r2
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	4798      	blx	r3
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80057f0:	2300      	movs	r3, #0
 80057f2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80057f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b082      	sub	sp, #8
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
 8005806:	460b      	mov	r3, r1
 8005808:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	78fa      	ldrb	r2, [r7, #3]
 8005814:	4611      	mov	r1, r2
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	4798      	blx	r3

  return USBD_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005834:	6839      	ldr	r1, [r7, #0]
 8005836:	4618      	mov	r0, r3
 8005838:	f000 fed7 	bl	80065ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800584a:	461a      	mov	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005858:	f003 031f 	and.w	r3, r3, #31
 800585c:	2b02      	cmp	r3, #2
 800585e:	d016      	beq.n	800588e <USBD_LL_SetupStage+0x6a>
 8005860:	2b02      	cmp	r3, #2
 8005862:	d81c      	bhi.n	800589e <USBD_LL_SetupStage+0x7a>
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <USBD_LL_SetupStage+0x4a>
 8005868:	2b01      	cmp	r3, #1
 800586a:	d008      	beq.n	800587e <USBD_LL_SetupStage+0x5a>
 800586c:	e017      	b.n	800589e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005874:	4619      	mov	r1, r3
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f9ca 	bl	8005c10 <USBD_StdDevReq>
      break;
 800587c:	e01a      	b.n	80058b4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005884:	4619      	mov	r1, r3
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fa2c 	bl	8005ce4 <USBD_StdItfReq>
      break;
 800588c:	e012      	b.n	80058b4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005894:	4619      	mov	r1, r3
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fa6c 	bl	8005d74 <USBD_StdEPReq>
      break;
 800589c:	e00a      	b.n	80058b4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80058a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	4619      	mov	r1, r3
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f001 fb0f 	bl	8006ed0 <USBD_LL_StallEP>
      break;
 80058b2:	bf00      	nop
  }

  return USBD_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b086      	sub	sp, #24
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	60f8      	str	r0, [r7, #12]
 80058c6:	460b      	mov	r3, r1
 80058c8:	607a      	str	r2, [r7, #4]
 80058ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80058cc:	7afb      	ldrb	r3, [r7, #11]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d14b      	bne.n	800596a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80058d8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80058e0:	2b03      	cmp	r3, #3
 80058e2:	d134      	bne.n	800594e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	68da      	ldr	r2, [r3, #12]
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d919      	bls.n	8005924 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	68da      	ldr	r2, [r3, #12]
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	1ad2      	subs	r2, r2, r3
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	68da      	ldr	r2, [r3, #12]
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005906:	429a      	cmp	r2, r3
 8005908:	d203      	bcs.n	8005912 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800590e:	b29b      	uxth	r3, r3
 8005910:	e002      	b.n	8005918 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005916:	b29b      	uxth	r3, r3
 8005918:	461a      	mov	r2, r3
 800591a:	6879      	ldr	r1, [r7, #4]
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 ff56 	bl	80067ce <USBD_CtlContinueRx>
 8005922:	e038      	b.n	8005996 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00a      	beq.n	8005946 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005936:	2b03      	cmp	r3, #3
 8005938:	d105      	bne.n	8005946 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f000 ff53 	bl	80067f2 <USBD_CtlSendStatus>
 800594c:	e023      	b.n	8005996 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005954:	2b05      	cmp	r3, #5
 8005956:	d11e      	bne.n	8005996 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005960:	2100      	movs	r1, #0
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f001 fab4 	bl	8006ed0 <USBD_LL_StallEP>
 8005968:	e015      	b.n	8005996 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00d      	beq.n	8005992 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800597c:	2b03      	cmp	r3, #3
 800597e:	d108      	bne.n	8005992 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	7afa      	ldrb	r2, [r7, #11]
 800598a:	4611      	mov	r1, r2
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	4798      	blx	r3
 8005990:	e001      	b.n	8005996 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005992:	2302      	movs	r3, #2
 8005994:	e000      	b.n	8005998 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3718      	adds	r7, #24
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	460b      	mov	r3, r1
 80059aa:	607a      	str	r2, [r7, #4]
 80059ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80059ae:	7afb      	ldrb	r3, [r7, #11]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d17f      	bne.n	8005ab4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	3314      	adds	r3, #20
 80059b8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d15c      	bne.n	8005a7e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	68da      	ldr	r2, [r3, #12]
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d915      	bls.n	80059fc <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	68da      	ldr	r2, [r3, #12]
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	1ad2      	subs	r2, r2, r3
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	461a      	mov	r2, r3
 80059e6:	6879      	ldr	r1, [r7, #4]
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f000 fec0 	bl	800676e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80059ee:	2300      	movs	r3, #0
 80059f0:	2200      	movs	r2, #0
 80059f2:	2100      	movs	r1, #0
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f001 fb17 	bl	8007028 <USBD_LL_PrepareReceive>
 80059fa:	e04e      	b.n	8005a9a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	6912      	ldr	r2, [r2, #16]
 8005a04:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a08:	fb01 f202 	mul.w	r2, r1, r2
 8005a0c:	1a9b      	subs	r3, r3, r2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d11c      	bne.n	8005a4c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	689a      	ldr	r2, [r3, #8]
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d316      	bcc.n	8005a4c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	689a      	ldr	r2, [r3, #8]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d20f      	bcs.n	8005a4c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	2100      	movs	r1, #0
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 fe9c 	bl	800676e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005a3e:	2300      	movs	r3, #0
 8005a40:	2200      	movs	r2, #0
 8005a42:	2100      	movs	r1, #0
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f001 faef 	bl	8007028 <USBD_LL_PrepareReceive>
 8005a4a:	e026      	b.n	8005a9a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00a      	beq.n	8005a6e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005a5e:	2b03      	cmp	r3, #3
 8005a60:	d105      	bne.n	8005a6e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005a6e:	2180      	movs	r1, #128	; 0x80
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f001 fa2d 	bl	8006ed0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 fece 	bl	8006818 <USBD_CtlReceiveStatus>
 8005a7c:	e00d      	b.n	8005a9a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	d004      	beq.n	8005a92 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d103      	bne.n	8005a9a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005a92:	2180      	movs	r1, #128	; 0x80
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f001 fa1b 	bl	8006ed0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d11d      	bne.n	8005ae0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f7ff fe81 	bl	80057ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005ab2:	e015      	b.n	8005ae0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00d      	beq.n	8005adc <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005ac6:	2b03      	cmp	r3, #3
 8005ac8:	d108      	bne.n	8005adc <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	7afa      	ldrb	r2, [r7, #11]
 8005ad4:	4611      	mov	r1, r2
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	4798      	blx	r3
 8005ada:	e001      	b.n	8005ae0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005adc:	2302      	movs	r3, #2
 8005ade:	e000      	b.n	8005ae2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b082      	sub	sp, #8
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005af2:	2340      	movs	r3, #64	; 0x40
 8005af4:	2200      	movs	r2, #0
 8005af6:	2100      	movs	r1, #0
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f001 f9a4 	bl	8006e46 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2240      	movs	r2, #64	; 0x40
 8005b0a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b0e:	2340      	movs	r3, #64	; 0x40
 8005b10:	2200      	movs	r2, #0
 8005b12:	2180      	movs	r1, #128	; 0x80
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f001 f996 	bl	8006e46 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2240      	movs	r2, #64	; 0x40
 8005b24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d009      	beq.n	8005b62 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	6852      	ldr	r2, [r2, #4]
 8005b5a:	b2d2      	uxtb	r2, r2
 8005b5c:	4611      	mov	r1, r2
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	4798      	blx	r3
  }

  return USBD_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	460b      	mov	r3, r1
 8005b76:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	78fa      	ldrb	r2, [r7, #3]
 8005b7c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bc80      	pop	{r7}
 8005b88:	4770      	bx	lr

08005b8a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2204      	movs	r2, #4
 8005ba2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bc80      	pop	{r7}
 8005bb0:	4770      	bx	lr

08005bb2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bc0:	2b04      	cmp	r3, #4
 8005bc2:	d105      	bne.n	8005bd0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bc80      	pop	{r7}
 8005bda:	4770      	bx	lr

08005bdc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bea:	2b03      	cmp	r3, #3
 8005bec:	d10b      	bne.n	8005c06 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d005      	beq.n	8005c06 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c26:	2b40      	cmp	r3, #64	; 0x40
 8005c28:	d005      	beq.n	8005c36 <USBD_StdDevReq+0x26>
 8005c2a:	2b40      	cmp	r3, #64	; 0x40
 8005c2c:	d84f      	bhi.n	8005cce <USBD_StdDevReq+0xbe>
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d009      	beq.n	8005c46 <USBD_StdDevReq+0x36>
 8005c32:	2b20      	cmp	r3, #32
 8005c34:	d14b      	bne.n	8005cce <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	6839      	ldr	r1, [r7, #0]
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	4798      	blx	r3
      break;
 8005c44:	e048      	b.n	8005cd8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	785b      	ldrb	r3, [r3, #1]
 8005c4a:	2b09      	cmp	r3, #9
 8005c4c:	d839      	bhi.n	8005cc2 <USBD_StdDevReq+0xb2>
 8005c4e:	a201      	add	r2, pc, #4	; (adr r2, 8005c54 <USBD_StdDevReq+0x44>)
 8005c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c54:	08005ca5 	.word	0x08005ca5
 8005c58:	08005cb9 	.word	0x08005cb9
 8005c5c:	08005cc3 	.word	0x08005cc3
 8005c60:	08005caf 	.word	0x08005caf
 8005c64:	08005cc3 	.word	0x08005cc3
 8005c68:	08005c87 	.word	0x08005c87
 8005c6c:	08005c7d 	.word	0x08005c7d
 8005c70:	08005cc3 	.word	0x08005cc3
 8005c74:	08005c9b 	.word	0x08005c9b
 8005c78:	08005c91 	.word	0x08005c91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005c7c:	6839      	ldr	r1, [r7, #0]
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f9dc 	bl	800603c <USBD_GetDescriptor>
          break;
 8005c84:	e022      	b.n	8005ccc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005c86:	6839      	ldr	r1, [r7, #0]
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 fb3f 	bl	800630c <USBD_SetAddress>
          break;
 8005c8e:	e01d      	b.n	8005ccc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005c90:	6839      	ldr	r1, [r7, #0]
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fb7e 	bl	8006394 <USBD_SetConfig>
          break;
 8005c98:	e018      	b.n	8005ccc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005c9a:	6839      	ldr	r1, [r7, #0]
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fc07 	bl	80064b0 <USBD_GetConfig>
          break;
 8005ca2:	e013      	b.n	8005ccc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005ca4:	6839      	ldr	r1, [r7, #0]
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 fc37 	bl	800651a <USBD_GetStatus>
          break;
 8005cac:	e00e      	b.n	8005ccc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005cae:	6839      	ldr	r1, [r7, #0]
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 fc65 	bl	8006580 <USBD_SetFeature>
          break;
 8005cb6:	e009      	b.n	8005ccc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005cb8:	6839      	ldr	r1, [r7, #0]
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 fc74 	bl	80065a8 <USBD_ClrFeature>
          break;
 8005cc0:	e004      	b.n	8005ccc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005cc2:	6839      	ldr	r1, [r7, #0]
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 fccc 	bl	8006662 <USBD_CtlError>
          break;
 8005cca:	bf00      	nop
      }
      break;
 8005ccc:	e004      	b.n	8005cd8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005cce:	6839      	ldr	r1, [r7, #0]
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 fcc6 	bl	8006662 <USBD_CtlError>
      break;
 8005cd6:	bf00      	nop
  }

  return ret;
 8005cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop

08005ce4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005cfa:	2b40      	cmp	r3, #64	; 0x40
 8005cfc:	d005      	beq.n	8005d0a <USBD_StdItfReq+0x26>
 8005cfe:	2b40      	cmp	r3, #64	; 0x40
 8005d00:	d82e      	bhi.n	8005d60 <USBD_StdItfReq+0x7c>
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d001      	beq.n	8005d0a <USBD_StdItfReq+0x26>
 8005d06:	2b20      	cmp	r3, #32
 8005d08:	d12a      	bne.n	8005d60 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d10:	3b01      	subs	r3, #1
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d81d      	bhi.n	8005d52 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	889b      	ldrh	r3, [r3, #4]
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d813      	bhi.n	8005d48 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	6839      	ldr	r1, [r7, #0]
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	4798      	blx	r3
 8005d2e:	4603      	mov	r3, r0
 8005d30:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	88db      	ldrh	r3, [r3, #6]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d110      	bne.n	8005d5c <USBD_StdItfReq+0x78>
 8005d3a:	7bfb      	ldrb	r3, [r7, #15]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10d      	bne.n	8005d5c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 fd56 	bl	80067f2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005d46:	e009      	b.n	8005d5c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8005d48:	6839      	ldr	r1, [r7, #0]
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 fc89 	bl	8006662 <USBD_CtlError>
          break;
 8005d50:	e004      	b.n	8005d5c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8005d52:	6839      	ldr	r1, [r7, #0]
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 fc84 	bl	8006662 <USBD_CtlError>
          break;
 8005d5a:	e000      	b.n	8005d5e <USBD_StdItfReq+0x7a>
          break;
 8005d5c:	bf00      	nop
      }
      break;
 8005d5e:	e004      	b.n	8005d6a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8005d60:	6839      	ldr	r1, [r7, #0]
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fc7d 	bl	8006662 <USBD_CtlError>
      break;
 8005d68:	bf00      	nop
  }

  return USBD_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	889b      	ldrh	r3, [r3, #4]
 8005d86:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d90:	2b40      	cmp	r3, #64	; 0x40
 8005d92:	d007      	beq.n	8005da4 <USBD_StdEPReq+0x30>
 8005d94:	2b40      	cmp	r3, #64	; 0x40
 8005d96:	f200 8146 	bhi.w	8006026 <USBD_StdEPReq+0x2b2>
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00a      	beq.n	8005db4 <USBD_StdEPReq+0x40>
 8005d9e:	2b20      	cmp	r3, #32
 8005da0:	f040 8141 	bne.w	8006026 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	6839      	ldr	r1, [r7, #0]
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	4798      	blx	r3
      break;
 8005db2:	e13d      	b.n	8006030 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005dbc:	2b20      	cmp	r3, #32
 8005dbe:	d10a      	bne.n	8005dd6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	6839      	ldr	r1, [r7, #0]
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	4798      	blx	r3
 8005dce:	4603      	mov	r3, r0
 8005dd0:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005dd2:	7bfb      	ldrb	r3, [r7, #15]
 8005dd4:	e12d      	b.n	8006032 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	785b      	ldrb	r3, [r3, #1]
 8005dda:	2b03      	cmp	r3, #3
 8005ddc:	d007      	beq.n	8005dee <USBD_StdEPReq+0x7a>
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	f300 811b 	bgt.w	800601a <USBD_StdEPReq+0x2a6>
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d072      	beq.n	8005ece <USBD_StdEPReq+0x15a>
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d03a      	beq.n	8005e62 <USBD_StdEPReq+0xee>
 8005dec:	e115      	b.n	800601a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d002      	beq.n	8005dfe <USBD_StdEPReq+0x8a>
 8005df8:	2b03      	cmp	r3, #3
 8005dfa:	d015      	beq.n	8005e28 <USBD_StdEPReq+0xb4>
 8005dfc:	e02b      	b.n	8005e56 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005dfe:	7bbb      	ldrb	r3, [r7, #14]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00c      	beq.n	8005e1e <USBD_StdEPReq+0xaa>
 8005e04:	7bbb      	ldrb	r3, [r7, #14]
 8005e06:	2b80      	cmp	r3, #128	; 0x80
 8005e08:	d009      	beq.n	8005e1e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005e0a:	7bbb      	ldrb	r3, [r7, #14]
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f001 f85e 	bl	8006ed0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005e14:	2180      	movs	r1, #128	; 0x80
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f001 f85a 	bl	8006ed0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005e1c:	e020      	b.n	8005e60 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8005e1e:	6839      	ldr	r1, [r7, #0]
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 fc1e 	bl	8006662 <USBD_CtlError>
              break;
 8005e26:	e01b      	b.n	8005e60 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	885b      	ldrh	r3, [r3, #2]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10e      	bne.n	8005e4e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8005e30:	7bbb      	ldrb	r3, [r7, #14]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00b      	beq.n	8005e4e <USBD_StdEPReq+0xda>
 8005e36:	7bbb      	ldrb	r3, [r7, #14]
 8005e38:	2b80      	cmp	r3, #128	; 0x80
 8005e3a:	d008      	beq.n	8005e4e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	88db      	ldrh	r3, [r3, #6]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d104      	bne.n	8005e4e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005e44:	7bbb      	ldrb	r3, [r7, #14]
 8005e46:	4619      	mov	r1, r3
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f001 f841 	bl	8006ed0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fccf 	bl	80067f2 <USBD_CtlSendStatus>

              break;
 8005e54:	e004      	b.n	8005e60 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8005e56:	6839      	ldr	r1, [r7, #0]
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 fc02 	bl	8006662 <USBD_CtlError>
              break;
 8005e5e:	bf00      	nop
          }
          break;
 8005e60:	e0e0      	b.n	8006024 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d002      	beq.n	8005e72 <USBD_StdEPReq+0xfe>
 8005e6c:	2b03      	cmp	r3, #3
 8005e6e:	d015      	beq.n	8005e9c <USBD_StdEPReq+0x128>
 8005e70:	e026      	b.n	8005ec0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e72:	7bbb      	ldrb	r3, [r7, #14]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00c      	beq.n	8005e92 <USBD_StdEPReq+0x11e>
 8005e78:	7bbb      	ldrb	r3, [r7, #14]
 8005e7a:	2b80      	cmp	r3, #128	; 0x80
 8005e7c:	d009      	beq.n	8005e92 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005e7e:	7bbb      	ldrb	r3, [r7, #14]
 8005e80:	4619      	mov	r1, r3
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f001 f824 	bl	8006ed0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005e88:	2180      	movs	r1, #128	; 0x80
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f001 f820 	bl	8006ed0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005e90:	e01c      	b.n	8005ecc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8005e92:	6839      	ldr	r1, [r7, #0]
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fbe4 	bl	8006662 <USBD_CtlError>
              break;
 8005e9a:	e017      	b.n	8005ecc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	885b      	ldrh	r3, [r3, #2]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d112      	bne.n	8005eca <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005ea4:	7bbb      	ldrb	r3, [r7, #14]
 8005ea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d004      	beq.n	8005eb8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005eae:	7bbb      	ldrb	r3, [r7, #14]
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f001 f82b 	bl	8006f0e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 fc9a 	bl	80067f2 <USBD_CtlSendStatus>
              }
              break;
 8005ebe:	e004      	b.n	8005eca <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8005ec0:	6839      	ldr	r1, [r7, #0]
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fbcd 	bl	8006662 <USBD_CtlError>
              break;
 8005ec8:	e000      	b.n	8005ecc <USBD_StdEPReq+0x158>
              break;
 8005eca:	bf00      	nop
          }
          break;
 8005ecc:	e0aa      	b.n	8006024 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d002      	beq.n	8005ede <USBD_StdEPReq+0x16a>
 8005ed8:	2b03      	cmp	r3, #3
 8005eda:	d032      	beq.n	8005f42 <USBD_StdEPReq+0x1ce>
 8005edc:	e097      	b.n	800600e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ede:	7bbb      	ldrb	r3, [r7, #14]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d007      	beq.n	8005ef4 <USBD_StdEPReq+0x180>
 8005ee4:	7bbb      	ldrb	r3, [r7, #14]
 8005ee6:	2b80      	cmp	r3, #128	; 0x80
 8005ee8:	d004      	beq.n	8005ef4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8005eea:	6839      	ldr	r1, [r7, #0]
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 fbb8 	bl	8006662 <USBD_CtlError>
                break;
 8005ef2:	e091      	b.n	8006018 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ef4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	da0b      	bge.n	8005f14 <USBD_StdEPReq+0x1a0>
 8005efc:	7bbb      	ldrb	r3, [r7, #14]
 8005efe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f02:	4613      	mov	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	3310      	adds	r3, #16
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	4413      	add	r3, r2
 8005f10:	3304      	adds	r3, #4
 8005f12:	e00b      	b.n	8005f2c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005f14:	7bbb      	ldrb	r3, [r7, #14]
 8005f16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	4413      	add	r3, r2
 8005f2a:	3304      	adds	r3, #4
 8005f2c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2200      	movs	r2, #0
 8005f32:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	2202      	movs	r2, #2
 8005f38:	4619      	mov	r1, r3
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 fbfb 	bl	8006736 <USBD_CtlSendData>
              break;
 8005f40:	e06a      	b.n	8006018 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005f42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	da11      	bge.n	8005f6e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005f4a:	7bbb      	ldrb	r3, [r7, #14]
 8005f4c:	f003 020f 	and.w	r2, r3, #15
 8005f50:	6879      	ldr	r1, [r7, #4]
 8005f52:	4613      	mov	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	4413      	add	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	440b      	add	r3, r1
 8005f5c:	3318      	adds	r3, #24
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d117      	bne.n	8005f94 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005f64:	6839      	ldr	r1, [r7, #0]
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fb7b 	bl	8006662 <USBD_CtlError>
                  break;
 8005f6c:	e054      	b.n	8006018 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005f6e:	7bbb      	ldrb	r3, [r7, #14]
 8005f70:	f003 020f 	and.w	r2, r3, #15
 8005f74:	6879      	ldr	r1, [r7, #4]
 8005f76:	4613      	mov	r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4413      	add	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	440b      	add	r3, r1
 8005f80:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d104      	bne.n	8005f94 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005f8a:	6839      	ldr	r1, [r7, #0]
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 fb68 	bl	8006662 <USBD_CtlError>
                  break;
 8005f92:	e041      	b.n	8006018 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	da0b      	bge.n	8005fb4 <USBD_StdEPReq+0x240>
 8005f9c:	7bbb      	ldrb	r3, [r7, #14]
 8005f9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	4413      	add	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	3310      	adds	r3, #16
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	4413      	add	r3, r2
 8005fb0:	3304      	adds	r3, #4
 8005fb2:	e00b      	b.n	8005fcc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005fb4:	7bbb      	ldrb	r3, [r7, #14]
 8005fb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fba:	4613      	mov	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4413      	add	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	4413      	add	r3, r2
 8005fca:	3304      	adds	r3, #4
 8005fcc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005fce:	7bbb      	ldrb	r3, [r7, #14]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d002      	beq.n	8005fda <USBD_StdEPReq+0x266>
 8005fd4:	7bbb      	ldrb	r3, [r7, #14]
 8005fd6:	2b80      	cmp	r3, #128	; 0x80
 8005fd8:	d103      	bne.n	8005fe2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	601a      	str	r2, [r3, #0]
 8005fe0:	e00e      	b.n	8006000 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005fe2:	7bbb      	ldrb	r3, [r7, #14]
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 ffb0 	bl	8006f4c <USBD_LL_IsStallEP>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	601a      	str	r2, [r3, #0]
 8005ff8:	e002      	b.n	8006000 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	2202      	movs	r2, #2
 8006004:	4619      	mov	r1, r3
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fb95 	bl	8006736 <USBD_CtlSendData>
              break;
 800600c:	e004      	b.n	8006018 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800600e:	6839      	ldr	r1, [r7, #0]
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 fb26 	bl	8006662 <USBD_CtlError>
              break;
 8006016:	bf00      	nop
          }
          break;
 8006018:	e004      	b.n	8006024 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800601a:	6839      	ldr	r1, [r7, #0]
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 fb20 	bl	8006662 <USBD_CtlError>
          break;
 8006022:	bf00      	nop
      }
      break;
 8006024:	e004      	b.n	8006030 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006026:	6839      	ldr	r1, [r7, #0]
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fb1a 	bl	8006662 <USBD_CtlError>
      break;
 800602e:	bf00      	nop
  }

  return ret;
 8006030:	7bfb      	ldrb	r3, [r7, #15]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
	...

0800603c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006046:	2300      	movs	r3, #0
 8006048:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800604a:	2300      	movs	r3, #0
 800604c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800604e:	2300      	movs	r3, #0
 8006050:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	885b      	ldrh	r3, [r3, #2]
 8006056:	0a1b      	lsrs	r3, r3, #8
 8006058:	b29b      	uxth	r3, r3
 800605a:	3b01      	subs	r3, #1
 800605c:	2b06      	cmp	r3, #6
 800605e:	f200 8128 	bhi.w	80062b2 <USBD_GetDescriptor+0x276>
 8006062:	a201      	add	r2, pc, #4	; (adr r2, 8006068 <USBD_GetDescriptor+0x2c>)
 8006064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006068:	08006085 	.word	0x08006085
 800606c:	0800609d 	.word	0x0800609d
 8006070:	080060dd 	.word	0x080060dd
 8006074:	080062b3 	.word	0x080062b3
 8006078:	080062b3 	.word	0x080062b3
 800607c:	08006253 	.word	0x08006253
 8006080:	0800627f 	.word	0x0800627f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	7c12      	ldrb	r2, [r2, #16]
 8006090:	f107 0108 	add.w	r1, r7, #8
 8006094:	4610      	mov	r0, r2
 8006096:	4798      	blx	r3
 8006098:	60f8      	str	r0, [r7, #12]
      break;
 800609a:	e112      	b.n	80062c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	7c1b      	ldrb	r3, [r3, #16]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10d      	bne.n	80060c0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ac:	f107 0208 	add.w	r2, r7, #8
 80060b0:	4610      	mov	r0, r2
 80060b2:	4798      	blx	r3
 80060b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	3301      	adds	r3, #1
 80060ba:	2202      	movs	r2, #2
 80060bc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80060be:	e100      	b.n	80062c2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c8:	f107 0208 	add.w	r2, r7, #8
 80060cc:	4610      	mov	r0, r2
 80060ce:	4798      	blx	r3
 80060d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	3301      	adds	r3, #1
 80060d6:	2202      	movs	r2, #2
 80060d8:	701a      	strb	r2, [r3, #0]
      break;
 80060da:	e0f2      	b.n	80062c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	885b      	ldrh	r3, [r3, #2]
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b05      	cmp	r3, #5
 80060e4:	f200 80ac 	bhi.w	8006240 <USBD_GetDescriptor+0x204>
 80060e8:	a201      	add	r2, pc, #4	; (adr r2, 80060f0 <USBD_GetDescriptor+0xb4>)
 80060ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ee:	bf00      	nop
 80060f0:	08006109 	.word	0x08006109
 80060f4:	0800613d 	.word	0x0800613d
 80060f8:	08006171 	.word	0x08006171
 80060fc:	080061a5 	.word	0x080061a5
 8006100:	080061d9 	.word	0x080061d9
 8006104:	0800620d 	.word	0x0800620d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00b      	beq.n	800612c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	7c12      	ldrb	r2, [r2, #16]
 8006120:	f107 0108 	add.w	r1, r7, #8
 8006124:	4610      	mov	r0, r2
 8006126:	4798      	blx	r3
 8006128:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800612a:	e091      	b.n	8006250 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800612c:	6839      	ldr	r1, [r7, #0]
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 fa97 	bl	8006662 <USBD_CtlError>
            err++;
 8006134:	7afb      	ldrb	r3, [r7, #11]
 8006136:	3301      	adds	r3, #1
 8006138:	72fb      	strb	r3, [r7, #11]
          break;
 800613a:	e089      	b.n	8006250 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00b      	beq.n	8006160 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	7c12      	ldrb	r2, [r2, #16]
 8006154:	f107 0108 	add.w	r1, r7, #8
 8006158:	4610      	mov	r0, r2
 800615a:	4798      	blx	r3
 800615c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800615e:	e077      	b.n	8006250 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006160:	6839      	ldr	r1, [r7, #0]
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 fa7d 	bl	8006662 <USBD_CtlError>
            err++;
 8006168:	7afb      	ldrb	r3, [r7, #11]
 800616a:	3301      	adds	r3, #1
 800616c:	72fb      	strb	r3, [r7, #11]
          break;
 800616e:	e06f      	b.n	8006250 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00b      	beq.n	8006194 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	7c12      	ldrb	r2, [r2, #16]
 8006188:	f107 0108 	add.w	r1, r7, #8
 800618c:	4610      	mov	r0, r2
 800618e:	4798      	blx	r3
 8006190:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006192:	e05d      	b.n	8006250 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006194:	6839      	ldr	r1, [r7, #0]
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fa63 	bl	8006662 <USBD_CtlError>
            err++;
 800619c:	7afb      	ldrb	r3, [r7, #11]
 800619e:	3301      	adds	r3, #1
 80061a0:	72fb      	strb	r3, [r7, #11]
          break;
 80061a2:	e055      	b.n	8006250 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00b      	beq.n	80061c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	7c12      	ldrb	r2, [r2, #16]
 80061bc:	f107 0108 	add.w	r1, r7, #8
 80061c0:	4610      	mov	r0, r2
 80061c2:	4798      	blx	r3
 80061c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061c6:	e043      	b.n	8006250 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061c8:	6839      	ldr	r1, [r7, #0]
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 fa49 	bl	8006662 <USBD_CtlError>
            err++;
 80061d0:	7afb      	ldrb	r3, [r7, #11]
 80061d2:	3301      	adds	r3, #1
 80061d4:	72fb      	strb	r3, [r7, #11]
          break;
 80061d6:	e03b      	b.n	8006250 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00b      	beq.n	80061fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	7c12      	ldrb	r2, [r2, #16]
 80061f0:	f107 0108 	add.w	r1, r7, #8
 80061f4:	4610      	mov	r0, r2
 80061f6:	4798      	blx	r3
 80061f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061fa:	e029      	b.n	8006250 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061fc:	6839      	ldr	r1, [r7, #0]
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 fa2f 	bl	8006662 <USBD_CtlError>
            err++;
 8006204:	7afb      	ldrb	r3, [r7, #11]
 8006206:	3301      	adds	r3, #1
 8006208:	72fb      	strb	r3, [r7, #11]
          break;
 800620a:	e021      	b.n	8006250 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00b      	beq.n	8006230 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	7c12      	ldrb	r2, [r2, #16]
 8006224:	f107 0108 	add.w	r1, r7, #8
 8006228:	4610      	mov	r0, r2
 800622a:	4798      	blx	r3
 800622c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800622e:	e00f      	b.n	8006250 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006230:	6839      	ldr	r1, [r7, #0]
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fa15 	bl	8006662 <USBD_CtlError>
            err++;
 8006238:	7afb      	ldrb	r3, [r7, #11]
 800623a:	3301      	adds	r3, #1
 800623c:	72fb      	strb	r3, [r7, #11]
          break;
 800623e:	e007      	b.n	8006250 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006240:	6839      	ldr	r1, [r7, #0]
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 fa0d 	bl	8006662 <USBD_CtlError>
          err++;
 8006248:	7afb      	ldrb	r3, [r7, #11]
 800624a:	3301      	adds	r3, #1
 800624c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800624e:	e038      	b.n	80062c2 <USBD_GetDescriptor+0x286>
 8006250:	e037      	b.n	80062c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	7c1b      	ldrb	r3, [r3, #16]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d109      	bne.n	800626e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006262:	f107 0208 	add.w	r2, r7, #8
 8006266:	4610      	mov	r0, r2
 8006268:	4798      	blx	r3
 800626a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800626c:	e029      	b.n	80062c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800626e:	6839      	ldr	r1, [r7, #0]
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f9f6 	bl	8006662 <USBD_CtlError>
        err++;
 8006276:	7afb      	ldrb	r3, [r7, #11]
 8006278:	3301      	adds	r3, #1
 800627a:	72fb      	strb	r3, [r7, #11]
      break;
 800627c:	e021      	b.n	80062c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	7c1b      	ldrb	r3, [r3, #16]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10d      	bne.n	80062a2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800628c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628e:	f107 0208 	add.w	r2, r7, #8
 8006292:	4610      	mov	r0, r2
 8006294:	4798      	blx	r3
 8006296:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	3301      	adds	r3, #1
 800629c:	2207      	movs	r2, #7
 800629e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80062a0:	e00f      	b.n	80062c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80062a2:	6839      	ldr	r1, [r7, #0]
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f9dc 	bl	8006662 <USBD_CtlError>
        err++;
 80062aa:	7afb      	ldrb	r3, [r7, #11]
 80062ac:	3301      	adds	r3, #1
 80062ae:	72fb      	strb	r3, [r7, #11]
      break;
 80062b0:	e007      	b.n	80062c2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80062b2:	6839      	ldr	r1, [r7, #0]
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f9d4 	bl	8006662 <USBD_CtlError>
      err++;
 80062ba:	7afb      	ldrb	r3, [r7, #11]
 80062bc:	3301      	adds	r3, #1
 80062be:	72fb      	strb	r3, [r7, #11]
      break;
 80062c0:	bf00      	nop
  }

  if (err != 0U)
 80062c2:	7afb      	ldrb	r3, [r7, #11]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d11c      	bne.n	8006302 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80062c8:	893b      	ldrh	r3, [r7, #8]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d011      	beq.n	80062f2 <USBD_GetDescriptor+0x2b6>
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	88db      	ldrh	r3, [r3, #6]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00d      	beq.n	80062f2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	88da      	ldrh	r2, [r3, #6]
 80062da:	893b      	ldrh	r3, [r7, #8]
 80062dc:	4293      	cmp	r3, r2
 80062de:	bf28      	it	cs
 80062e0:	4613      	movcs	r3, r2
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80062e6:	893b      	ldrh	r3, [r7, #8]
 80062e8:	461a      	mov	r2, r3
 80062ea:	68f9      	ldr	r1, [r7, #12]
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 fa22 	bl	8006736 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	88db      	ldrh	r3, [r3, #6]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d104      	bne.n	8006304 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fa79 	bl	80067f2 <USBD_CtlSendStatus>
 8006300:	e000      	b.n	8006304 <USBD_GetDescriptor+0x2c8>
    return;
 8006302:	bf00      	nop
    }
  }
}
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop

0800630c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	889b      	ldrh	r3, [r3, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d130      	bne.n	8006380 <USBD_SetAddress+0x74>
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	88db      	ldrh	r3, [r3, #6]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d12c      	bne.n	8006380 <USBD_SetAddress+0x74>
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	885b      	ldrh	r3, [r3, #2]
 800632a:	2b7f      	cmp	r3, #127	; 0x7f
 800632c:	d828      	bhi.n	8006380 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	885b      	ldrh	r3, [r3, #2]
 8006332:	b2db      	uxtb	r3, r3
 8006334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006338:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006340:	2b03      	cmp	r3, #3
 8006342:	d104      	bne.n	800634e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006344:	6839      	ldr	r1, [r7, #0]
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f98b 	bl	8006662 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800634c:	e01d      	b.n	800638a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	7bfa      	ldrb	r2, [r7, #15]
 8006352:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006356:	7bfb      	ldrb	r3, [r7, #15]
 8006358:	4619      	mov	r1, r3
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fe22 	bl	8006fa4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fa46 	bl	80067f2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006366:	7bfb      	ldrb	r3, [r7, #15]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d004      	beq.n	8006376 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2202      	movs	r2, #2
 8006370:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006374:	e009      	b.n	800638a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800637e:	e004      	b.n	800638a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006380:	6839      	ldr	r1, [r7, #0]
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f96d 	bl	8006662 <USBD_CtlError>
  }
}
 8006388:	bf00      	nop
 800638a:	bf00      	nop
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
	...

08006394 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	885b      	ldrh	r3, [r3, #2]
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	4b41      	ldr	r3, [pc, #260]	; (80064ac <USBD_SetConfig+0x118>)
 80063a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80063a8:	4b40      	ldr	r3, [pc, #256]	; (80064ac <USBD_SetConfig+0x118>)
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d904      	bls.n	80063ba <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80063b0:	6839      	ldr	r1, [r7, #0]
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f955 	bl	8006662 <USBD_CtlError>
 80063b8:	e075      	b.n	80064a6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d002      	beq.n	80063ca <USBD_SetConfig+0x36>
 80063c4:	2b03      	cmp	r3, #3
 80063c6:	d023      	beq.n	8006410 <USBD_SetConfig+0x7c>
 80063c8:	e062      	b.n	8006490 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80063ca:	4b38      	ldr	r3, [pc, #224]	; (80064ac <USBD_SetConfig+0x118>)
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d01a      	beq.n	8006408 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80063d2:	4b36      	ldr	r3, [pc, #216]	; (80064ac <USBD_SetConfig+0x118>)
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	461a      	mov	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2203      	movs	r2, #3
 80063e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80063e4:	4b31      	ldr	r3, [pc, #196]	; (80064ac <USBD_SetConfig+0x118>)
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	4619      	mov	r1, r3
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f7ff f9e8 	bl	80057c0 <USBD_SetClassConfig>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d104      	bne.n	8006400 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80063f6:	6839      	ldr	r1, [r7, #0]
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 f932 	bl	8006662 <USBD_CtlError>
            return;
 80063fe:	e052      	b.n	80064a6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f9f6 	bl	80067f2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006406:	e04e      	b.n	80064a6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 f9f2 	bl	80067f2 <USBD_CtlSendStatus>
        break;
 800640e:	e04a      	b.n	80064a6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006410:	4b26      	ldr	r3, [pc, #152]	; (80064ac <USBD_SetConfig+0x118>)
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d112      	bne.n	800643e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2202      	movs	r2, #2
 800641c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006420:	4b22      	ldr	r3, [pc, #136]	; (80064ac <USBD_SetConfig+0x118>)
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	461a      	mov	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800642a:	4b20      	ldr	r3, [pc, #128]	; (80064ac <USBD_SetConfig+0x118>)
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	4619      	mov	r1, r3
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f7ff f9e4 	bl	80057fe <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f9db 	bl	80067f2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800643c:	e033      	b.n	80064a6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800643e:	4b1b      	ldr	r3, [pc, #108]	; (80064ac <USBD_SetConfig+0x118>)
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	461a      	mov	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	429a      	cmp	r2, r3
 800644a:	d01d      	beq.n	8006488 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	b2db      	uxtb	r3, r3
 8006452:	4619      	mov	r1, r3
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f7ff f9d2 	bl	80057fe <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800645a:	4b14      	ldr	r3, [pc, #80]	; (80064ac <USBD_SetConfig+0x118>)
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	461a      	mov	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006464:	4b11      	ldr	r3, [pc, #68]	; (80064ac <USBD_SetConfig+0x118>)
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	4619      	mov	r1, r3
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7ff f9a8 	bl	80057c0 <USBD_SetClassConfig>
 8006470:	4603      	mov	r3, r0
 8006472:	2b02      	cmp	r3, #2
 8006474:	d104      	bne.n	8006480 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006476:	6839      	ldr	r1, [r7, #0]
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 f8f2 	bl	8006662 <USBD_CtlError>
            return;
 800647e:	e012      	b.n	80064a6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 f9b6 	bl	80067f2 <USBD_CtlSendStatus>
        break;
 8006486:	e00e      	b.n	80064a6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 f9b2 	bl	80067f2 <USBD_CtlSendStatus>
        break;
 800648e:	e00a      	b.n	80064a6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006490:	6839      	ldr	r1, [r7, #0]
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f8e5 	bl	8006662 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006498:	4b04      	ldr	r3, [pc, #16]	; (80064ac <USBD_SetConfig+0x118>)
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	4619      	mov	r1, r3
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f7ff f9ad 	bl	80057fe <USBD_ClrClassConfig>
        break;
 80064a4:	bf00      	nop
    }
  }
}
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	2000019c 	.word	0x2000019c

080064b0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	88db      	ldrh	r3, [r3, #6]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d004      	beq.n	80064cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80064c2:	6839      	ldr	r1, [r7, #0]
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 f8cc 	bl	8006662 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80064ca:	e022      	b.n	8006512 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	dc02      	bgt.n	80064dc <USBD_GetConfig+0x2c>
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	dc03      	bgt.n	80064e2 <USBD_GetConfig+0x32>
 80064da:	e015      	b.n	8006508 <USBD_GetConfig+0x58>
 80064dc:	2b03      	cmp	r3, #3
 80064de:	d00b      	beq.n	80064f8 <USBD_GetConfig+0x48>
 80064e0:	e012      	b.n	8006508 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	3308      	adds	r3, #8
 80064ec:	2201      	movs	r2, #1
 80064ee:	4619      	mov	r1, r3
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f920 	bl	8006736 <USBD_CtlSendData>
        break;
 80064f6:	e00c      	b.n	8006512 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	3304      	adds	r3, #4
 80064fc:	2201      	movs	r2, #1
 80064fe:	4619      	mov	r1, r3
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 f918 	bl	8006736 <USBD_CtlSendData>
        break;
 8006506:	e004      	b.n	8006512 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006508:	6839      	ldr	r1, [r7, #0]
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f8a9 	bl	8006662 <USBD_CtlError>
        break;
 8006510:	bf00      	nop
}
 8006512:	bf00      	nop
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b082      	sub	sp, #8
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
 8006522:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800652a:	3b01      	subs	r3, #1
 800652c:	2b02      	cmp	r3, #2
 800652e:	d81e      	bhi.n	800656e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	88db      	ldrh	r3, [r3, #6]
 8006534:	2b02      	cmp	r3, #2
 8006536:	d004      	beq.n	8006542 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006538:	6839      	ldr	r1, [r7, #0]
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f891 	bl	8006662 <USBD_CtlError>
        break;
 8006540:	e01a      	b.n	8006578 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2201      	movs	r2, #1
 8006546:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800654e:	2b00      	cmp	r3, #0
 8006550:	d005      	beq.n	800655e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	f043 0202 	orr.w	r2, r3, #2
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	330c      	adds	r3, #12
 8006562:	2202      	movs	r2, #2
 8006564:	4619      	mov	r1, r3
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f8e5 	bl	8006736 <USBD_CtlSendData>
      break;
 800656c:	e004      	b.n	8006578 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800656e:	6839      	ldr	r1, [r7, #0]
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 f876 	bl	8006662 <USBD_CtlError>
      break;
 8006576:	bf00      	nop
  }
}
 8006578:	bf00      	nop
 800657a:	3708      	adds	r7, #8
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	885b      	ldrh	r3, [r3, #2]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d106      	bne.n	80065a0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f929 	bl	80067f2 <USBD_CtlSendStatus>
  }
}
 80065a0:	bf00      	nop
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065b8:	3b01      	subs	r3, #1
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d80b      	bhi.n	80065d6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	885b      	ldrh	r3, [r3, #2]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d10c      	bne.n	80065e0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f90f 	bl	80067f2 <USBD_CtlSendStatus>
      }
      break;
 80065d4:	e004      	b.n	80065e0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f842 	bl	8006662 <USBD_CtlError>
      break;
 80065de:	e000      	b.n	80065e2 <USBD_ClrFeature+0x3a>
      break;
 80065e0:	bf00      	nop
  }
}
 80065e2:	bf00      	nop
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80065ea:	b480      	push	{r7}
 80065ec:	b083      	sub	sp, #12
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	781a      	ldrb	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	785a      	ldrb	r2, [r3, #1]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	3302      	adds	r3, #2
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	b29a      	uxth	r2, r3
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	3303      	adds	r3, #3
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	b29b      	uxth	r3, r3
 8006614:	021b      	lsls	r3, r3, #8
 8006616:	b29b      	uxth	r3, r3
 8006618:	4413      	add	r3, r2
 800661a:	b29a      	uxth	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	3304      	adds	r3, #4
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	b29a      	uxth	r2, r3
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	3305      	adds	r3, #5
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	b29b      	uxth	r3, r3
 8006630:	021b      	lsls	r3, r3, #8
 8006632:	b29b      	uxth	r3, r3
 8006634:	4413      	add	r3, r2
 8006636:	b29a      	uxth	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	3306      	adds	r3, #6
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	b29a      	uxth	r2, r3
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	3307      	adds	r3, #7
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	b29b      	uxth	r3, r3
 800664c:	021b      	lsls	r3, r3, #8
 800664e:	b29b      	uxth	r3, r3
 8006650:	4413      	add	r3, r2
 8006652:	b29a      	uxth	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	80da      	strh	r2, [r3, #6]

}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	bc80      	pop	{r7}
 8006660:	4770      	bx	lr

08006662 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b082      	sub	sp, #8
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
 800666a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800666c:	2180      	movs	r1, #128	; 0x80
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 fc2e 	bl	8006ed0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006674:	2100      	movs	r1, #0
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fc2a 	bl	8006ed0 <USBD_LL_StallEP>
}
 800667c:	bf00      	nop
 800667e:	3708      	adds	r7, #8
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b086      	sub	sp, #24
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006690:	2300      	movs	r3, #0
 8006692:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d032      	beq.n	8006700 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f000 f834 	bl	8006708 <USBD_GetLen>
 80066a0:	4603      	mov	r3, r0
 80066a2:	3301      	adds	r3, #1
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	005b      	lsls	r3, r3, #1
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80066ae:	7dfb      	ldrb	r3, [r7, #23]
 80066b0:	1c5a      	adds	r2, r3, #1
 80066b2:	75fa      	strb	r2, [r7, #23]
 80066b4:	461a      	mov	r2, r3
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	4413      	add	r3, r2
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	7812      	ldrb	r2, [r2, #0]
 80066be:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80066c0:	7dfb      	ldrb	r3, [r7, #23]
 80066c2:	1c5a      	adds	r2, r3, #1
 80066c4:	75fa      	strb	r2, [r7, #23]
 80066c6:	461a      	mov	r2, r3
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	4413      	add	r3, r2
 80066cc:	2203      	movs	r2, #3
 80066ce:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80066d0:	e012      	b.n	80066f8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	1c5a      	adds	r2, r3, #1
 80066d6:	60fa      	str	r2, [r7, #12]
 80066d8:	7dfa      	ldrb	r2, [r7, #23]
 80066da:	1c51      	adds	r1, r2, #1
 80066dc:	75f9      	strb	r1, [r7, #23]
 80066de:	4611      	mov	r1, r2
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	440a      	add	r2, r1
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80066e8:	7dfb      	ldrb	r3, [r7, #23]
 80066ea:	1c5a      	adds	r2, r3, #1
 80066ec:	75fa      	strb	r2, [r7, #23]
 80066ee:	461a      	mov	r2, r3
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	4413      	add	r3, r2
 80066f4:	2200      	movs	r2, #0
 80066f6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1e8      	bne.n	80066d2 <USBD_GetString+0x4e>
    }
  }
}
 8006700:	bf00      	nop
 8006702:	3718      	adds	r7, #24
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006714:	e005      	b.n	8006722 <USBD_GetLen+0x1a>
  {
    len++;
 8006716:	7bfb      	ldrb	r3, [r7, #15]
 8006718:	3301      	adds	r3, #1
 800671a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	3301      	adds	r3, #1
 8006720:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1f5      	bne.n	8006716 <USBD_GetLen+0xe>
  }

  return len;
 800672a:	7bfb      	ldrb	r3, [r7, #15]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	bc80      	pop	{r7}
 8006734:	4770      	bx	lr

08006736 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b084      	sub	sp, #16
 800673a:	af00      	add	r7, sp, #0
 800673c:	60f8      	str	r0, [r7, #12]
 800673e:	60b9      	str	r1, [r7, #8]
 8006740:	4613      	mov	r3, r2
 8006742:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2202      	movs	r2, #2
 8006748:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800674c:	88fa      	ldrh	r2, [r7, #6]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006752:	88fa      	ldrh	r2, [r7, #6]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006758:	88fb      	ldrh	r3, [r7, #6]
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	2100      	movs	r1, #0
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f000 fc3f 	bl	8006fe2 <USBD_LL_Transmit>

  return USBD_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b084      	sub	sp, #16
 8006772:	af00      	add	r7, sp, #0
 8006774:	60f8      	str	r0, [r7, #12]
 8006776:	60b9      	str	r1, [r7, #8]
 8006778:	4613      	mov	r3, r2
 800677a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800677c:	88fb      	ldrh	r3, [r7, #6]
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	2100      	movs	r1, #0
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f000 fc2d 	bl	8006fe2 <USBD_LL_Transmit>

  return USBD_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b084      	sub	sp, #16
 8006796:	af00      	add	r7, sp, #0
 8006798:	60f8      	str	r0, [r7, #12]
 800679a:	60b9      	str	r1, [r7, #8]
 800679c:	4613      	mov	r3, r2
 800679e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2203      	movs	r2, #3
 80067a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80067a8:	88fa      	ldrh	r2, [r7, #6]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80067b0:	88fa      	ldrh	r2, [r7, #6]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80067b8:	88fb      	ldrh	r3, [r7, #6]
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	2100      	movs	r1, #0
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f000 fc32 	bl	8007028 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3710      	adds	r7, #16
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b084      	sub	sp, #16
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	60f8      	str	r0, [r7, #12]
 80067d6:	60b9      	str	r1, [r7, #8]
 80067d8:	4613      	mov	r3, r2
 80067da:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80067dc:	88fb      	ldrh	r3, [r7, #6]
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	2100      	movs	r1, #0
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f000 fc20 	bl	8007028 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b082      	sub	sp, #8
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2204      	movs	r2, #4
 80067fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006802:	2300      	movs	r3, #0
 8006804:	2200      	movs	r2, #0
 8006806:	2100      	movs	r1, #0
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 fbea 	bl	8006fe2 <USBD_LL_Transmit>

  return USBD_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2205      	movs	r2, #5
 8006824:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006828:	2300      	movs	r3, #0
 800682a:	2200      	movs	r2, #0
 800682c:	2100      	movs	r1, #0
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fbfa 	bl	8007028 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
	...

08006840 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006844:	2200      	movs	r2, #0
 8006846:	4912      	ldr	r1, [pc, #72]	; (8006890 <MX_USB_DEVICE_Init+0x50>)
 8006848:	4812      	ldr	r0, [pc, #72]	; (8006894 <MX_USB_DEVICE_Init+0x54>)
 800684a:	f7fe ff5f 	bl	800570c <USBD_Init>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d001      	beq.n	8006858 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006854:	f7f9 fd10 	bl	8000278 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006858:	490f      	ldr	r1, [pc, #60]	; (8006898 <MX_USB_DEVICE_Init+0x58>)
 800685a:	480e      	ldr	r0, [pc, #56]	; (8006894 <MX_USB_DEVICE_Init+0x54>)
 800685c:	f7fe ff81 	bl	8005762 <USBD_RegisterClass>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d001      	beq.n	800686a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006866:	f7f9 fd07 	bl	8000278 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800686a:	490c      	ldr	r1, [pc, #48]	; (800689c <MX_USB_DEVICE_Init+0x5c>)
 800686c:	4809      	ldr	r0, [pc, #36]	; (8006894 <MX_USB_DEVICE_Init+0x54>)
 800686e:	f7fe fee1 	bl	8005634 <USBD_CDC_RegisterInterface>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d001      	beq.n	800687c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006878:	f7f9 fcfe 	bl	8000278 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800687c:	4805      	ldr	r0, [pc, #20]	; (8006894 <MX_USB_DEVICE_Init+0x54>)
 800687e:	f7fe ff89 	bl	8005794 <USBD_Start>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d001      	beq.n	800688c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006888:	f7f9 fcf6 	bl	8000278 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800688c:	bf00      	nop
 800688e:	bd80      	pop	{r7, pc}
 8006890:	2000012c 	.word	0x2000012c
 8006894:	200001a0 	.word	0x200001a0
 8006898:	20000018 	.word	0x20000018
 800689c:	2000011c 	.word	0x2000011c

080068a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80068a4:	2200      	movs	r2, #0
 80068a6:	4905      	ldr	r1, [pc, #20]	; (80068bc <CDC_Init_FS+0x1c>)
 80068a8:	4805      	ldr	r0, [pc, #20]	; (80068c0 <CDC_Init_FS+0x20>)
 80068aa:	f7fe fed9 	bl	8005660 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80068ae:	4905      	ldr	r1, [pc, #20]	; (80068c4 <CDC_Init_FS+0x24>)
 80068b0:	4803      	ldr	r0, [pc, #12]	; (80068c0 <CDC_Init_FS+0x20>)
 80068b2:	f7fe feee 	bl	8005692 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80068b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	20000864 	.word	0x20000864
 80068c0:	200001a0 	.word	0x200001a0
 80068c4:	20000464 	.word	0x20000464

080068c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80068c8:	b480      	push	{r7}
 80068ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80068cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bc80      	pop	{r7}
 80068d4:	4770      	bx	lr
	...

080068d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	4603      	mov	r3, r0
 80068e0:	6039      	str	r1, [r7, #0]
 80068e2:	71fb      	strb	r3, [r7, #7]
 80068e4:	4613      	mov	r3, r2
 80068e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80068e8:	79fb      	ldrb	r3, [r7, #7]
 80068ea:	2b23      	cmp	r3, #35	; 0x23
 80068ec:	d84a      	bhi.n	8006984 <CDC_Control_FS+0xac>
 80068ee:	a201      	add	r2, pc, #4	; (adr r2, 80068f4 <CDC_Control_FS+0x1c>)
 80068f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f4:	08006985 	.word	0x08006985
 80068f8:	08006985 	.word	0x08006985
 80068fc:	08006985 	.word	0x08006985
 8006900:	08006985 	.word	0x08006985
 8006904:	08006985 	.word	0x08006985
 8006908:	08006985 	.word	0x08006985
 800690c:	08006985 	.word	0x08006985
 8006910:	08006985 	.word	0x08006985
 8006914:	08006985 	.word	0x08006985
 8006918:	08006985 	.word	0x08006985
 800691c:	08006985 	.word	0x08006985
 8006920:	08006985 	.word	0x08006985
 8006924:	08006985 	.word	0x08006985
 8006928:	08006985 	.word	0x08006985
 800692c:	08006985 	.word	0x08006985
 8006930:	08006985 	.word	0x08006985
 8006934:	08006985 	.word	0x08006985
 8006938:	08006985 	.word	0x08006985
 800693c:	08006985 	.word	0x08006985
 8006940:	08006985 	.word	0x08006985
 8006944:	08006985 	.word	0x08006985
 8006948:	08006985 	.word	0x08006985
 800694c:	08006985 	.word	0x08006985
 8006950:	08006985 	.word	0x08006985
 8006954:	08006985 	.word	0x08006985
 8006958:	08006985 	.word	0x08006985
 800695c:	08006985 	.word	0x08006985
 8006960:	08006985 	.word	0x08006985
 8006964:	08006985 	.word	0x08006985
 8006968:	08006985 	.word	0x08006985
 800696c:	08006985 	.word	0x08006985
 8006970:	08006985 	.word	0x08006985
 8006974:	08006985 	.word	0x08006985
 8006978:	08006985 	.word	0x08006985
 800697c:	08006985 	.word	0x08006985
 8006980:	08006985 	.word	0x08006985
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006984:	bf00      	nop
  }

  return (USBD_OK);
 8006986:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006988:	4618      	mov	r0, r3
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	bc80      	pop	{r7}
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop

08006994 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800699e:	6879      	ldr	r1, [r7, #4]
 80069a0:	4805      	ldr	r0, [pc, #20]	; (80069b8 <CDC_Receive_FS+0x24>)
 80069a2:	f7fe fe76 	bl	8005692 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80069a6:	4804      	ldr	r0, [pc, #16]	; (80069b8 <CDC_Receive_FS+0x24>)
 80069a8:	f7fe fe86 	bl	80056b8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80069ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3708      	adds	r7, #8
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	200001a0 	.word	0x200001a0

080069bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	4603      	mov	r3, r0
 80069c4:	6039      	str	r1, [r7, #0]
 80069c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	2212      	movs	r2, #18
 80069cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80069ce:	4b03      	ldr	r3, [pc, #12]	; (80069dc <USBD_FS_DeviceDescriptor+0x20>)
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bc80      	pop	{r7}
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	20000148 	.word	0x20000148

080069e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	4603      	mov	r3, r0
 80069e8:	6039      	str	r1, [r7, #0]
 80069ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	2204      	movs	r2, #4
 80069f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80069f2:	4b03      	ldr	r3, [pc, #12]	; (8006a00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bc80      	pop	{r7}
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	2000015c 	.word	0x2000015c

08006a04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	6039      	str	r1, [r7, #0]
 8006a0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006a10:	79fb      	ldrb	r3, [r7, #7]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d105      	bne.n	8006a22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006a16:	683a      	ldr	r2, [r7, #0]
 8006a18:	4907      	ldr	r1, [pc, #28]	; (8006a38 <USBD_FS_ProductStrDescriptor+0x34>)
 8006a1a:	4808      	ldr	r0, [pc, #32]	; (8006a3c <USBD_FS_ProductStrDescriptor+0x38>)
 8006a1c:	f7ff fe32 	bl	8006684 <USBD_GetString>
 8006a20:	e004      	b.n	8006a2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	4904      	ldr	r1, [pc, #16]	; (8006a38 <USBD_FS_ProductStrDescriptor+0x34>)
 8006a26:	4805      	ldr	r0, [pc, #20]	; (8006a3c <USBD_FS_ProductStrDescriptor+0x38>)
 8006a28:	f7ff fe2c 	bl	8006684 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006a2c:	4b02      	ldr	r3, [pc, #8]	; (8006a38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	20000c64 	.word	0x20000c64
 8006a3c:	0800719c 	.word	0x0800719c

08006a40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	4603      	mov	r3, r0
 8006a48:	6039      	str	r1, [r7, #0]
 8006a4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006a4c:	683a      	ldr	r2, [r7, #0]
 8006a4e:	4904      	ldr	r1, [pc, #16]	; (8006a60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006a50:	4804      	ldr	r0, [pc, #16]	; (8006a64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006a52:	f7ff fe17 	bl	8006684 <USBD_GetString>
  return USBD_StrDesc;
 8006a56:	4b02      	ldr	r3, [pc, #8]	; (8006a60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3708      	adds	r7, #8
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	20000c64 	.word	0x20000c64
 8006a64:	080071b4 	.word	0x080071b4

08006a68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	4603      	mov	r3, r0
 8006a70:	6039      	str	r1, [r7, #0]
 8006a72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	221a      	movs	r2, #26
 8006a78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006a7a:	f000 f843 	bl	8006b04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006a7e:	4b02      	ldr	r3, [pc, #8]	; (8006a88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	20000160 	.word	0x20000160

08006a8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	4603      	mov	r3, r0
 8006a94:	6039      	str	r1, [r7, #0]
 8006a96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006a98:	79fb      	ldrb	r3, [r7, #7]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d105      	bne.n	8006aaa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	4907      	ldr	r1, [pc, #28]	; (8006ac0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006aa2:	4808      	ldr	r0, [pc, #32]	; (8006ac4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006aa4:	f7ff fdee 	bl	8006684 <USBD_GetString>
 8006aa8:	e004      	b.n	8006ab4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006aaa:	683a      	ldr	r2, [r7, #0]
 8006aac:	4904      	ldr	r1, [pc, #16]	; (8006ac0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006aae:	4805      	ldr	r0, [pc, #20]	; (8006ac4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ab0:	f7ff fde8 	bl	8006684 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ab4:	4b02      	ldr	r3, [pc, #8]	; (8006ac0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3708      	adds	r7, #8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	20000c64 	.word	0x20000c64
 8006ac4:	080071c8 	.word	0x080071c8

08006ac8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	4603      	mov	r3, r0
 8006ad0:	6039      	str	r1, [r7, #0]
 8006ad2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ad4:	79fb      	ldrb	r3, [r7, #7]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d105      	bne.n	8006ae6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ada:	683a      	ldr	r2, [r7, #0]
 8006adc:	4907      	ldr	r1, [pc, #28]	; (8006afc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006ade:	4808      	ldr	r0, [pc, #32]	; (8006b00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006ae0:	f7ff fdd0 	bl	8006684 <USBD_GetString>
 8006ae4:	e004      	b.n	8006af0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	4904      	ldr	r1, [pc, #16]	; (8006afc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006aea:	4805      	ldr	r0, [pc, #20]	; (8006b00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006aec:	f7ff fdca 	bl	8006684 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006af0:	4b02      	ldr	r3, [pc, #8]	; (8006afc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3708      	adds	r7, #8
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	20000c64 	.word	0x20000c64
 8006b00:	080071d4 	.word	0x080071d4

08006b04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006b0a:	4b0f      	ldr	r3, [pc, #60]	; (8006b48 <Get_SerialNum+0x44>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006b10:	4b0e      	ldr	r3, [pc, #56]	; (8006b4c <Get_SerialNum+0x48>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006b16:	4b0e      	ldr	r3, [pc, #56]	; (8006b50 <Get_SerialNum+0x4c>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4413      	add	r3, r2
 8006b22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d009      	beq.n	8006b3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006b2a:	2208      	movs	r2, #8
 8006b2c:	4909      	ldr	r1, [pc, #36]	; (8006b54 <Get_SerialNum+0x50>)
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 f814 	bl	8006b5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006b34:	2204      	movs	r2, #4
 8006b36:	4908      	ldr	r1, [pc, #32]	; (8006b58 <Get_SerialNum+0x54>)
 8006b38:	68b8      	ldr	r0, [r7, #8]
 8006b3a:	f000 f80f 	bl	8006b5c <IntToUnicode>
  }
}
 8006b3e:	bf00      	nop
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	1ffff7e8 	.word	0x1ffff7e8
 8006b4c:	1ffff7ec 	.word	0x1ffff7ec
 8006b50:	1ffff7f0 	.word	0x1ffff7f0
 8006b54:	20000162 	.word	0x20000162
 8006b58:	20000172 	.word	0x20000172

08006b5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b087      	sub	sp, #28
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	4613      	mov	r3, r2
 8006b68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006b6e:	2300      	movs	r3, #0
 8006b70:	75fb      	strb	r3, [r7, #23]
 8006b72:	e027      	b.n	8006bc4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	0f1b      	lsrs	r3, r3, #28
 8006b78:	2b09      	cmp	r3, #9
 8006b7a:	d80b      	bhi.n	8006b94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	0f1b      	lsrs	r3, r3, #28
 8006b80:	b2da      	uxtb	r2, r3
 8006b82:	7dfb      	ldrb	r3, [r7, #23]
 8006b84:	005b      	lsls	r3, r3, #1
 8006b86:	4619      	mov	r1, r3
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	440b      	add	r3, r1
 8006b8c:	3230      	adds	r2, #48	; 0x30
 8006b8e:	b2d2      	uxtb	r2, r2
 8006b90:	701a      	strb	r2, [r3, #0]
 8006b92:	e00a      	b.n	8006baa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	0f1b      	lsrs	r3, r3, #28
 8006b98:	b2da      	uxtb	r2, r3
 8006b9a:	7dfb      	ldrb	r3, [r7, #23]
 8006b9c:	005b      	lsls	r3, r3, #1
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	440b      	add	r3, r1
 8006ba4:	3237      	adds	r2, #55	; 0x37
 8006ba6:	b2d2      	uxtb	r2, r2
 8006ba8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	011b      	lsls	r3, r3, #4
 8006bae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006bb0:	7dfb      	ldrb	r3, [r7, #23]
 8006bb2:	005b      	lsls	r3, r3, #1
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	4413      	add	r3, r2
 8006bba:	2200      	movs	r2, #0
 8006bbc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006bbe:	7dfb      	ldrb	r3, [r7, #23]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	75fb      	strb	r3, [r7, #23]
 8006bc4:	7dfa      	ldrb	r2, [r7, #23]
 8006bc6:	79fb      	ldrb	r3, [r7, #7]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d3d3      	bcc.n	8006b74 <IntToUnicode+0x18>
  }
}
 8006bcc:	bf00      	nop
 8006bce:	bf00      	nop
 8006bd0:	371c      	adds	r7, #28
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bc80      	pop	{r7}
 8006bd6:	4770      	bx	lr

08006bd8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a0d      	ldr	r2, [pc, #52]	; (8006c1c <HAL_PCD_MspInit+0x44>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d113      	bne.n	8006c12 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006bea:	4b0d      	ldr	r3, [pc, #52]	; (8006c20 <HAL_PCD_MspInit+0x48>)
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	4a0c      	ldr	r2, [pc, #48]	; (8006c20 <HAL_PCD_MspInit+0x48>)
 8006bf0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006bf4:	61d3      	str	r3, [r2, #28]
 8006bf6:	4b0a      	ldr	r3, [pc, #40]	; (8006c20 <HAL_PCD_MspInit+0x48>)
 8006bf8:	69db      	ldr	r3, [r3, #28]
 8006bfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bfe:	60fb      	str	r3, [r7, #12]
 8006c00:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006c02:	2200      	movs	r2, #0
 8006c04:	2100      	movs	r1, #0
 8006c06:	2014      	movs	r0, #20
 8006c08:	f7f9 fd05 	bl	8000616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006c0c:	2014      	movs	r0, #20
 8006c0e:	f7f9 fd1e 	bl	800064e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006c12:	bf00      	nop
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	40005c00 	.word	0x40005c00
 8006c20:	40021000 	.word	0x40021000

08006c24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8006c38:	4619      	mov	r1, r3
 8006c3a:	4610      	mov	r0, r2
 8006c3c:	f7fe fdf2 	bl	8005824 <USBD_LL_SetupStage>
}
 8006c40:	bf00      	nop
 8006c42:	3708      	adds	r7, #8
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	460b      	mov	r3, r1
 8006c52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8006c5a:	78fa      	ldrb	r2, [r7, #3]
 8006c5c:	6879      	ldr	r1, [r7, #4]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	00db      	lsls	r3, r3, #3
 8006c66:	440b      	add	r3, r1
 8006c68:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	78fb      	ldrb	r3, [r7, #3]
 8006c70:	4619      	mov	r1, r3
 8006c72:	f7fe fe24 	bl	80058be <USBD_LL_DataOutStage>
}
 8006c76:	bf00      	nop
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b082      	sub	sp, #8
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
 8006c86:	460b      	mov	r3, r1
 8006c88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8006c90:	78fa      	ldrb	r2, [r7, #3]
 8006c92:	6879      	ldr	r1, [r7, #4]
 8006c94:	4613      	mov	r3, r2
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	4413      	add	r3, r2
 8006c9a:	00db      	lsls	r3, r3, #3
 8006c9c:	440b      	add	r3, r1
 8006c9e:	333c      	adds	r3, #60	; 0x3c
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	78fb      	ldrb	r3, [r7, #3]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	f7fe fe7b 	bl	80059a0 <USBD_LL_DataInStage>
}
 8006caa:	bf00      	nop
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b082      	sub	sp, #8
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7fe ff8b 	bl	8005bdc <USBD_LL_SOF>
}
 8006cc6:	bf00      	nop
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b084      	sub	sp, #16
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d001      	beq.n	8006ce6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006ce2:	f7f9 fac9 	bl	8000278 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8006cec:	7bfa      	ldrb	r2, [r7, #15]
 8006cee:	4611      	mov	r1, r2
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7fe ff3b 	bl	8005b6c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7fe fef4 	bl	8005aea <USBD_LL_Reset>
}
 8006d02:	bf00      	nop
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
	...

08006d0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7fe ff35 	bl	8005b8a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d005      	beq.n	8006d34 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006d28:	4b04      	ldr	r3, [pc, #16]	; (8006d3c <HAL_PCD_SuspendCallback+0x30>)
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	4a03      	ldr	r2, [pc, #12]	; (8006d3c <HAL_PCD_SuspendCallback+0x30>)
 8006d2e:	f043 0306 	orr.w	r3, r3, #6
 8006d32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006d34:	bf00      	nop
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	e000ed00 	.word	0xe000ed00

08006d40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fe ff2f 	bl	8005bb2 <USBD_LL_Resume>
}
 8006d54:	bf00      	nop
 8006d56:	3708      	adds	r7, #8
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006d64:	4a28      	ldr	r2, [pc, #160]	; (8006e08 <USBD_LL_Init+0xac>)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a26      	ldr	r2, [pc, #152]	; (8006e08 <USBD_LL_Init+0xac>)
 8006d70:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006d74:	4b24      	ldr	r3, [pc, #144]	; (8006e08 <USBD_LL_Init+0xac>)
 8006d76:	4a25      	ldr	r2, [pc, #148]	; (8006e0c <USBD_LL_Init+0xb0>)
 8006d78:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006d7a:	4b23      	ldr	r3, [pc, #140]	; (8006e08 <USBD_LL_Init+0xac>)
 8006d7c:	2208      	movs	r2, #8
 8006d7e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006d80:	4b21      	ldr	r3, [pc, #132]	; (8006e08 <USBD_LL_Init+0xac>)
 8006d82:	2202      	movs	r2, #2
 8006d84:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006d86:	4b20      	ldr	r3, [pc, #128]	; (8006e08 <USBD_LL_Init+0xac>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006d8c:	4b1e      	ldr	r3, [pc, #120]	; (8006e08 <USBD_LL_Init+0xac>)
 8006d8e:	2200      	movs	r2, #0
 8006d90:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006d92:	4b1d      	ldr	r3, [pc, #116]	; (8006e08 <USBD_LL_Init+0xac>)
 8006d94:	2200      	movs	r2, #0
 8006d96:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006d98:	481b      	ldr	r0, [pc, #108]	; (8006e08 <USBD_LL_Init+0xac>)
 8006d9a:	f7f9 fc72 	bl	8000682 <HAL_PCD_Init>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d001      	beq.n	8006da8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006da4:	f7f9 fa68 	bl	8000278 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006dae:	2318      	movs	r3, #24
 8006db0:	2200      	movs	r2, #0
 8006db2:	2100      	movs	r1, #0
 8006db4:	f7fb f991 	bl	80020da <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006dbe:	2358      	movs	r3, #88	; 0x58
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	2180      	movs	r1, #128	; 0x80
 8006dc4:	f7fb f989 	bl	80020da <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006dce:	23c0      	movs	r3, #192	; 0xc0
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	2181      	movs	r1, #129	; 0x81
 8006dd4:	f7fb f981 	bl	80020da <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006dde:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006de2:	2200      	movs	r2, #0
 8006de4:	2101      	movs	r1, #1
 8006de6:	f7fb f978 	bl	80020da <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006df0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006df4:	2200      	movs	r2, #0
 8006df6:	2182      	movs	r1, #130	; 0x82
 8006df8:	f7fb f96f 	bl	80020da <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3708      	adds	r7, #8
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	20000e64 	.word	0x20000e64
 8006e0c:	40005c00 	.word	0x40005c00

08006e10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7f9 fd2a 	bl	8000880 <HAL_PCD_Start>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e30:	7bfb      	ldrb	r3, [r7, #15]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 f94e 	bl	80070d4 <USBD_Get_USB_Status>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b084      	sub	sp, #16
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
 8006e4e:	4608      	mov	r0, r1
 8006e50:	4611      	mov	r1, r2
 8006e52:	461a      	mov	r2, r3
 8006e54:	4603      	mov	r3, r0
 8006e56:	70fb      	strb	r3, [r7, #3]
 8006e58:	460b      	mov	r3, r1
 8006e5a:	70bb      	strb	r3, [r7, #2]
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e64:	2300      	movs	r3, #0
 8006e66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006e6e:	78bb      	ldrb	r3, [r7, #2]
 8006e70:	883a      	ldrh	r2, [r7, #0]
 8006e72:	78f9      	ldrb	r1, [r7, #3]
 8006e74:	f7f9 fe7f 	bl	8000b76 <HAL_PCD_EP_Open>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f000 f928 	bl	80070d4 <USBD_Get_USB_Status>
 8006e84:	4603      	mov	r3, r0
 8006e86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e88:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b084      	sub	sp, #16
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006eac:	78fa      	ldrb	r2, [r7, #3]
 8006eae:	4611      	mov	r1, r2
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7f9 febd 	bl	8000c30 <HAL_PCD_EP_Close>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006eba:	7bfb      	ldrb	r3, [r7, #15]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f000 f909 	bl	80070d4 <USBD_Get_USB_Status>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ec6:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	460b      	mov	r3, r1
 8006eda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006edc:	2300      	movs	r3, #0
 8006ede:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006eea:	78fa      	ldrb	r2, [r7, #3]
 8006eec:	4611      	mov	r1, r2
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7f9 ff65 	bl	8000dbe <HAL_PCD_EP_SetStall>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ef8:	7bfb      	ldrb	r3, [r7, #15]
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 f8ea 	bl	80070d4 <USBD_Get_USB_Status>
 8006f00:	4603      	mov	r3, r0
 8006f02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f04:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b084      	sub	sp, #16
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
 8006f16:	460b      	mov	r3, r1
 8006f18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f28:	78fa      	ldrb	r2, [r7, #3]
 8006f2a:	4611      	mov	r1, r2
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7f9 ffa6 	bl	8000e7e <HAL_PCD_EP_ClrStall>
 8006f32:	4603      	mov	r3, r0
 8006f34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f000 f8cb 	bl	80070d4 <USBD_Get_USB_Status>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f42:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	460b      	mov	r3, r1
 8006f56:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f5e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006f60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	da0c      	bge.n	8006f82 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006f68:	78fb      	ldrb	r3, [r7, #3]
 8006f6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f6e:	68f9      	ldr	r1, [r7, #12]
 8006f70:	1c5a      	adds	r2, r3, #1
 8006f72:	4613      	mov	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	00db      	lsls	r3, r3, #3
 8006f7a:	440b      	add	r3, r1
 8006f7c:	3302      	adds	r3, #2
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	e00b      	b.n	8006f9a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006f82:	78fb      	ldrb	r3, [r7, #3]
 8006f84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f88:	68f9      	ldr	r1, [r7, #12]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	00db      	lsls	r3, r3, #3
 8006f92:	440b      	add	r3, r1
 8006f94:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8006f98:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3714      	adds	r7, #20
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bc80      	pop	{r7}
 8006fa2:	4770      	bx	lr

08006fa4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	460b      	mov	r3, r1
 8006fae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fbe:	78fa      	ldrb	r2, [r7, #3]
 8006fc0:	4611      	mov	r1, r2
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7f9 fdb2 	bl	8000b2c <HAL_PCD_SetAddress>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f000 f880 	bl	80070d4 <USBD_Get_USB_Status>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b086      	sub	sp, #24
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	60f8      	str	r0, [r7, #12]
 8006fea:	607a      	str	r2, [r7, #4]
 8006fec:	461a      	mov	r2, r3
 8006fee:	460b      	mov	r3, r1
 8006ff0:	72fb      	strb	r3, [r7, #11]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007004:	893b      	ldrh	r3, [r7, #8]
 8007006:	7af9      	ldrb	r1, [r7, #11]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	f7f9 fea1 	bl	8000d50 <HAL_PCD_EP_Transmit>
 800700e:	4603      	mov	r3, r0
 8007010:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007012:	7dfb      	ldrb	r3, [r7, #23]
 8007014:	4618      	mov	r0, r3
 8007016:	f000 f85d 	bl	80070d4 <USBD_Get_USB_Status>
 800701a:	4603      	mov	r3, r0
 800701c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800701e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3718      	adds	r7, #24
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	607a      	str	r2, [r7, #4]
 8007032:	461a      	mov	r2, r3
 8007034:	460b      	mov	r3, r1
 8007036:	72fb      	strb	r3, [r7, #11]
 8007038:	4613      	mov	r3, r2
 800703a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800703c:	2300      	movs	r3, #0
 800703e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007040:	2300      	movs	r3, #0
 8007042:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800704a:	893b      	ldrh	r3, [r7, #8]
 800704c:	7af9      	ldrb	r1, [r7, #11]
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	f7f9 fe36 	bl	8000cc0 <HAL_PCD_EP_Receive>
 8007054:	4603      	mov	r3, r0
 8007056:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007058:	7dfb      	ldrb	r3, [r7, #23]
 800705a:	4618      	mov	r0, r3
 800705c:	f000 f83a 	bl	80070d4 <USBD_Get_USB_Status>
 8007060:	4603      	mov	r3, r0
 8007062:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007064:	7dbb      	ldrb	r3, [r7, #22]
}
 8007066:	4618      	mov	r0, r3
 8007068:	3718      	adds	r7, #24
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b082      	sub	sp, #8
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
 8007076:	460b      	mov	r3, r1
 8007078:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007080:	78fa      	ldrb	r2, [r7, #3]
 8007082:	4611      	mov	r1, r2
 8007084:	4618      	mov	r0, r3
 8007086:	f7f9 fe4c 	bl	8000d22 <HAL_PCD_EP_GetRxCount>
 800708a:	4603      	mov	r3, r0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800709c:	4b02      	ldr	r3, [pc, #8]	; (80070a8 <USBD_static_malloc+0x14>)
}
 800709e:	4618      	mov	r0, r3
 80070a0:	370c      	adds	r7, #12
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bc80      	pop	{r7}
 80070a6:	4770      	bx	lr
 80070a8:	20001154 	.word	0x20001154

080070ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]

}
 80070b4:	bf00      	nop
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bc80      	pop	{r7}
 80070bc:	4770      	bx	lr

080070be <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070be:	b480      	push	{r7}
 80070c0:	b083      	sub	sp, #12
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
 80070c6:	460b      	mov	r3, r1
 80070c8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80070ca:	bf00      	nop
 80070cc:	370c      	adds	r7, #12
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bc80      	pop	{r7}
 80070d2:	4770      	bx	lr

080070d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	4603      	mov	r3, r0
 80070dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070de:	2300      	movs	r3, #0
 80070e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80070e2:	79fb      	ldrb	r3, [r7, #7]
 80070e4:	2b03      	cmp	r3, #3
 80070e6:	d817      	bhi.n	8007118 <USBD_Get_USB_Status+0x44>
 80070e8:	a201      	add	r2, pc, #4	; (adr r2, 80070f0 <USBD_Get_USB_Status+0x1c>)
 80070ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ee:	bf00      	nop
 80070f0:	08007101 	.word	0x08007101
 80070f4:	08007107 	.word	0x08007107
 80070f8:	0800710d 	.word	0x0800710d
 80070fc:	08007113 	.word	0x08007113
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007100:	2300      	movs	r3, #0
 8007102:	73fb      	strb	r3, [r7, #15]
    break;
 8007104:	e00b      	b.n	800711e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007106:	2302      	movs	r3, #2
 8007108:	73fb      	strb	r3, [r7, #15]
    break;
 800710a:	e008      	b.n	800711e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800710c:	2301      	movs	r3, #1
 800710e:	73fb      	strb	r3, [r7, #15]
    break;
 8007110:	e005      	b.n	800711e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007112:	2302      	movs	r3, #2
 8007114:	73fb      	strb	r3, [r7, #15]
    break;
 8007116:	e002      	b.n	800711e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007118:	2302      	movs	r3, #2
 800711a:	73fb      	strb	r3, [r7, #15]
    break;
 800711c:	bf00      	nop
  }
  return usb_status;
 800711e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3714      	adds	r7, #20
 8007124:	46bd      	mov	sp, r7
 8007126:	bc80      	pop	{r7}
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop

0800712c <memset>:
 800712c:	4603      	mov	r3, r0
 800712e:	4402      	add	r2, r0
 8007130:	4293      	cmp	r3, r2
 8007132:	d100      	bne.n	8007136 <memset+0xa>
 8007134:	4770      	bx	lr
 8007136:	f803 1b01 	strb.w	r1, [r3], #1
 800713a:	e7f9      	b.n	8007130 <memset+0x4>

0800713c <__libc_init_array>:
 800713c:	b570      	push	{r4, r5, r6, lr}
 800713e:	2600      	movs	r6, #0
 8007140:	4d0c      	ldr	r5, [pc, #48]	; (8007174 <__libc_init_array+0x38>)
 8007142:	4c0d      	ldr	r4, [pc, #52]	; (8007178 <__libc_init_array+0x3c>)
 8007144:	1b64      	subs	r4, r4, r5
 8007146:	10a4      	asrs	r4, r4, #2
 8007148:	42a6      	cmp	r6, r4
 800714a:	d109      	bne.n	8007160 <__libc_init_array+0x24>
 800714c:	f000 f81a 	bl	8007184 <_init>
 8007150:	2600      	movs	r6, #0
 8007152:	4d0a      	ldr	r5, [pc, #40]	; (800717c <__libc_init_array+0x40>)
 8007154:	4c0a      	ldr	r4, [pc, #40]	; (8007180 <__libc_init_array+0x44>)
 8007156:	1b64      	subs	r4, r4, r5
 8007158:	10a4      	asrs	r4, r4, #2
 800715a:	42a6      	cmp	r6, r4
 800715c:	d105      	bne.n	800716a <__libc_init_array+0x2e>
 800715e:	bd70      	pop	{r4, r5, r6, pc}
 8007160:	f855 3b04 	ldr.w	r3, [r5], #4
 8007164:	4798      	blx	r3
 8007166:	3601      	adds	r6, #1
 8007168:	e7ee      	b.n	8007148 <__libc_init_array+0xc>
 800716a:	f855 3b04 	ldr.w	r3, [r5], #4
 800716e:	4798      	blx	r3
 8007170:	3601      	adds	r6, #1
 8007172:	e7f2      	b.n	800715a <__libc_init_array+0x1e>
 8007174:	08007208 	.word	0x08007208
 8007178:	08007208 	.word	0x08007208
 800717c:	08007208 	.word	0x08007208
 8007180:	0800720c 	.word	0x0800720c

08007184 <_init>:
 8007184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007186:	bf00      	nop
 8007188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800718a:	bc08      	pop	{r3}
 800718c:	469e      	mov	lr, r3
 800718e:	4770      	bx	lr

08007190 <_fini>:
 8007190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007192:	bf00      	nop
 8007194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007196:	bc08      	pop	{r3}
 8007198:	469e      	mov	lr, r3
 800719a:	4770      	bx	lr
